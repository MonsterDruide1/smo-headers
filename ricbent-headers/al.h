#pragma once

namespace al {

createAndAppendEdge<ElectricWireVertex, ElectricWireEdge>(al::Graph*, ElectricWireVertex*, ElectricWireVertex*, bool);
appendGraphFromRail<ElectricWireVertex, ElectricWireEdge>(al::Graph*, al::Rail const*, bool, bool);
createAndAppendEdge<FastenerVertex, FastenerEdge>(al::Graph*, FastenerVertex*, FastenerVertex*, bool);
insertVertexAndSplitEdge<FastenerVertex, FastenerEdge>(al::Graph*, FastenerVertex*, FastenerEdge*);
appendGraphFromRail<FastenerVertex, FastenerEdge>(al::Graph*, al::Rail const*, bool, bool);
registSupportFreezeSyncGroup(al::LiveActor*, al::ActorInitInfo const&);
appendGraphFromRail<al::Graph::PosVertex, al::Graph::PosEdge>(al::Graph*, al::Rail const*, bool, bool);
createAndAppendEdge<al::Graph::PosVertex, al::Graph::PosEdge>(al::Graph*, al::Graph::PosVertex*, al::Graph::PosVertex*, bool);
createAndAppendEdge<RabbitGraphVertex, RabbitGraphEdgeMoon>(al::Graph*, RabbitGraphVertex*, RabbitGraphVertex*, bool);
createAndAppendEdge<RabbitGraphVertex, RabbitGraphEdge>(al::Graph*, RabbitGraphVertex*, RabbitGraphVertex*, bool);
appendGraphFromRail<RabbitGraphVertex, RabbitGraphEdgeMoon>(al::Graph*, al::Rail const*, bool, bool);
appendGraphFromRail<RabbitGraphVertex, RabbitGraphEdge>(al::Graph*, al::Rail const*, bool, bool);
setKoopaCapTutorialInfo(TutorialInfo*, InformationWindowRequester*, bool);
trySetAudioInfo<al::AudioResourceLoadGroupInfo>(al::AudioInfoListWithParts<al::AudioResourceLoadGroupInfo> const*, al::AudioResourceLoadGroupInfo const*, bool);
tryFindAreaObj(al::IUseAreaObj const*, char const*, sead::Vector3<float> const&);
tryFindAreaObjWithFilter(al::IUseAreaObj const*, char const*, sead::Vector3<float> const&, al::AreaObjFilterBase*);
tryFindAreaObjAll(al::IUseAreaObj const*, char const*, sead::Vector3<float> const&, al::AreaObjFindCallBack*);
tryFindAreaObjGroup(al::IUseAreaObj const*, char const*);
isInAreaObj(al::AreaObjGroup const*, sead::Vector3<float> const&);
tryGetAreaObj(al::AreaObjGroup const*, sead::Vector3<float> const&);
isInAreaPos(al::AreaObj const*, sead::Vector3<float> const&);
isInAreaObj(al::IUseAreaObj const*, char const*, sead::Vector3<float> const&);
isExistAreaObj(al::IUseAreaObj const*, char const*);
isInDeathArea(al::IUseAreaObj const*, sead::Vector3<float> const&);
isInWaterArea(al::IUseAreaObj const*, sead::Vector3<float> const&);
isInPlayerControlOffArea(al::IUseAreaObj const*, sead::Vector3<float> const&);
calcAreaObjNum(al::IUseAreaObj const*, char const*);
calcWaterSinkDepth(al::IUseAreaObj const*, sead::Vector3<float> const&);
tryGetAreaObjArg(int*, al::AreaObj const*, char const*);
tryGetAreaObjArg(float*, al::AreaObj const*, char const*);
tryGetAreaObjArg(bool*, al::AreaObj const*, char const*);
tryGetAreaObjStringArg(char const**, al::AreaObj const*, char const*);
getAreaObjBaseMtx(al::AreaObj const*);
getAreaObjScale(al::AreaObj const*);
getAreaObjDirFront(sead::Vector3<float>*, al::AreaObj const*);
getAreaObjDirUp(sead::Vector3<float>*, al::AreaObj const*);
getAreaObjDirSide(sead::Vector3<float>*, al::AreaObj const*);
calcNearestAreaObjEdgePos(sead::Vector3<float>*, al::AreaObj const*, sead::Vector3<float> const&);
calcNearestAreaObjEdgePosTopY(sead::Vector3<float>*, al::AreaObj const*, sead::Vector3<float> const&);
calcNearestAreaObjEdgeRateTopY(al::AreaObj const*, sead::Vector3<float> const&);
calcAreaObjCenterPos(sead::Vector3<float>*, al::AreaObj const*);
checkAreaObjCollisionByArrow(sead::Vector3<float>*, sead::Vector3<float>*, al::AreaObj const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcFindAreaSurface(al::IUseAreaObj const*, char const*, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcFindAreaSurface(al::IUseAreaObj const*, char const*, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
createAudioEffect(al::IUseAudioKeeper const*, char const*);
startAudioEffect(al::IUseAudioKeeper const*, char const*);
startAudioEffectWithAreaCheck(al::IUseAudioKeeper const*);
startAudioEffectDefaultArea(al::IUseAudioKeeper const*);
endAudioEffect(al::IUseAudioKeeper const*, char const*);
endAudioEffectDefaultArea(al::IUseAudioKeeper const*);
pauseAudioEffectBusGroup(al::IUseAudioKeeper const*, char const*);
resumeAudioEffectBusGroup(al::IUseAudioKeeper const*, char const*);
getCurAudioEffectName(al::IUseAudioKeeper const*);
activateAudioEventController(al::IUseAudioKeeper const*);
deactivateAudioEventController(al::IUseAudioKeeper const*);
activateSePlayEvent(al::IUseAudioKeeper const*, bool);
activateBgmChangeEvent(al::IUseAudioKeeper const*, bool);
activateBgmSituationChangeEvent(al::IUseAudioKeeper const*, bool);
activateAudioEffectChangeEvent(al::IUseAudioKeeper const*, bool);
deactivateSePlayEvent(al::IUseAudioKeeper const*, bool);
deactivateBgmChangeEvent(al::IUseAudioKeeper const*, bool);
deactivateBgmSituationChangeEvent(al::IUseAudioKeeper const*, bool);
deactivateAudioEffectChangeEvent(al::IUseAudioKeeper const*, bool);
allowAudioEventActivation(al::IUseAudioKeeper const*);
banAudioEventActivation(al::IUseAudioKeeper const*);
notifyDemoSkipToDemoSyncedProc(al::IUseAudioKeeper const*);
killAudioKeeper(al::IUseAudioKeeper const*);
tryKillAudioKeeper(al::IUseAudioKeeper const*);
appearAudioKeeper(al::IUseAudioKeeper const*);
tryAppearAudioKeeper(al::IUseAudioKeeper const*);
tryRegistBgmPlayObj(al::IUseAudioKeeper const*, al::BgmPlayObj*);
calcHashCode(char const*);
calcHashCodeLower(char const*);
calcHashCodeFmt(char const*, std::__va_list);
calcHashCodeFmt(char const*, ...);
getBaseName(char const*);
createStringIfInStack(char const*);
createConcatString(char const*, char const*);
createFileNameBySuffix(sead::BufferedSafeStringBase<char>*, char const*, char const*);
outputValueWithComma(char*, unsigned int, unsigned long, bool, bool);
extractString(char*, char const*, unsigned int, unsigned int);
searchSubString(char const*, char const*);
searchSubString(char const*, char const*, int);
getSubStringUnmatched(char const**, char const*, al::MatchStr const&, void (*)(char const*, char const*, void*), void*);
getSubStringUnmatched(char const*, al::MatchStr const&);
extractBaseNameW(sead::BufferedSafeStringBase<char16_t>*, sead::SafeStringBase<char16_t> const&);
removeExtensionString(char*, unsigned int, char const*);
removeStringFromEnd(char*, unsigned int, char const*, char const*);
translateCharacters(char*, char const*, char const*);
tryReplaceString(sead::BufferedSafeStringBase<char>*, char const*, char const*);
tryReplaceString(sead::BufferedSafeStringBase<char>*, char const*, char const*, char const*);
tryReplaceStringNoRecursive(sead::BufferedSafeStringBase<char>*, char const*, char const*, char const*);
isEqualString(char16_t const*, char16_t const*);
isEqualSubString(char const*, char const*);
isEqualSubString(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&);
isStartWithString(char const*, char const*);
isEndWithString(char const*, char const*);
isMatchString(char const*, al::MatchStr const&);
compareStringIgnoreCase(char const*, char const*);
makeUrlEncodeString(char*, unsigned int, char const*);
makeUrlDecodeString(char*, unsigned int, char const*);
copyString(char*, char const*, unsigned int);
copyStringW(char16_t*, char16_t const*, unsigned int);
isInStack(void const*);
isEqualString(char const*, char const*);
isEqualString(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&);
isEqualStringCase(char const*, char const*);
isEqualStringCase(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&);
getBgmDirector(al::IUseAudioKeeper const*);
tryGetBgmDirector(al::IUseAudioKeeper const*);
getBgmSituationDirector(al::IUseAudioKeeper const*);
getBgm3DParamsController(al::IUseAudioKeeper const*);
getActiveBgmLine(al::IUseAudioKeeper const*);
getPlayingBgmLine(al::IUseAudioKeeper const*, char const*);
getCurPlayingBgmPlayName(al::IUseAudioKeeper const*);
getCurPlayingBgmResourceName(al::IUseAudioKeeper const*);
getBgmPlayNameInCurPosition(al::IUseAudioKeeper const*, bool);
getBgmResourceNameInCurPosition(al::IUseAudioKeeper const*, bool);
getActiveBgmCurSamplePosition(al::IUseAudioKeeper const*);
getBgmLoopEndSamplePosition(al::IUseAudioKeeper const*, char const*);
startBgm(al::IUseAudioKeeper const*, char const*, int, int);
startBgm(al::IUseAudioKeeper const*, al::BgmPlayingRequest const&, bool, bool);
startBgmWithSuffix(al::IUseAudioKeeper const*, char const*, char const*, int, int);
startAndStopBgmInCurPosition(al::IUseAudioKeeper const*, bool);
startBgmSituation(al::IUseAudioKeeper const*, char const*, bool);
prepareBgm(al::IUseAudioKeeper const*, al::BgmPlayingRequest const&);
prepareBgmWithAreaCheck(al::IUseAudioKeeper const*);
stopBgm(al::IUseAudioKeeper const*, char const*, int);
stopBgm(al::IUseAudioKeeper const*, al::BgmPlayingRequest const&);
pauseBgm(al::IUseAudioKeeper const*, char const*, int);
resumeBgm(al::IUseAudioKeeper const*, char const*, int);
isPlayingBgm(al::IUseAudioKeeper const*);
isPlayingBgm(al::IUseAudioKeeper const*, char const*);
isRunningBgm(al::IUseAudioKeeper const*, char const*);
isPlayingResourceCategoryBgm(al::IUseAudioKeeper const*, char const*);
stopActiveBgm(al::IUseAudioKeeper const*, int);
pauseActiveBgm(al::IUseAudioKeeper const*, int);
resumeActiveBgm(al::IUseAudioKeeper const*, int);
isPlayingActiveBgm(al::IUseAudioKeeper const*, char const*);
isPauseActiveBgm(al::IUseAudioKeeper const*);
stopAllBgm(al::IUseAudioKeeper const*, int);
tryStopAllBgm(al::IUseAudioKeeper const*, int);
setTriggerEventForStopAllBgm(al::IUseAudioKeeper const*, al::FunctorBase const&);
tryPauseBgmIfDifferBgmArea(al::LiveActor const*, sead::Vector3<float> const&, int);
tryPauseBgmIfLowPriority(al::IUseAudioKeeper const*, char const*, int);
startBgmSituation(al::IUseAudioKeeper const*, char const*, bool, bool);
startBgmSituation(al::IUseAudioKeeper const*, sead::PtrArray<al::IBgmParamsChanger>*, char const*, bool, bool);
forceStartBgmSituation(al::IUseAudioKeeper const*, char const*, bool, bool);
endBgmSituation(al::IUseAudioKeeper const*, char const*, bool);
endBgmSituation(al::IUseAudioKeeper const*, sead::PtrArray<al::IBgmParamsChanger>*, char const*, bool);
forceEndBgmSituation(al::IUseAudioKeeper const*, char const*, bool);
startBgm3D(al::IUseAudioKeeper const*);
endBgm3D(al::IUseAudioKeeper const*);
changeBgm3DParams(al::IUseAudioKeeper const*, float, float, float, float, bool);
activateBgm3DController(al::IUseAudioKeeper const*);
deactivateBgm3DController(al::IUseAudioKeeper const*);
isActivateBgm3DController(al::IUseAudioKeeper const*);
getActiveBgmSituationNum(al::IUseAudioKeeper const*);
getActiveBgmSituationName(al::IUseAudioKeeper const*, int);
getDeactiveBgmSituationNum(al::IUseAudioKeeper const*);
getDeactiveBgmSituationName(al::IUseAudioKeeper const*, int);
takeBgmSituationSnapShot(al::IUseAudioKeeper const*);
applyBgmSituationSnapShot(al::IUseAudioKeeper const*);
applyNoAppliedSituationRecord(al::IUseAudioKeeper const*);
isStartedBgmSituation(al::IUseAudioKeeper const*, char const*);
endAllBgmSituation(al::IUseAudioKeeper const*);
clearBgmDataForStepOverScene(al::IUseAudioKeeper const*);
clearBgmPlayPointRecord(al::IUseAudioKeeper const*);
startBgmSyncedCurBgmBeat(al::IUseAudioKeeper const*, al::BgmPlayingRequest const&, int);
stopBgmSyncedCurBgmBeat(al::IUseAudioKeeper const*, al::BgmPlayingRequest const&, int);
disableBgmLineChange(al::IUseAudioKeeper const*);
enableBgmLineChange(al::IUseAudioKeeper const*);
isDisableBgmLineChange(al::IUseAudioKeeper const*);
disableBgmSituationChange(al::IUseAudioKeeper const*);
enableBgmSituationChange(al::IUseAudioKeeper const*, bool);
isDisableBgmSituationChange(al::IUseAudioKeeper const*);
tryAllocBgmMultiPlayingController(al::IUseAudioKeeper const*);
tryReleaseBgmMultiPlayingController(al::IUseAudioKeeper const*, al::BgmMultiPlayingController*);
getBgmLineNum(al::IUseAudioKeeper const*, bool);
getBgmLineAccessor(al::IUseAudioKeeper const*, int, bool);
getgBgmLineIndex(al::IUseAudioKeeper const*, char const*, bool);
replaceBgmPlayInfoResourceName(al::IUseAudioKeeper const*, char const*, char const*);
isEnableRhythmAnim(al::IUseAudioKeeper const*, char const*);
isTriggerBeat(al::IUseAudioKeeper const*);
isTriggerBackBeat(al::IUseAudioKeeper const*);
isTriggerMeasureTop(al::IUseAudioKeeper const*);
getBpm(al::IUseAudioKeeper const*);
getBeatRate(al::IUseAudioKeeper const*);
getCurBeat(al::IUseAudioKeeper const*);
getCurBeatOnMeasure(al::IUseAudioKeeper const*);
getLoopStartBeat(al::IUseAudioKeeper const*);
getLoopEndBeat(al::IUseAudioKeeper const*);
getFramePerMeasure(al::IUseAudioKeeper const*);
getBeatPerMeasure(al::IUseAudioKeeper const*);
isChangeActiveBgmResourceName(al::IUseAudioKeeper const*);
tryRegistTargetBgmResourceName(al::IUseAudioKeeper const*, char const*);
muteOnRunningLineTrack(al::IUseAudioKeeper*, unsigned int, bool);
muteOffRunningLineTrack(al::IUseAudioKeeper*, unsigned int, bool);
getSceneCameraInfo(al::IUseCamera const*);
getViewNumMax(al::IUseCamera const*);
getViewNumMax(al::SceneCameraInfo const*);
isValidView(al::IUseCamera const*, int);
isValidView(al::SceneCameraInfo const*, int);
getViewName(al::IUseCamera const*, int);
getViewName(al::SceneCameraInfo const*, int);
getViewMtx(al::IUseCamera const*, int);
getViewMtx(al::SceneCameraInfo const*, int);
getViewMtxPtr(al::IUseCamera const*, int);
getViewMtxPtr(al::SceneCameraInfo const*, int);
getProjectionMtx(al::IUseCamera const*, int);
getProjectionMtx(al::SceneCameraInfo const*, int);
getProjectionMtxPtr(al::IUseCamera const*, int);
getProjectionMtxPtr(al::SceneCameraInfo const*, int);
getLookAtCamera(al::IUseCamera const*, int);
getLookAtCamera(al::SceneCameraInfo const*, int);
getProjectionSead(al::IUseCamera const*, int);
getProjectionSead(al::SceneCameraInfo const*, int);
getProjection(al::IUseCamera const*, int);
getProjection(al::SceneCameraInfo const*, int);
getCameraPos(al::IUseCamera const*, int);
getCameraPos(al::SceneCameraInfo const*, int);
getCameraAt(al::IUseCamera const*, int);
getCameraAt(al::SceneCameraInfo const*, int);
getCameraUp(al::IUseCamera const*, int);
getCameraUp(al::SceneCameraInfo const*, int);
getFovyDegree(al::IUseCamera const*, int);
getFovyDegree(al::SceneCameraInfo const*, int);
getFovy(al::IUseCamera const*, int);
getFovy(al::SceneCameraInfo const*, int);
getNear(al::IUseCamera const*, int);
getNear(al::SceneCameraInfo const*, int);
getFar(al::IUseCamera const*, int);
getFar(al::SceneCameraInfo const*, int);
calcCameraDistance(al::IUseCamera const*, int);
calcFovxDegree(al::IUseCamera const*, int);
calcCurrentFovyRate(al::IUseCamera const*, int);
calcCameraFront(sead::Vector3<float>*, al::IUseCamera const*, int);
setNearClipDistance(al::IUseCamera const*, float, int);
setFarClipDistance(al::IUseCamera const*, float, int);
setCurrentCameraPose(al::CameraPoseInfo*, al::IUseCamera const*);
calcCameraDir(sead::Vector3<float>*, al::IUseCamera const*, int);
calcCameraLookDir(sead::Vector3<float>*, al::IUseCamera const*, int);
calcCameraSideDir(sead::Vector3<float>*, al::IUseCamera const*, int);
calcCameraUpDir(sead::Vector3<float>*, al::IUseCamera const*, int);
tryCalcCameraDir(sead::Vector3<float>*, al::SceneCameraInfo const*, int);
tryCalcCameraDirH(sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector3<float> const&, int);
tryCalcCameraLookDirH(sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector3<float> const&, int);
startCamera(al::IUseCamera const*, al::CameraTicket*, int);
startCameraSub(al::IUseCamera const*, al::CameraTicket*, int);
startAnimCamera(al::IUseCamera const*, al::CameraTicket*, char const*, int);
startAnimCameraAnim(al::CameraTicket*, char const*, int, int, int);
startAnimCameraWithStartStepAndEndStepAndPlayStep(al::IUseCamera const*, al::CameraTicket*, char const*, int, int, int, int);
endCamera(al::IUseCamera const*, al::CameraTicket*, int, bool);
endCameraWithNextCameraPose(al::IUseCamera const*, al::CameraTicket*, al::CameraPoseInfo const*, int);
endCameraSub(al::IUseCamera const*, al::CameraTicket*, int);
isActiveCamera(al::CameraTicket const*);
initObjectCamera(al::IUseCamera const*, al::PlacementInfo const&, char const*, char const*);
initObjectCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*, char const*);
initObjectCameraNoPlacementInfo(al::IUseCamera const*, char const*, char const*);
initFixCamera(al::IUseCamera const*, char const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
initFixDoorwayCamera(al::IUseCamera const*, char const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
initFixActorCamera(al::LiveActor const*, al::ActorInitInfo const&, char const*, sead::Vector3<float> const&, float, float, float, bool);
initFixLookCamera(al::LiveActor*, al::ActorInitInfo const&, char const*);
initFixTalkCamera(al::LiveActor const*, al::ActorInitInfo const&, char const*, sead::Vector3<float> const&, float, float, float, bool);
initFixFishingCamera(al::LiveActor const*, al::ActorInitInfo const&, char const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float, bool);
initFixPointCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*, bool);
initLookDownCamera(al::LiveActor const*, al::ActorInitInfo const&, char const*);
initProgramableCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*, sead::Vector3<float> const*, sead::Vector3<float> const*, sead::Vector3<float> const*);
initProgramableCamera(al::IUseCamera const*, char const*, sead::Vector3<float> const*, sead::Vector3<float> const*, sead::Vector3<float> const*);
initProgramableCameraWithCollider(al::IUseCamera const*, al::ActorInitInfo const&, char const*, sead::Vector3<float> const*, sead::Vector3<float> const*, sead::Vector3<float> const*);
initProgramableAngleCamera(al::IUseCamera const*, al::PlacementInfo const&, char const*, sead::Vector3<float> const*, float const*, float const*, float const*);
initProgramableCameraKeepColliderPreCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*, sead::Vector3<float> const*, sead::Vector3<float> const*, sead::Vector3<float> const*);
initShooterCameraSingle(al::IUseCamera const*, char const*);
initTowerCameraWithSave(al::IUseCamera const*, sead::Vector3<float> const*, al::ActorInitInfo const&, char const*);
initTowerCamera(al::IUseCamera const*, sead::Vector3<float> const*, al::ActorInitInfo const&, char const*);
initBossBattleCamera(al::IUseCamera const*, sead::Vector3<float> const*, al::ActorInitInfo const&, char const*);
initProgramableCameraAngleSwing(al::CameraTicket*);
initFollowCameraSimple(al::IUseCamera const*, char const*);
initFollowCameraSimple(al::IUseCamera const*, al::ActorInitInfo const&, char const*);
initDemoObjectCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*, char const*);
initDemoProgramableCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*, sead::Vector3<float> const*, sead::Vector3<float> const*, sead::Vector3<float> const*);
initDemoProgramableCameraKeepColliderPreCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*, sead::Vector3<float> const*, sead::Vector3<float> const*, sead::Vector3<float> const*);
initDemoAnimCamera(al::IUseCamera const*, al::ActorInitInfo const&, al::Resource const*, sead::Matrix34<float> const*, char const*);
initAnimCamera(al::IUseCamera const*, al::ActorInitInfo const&, al::Resource const*, sead::Matrix34<float> const*, char const*);
initDemoAnimCamera(al::LiveActor const*, al::ActorInitInfo const&, char const*);
loadActorCameraParam(al::CameraTicket*, al::LiveActor const*, char const*, char const*);
loadActorCameraParamInitFile(al::CameraTicket*, al::LiveActor const*, char const*);
setFixActorCameraTarget(al::CameraTicket*, al::LiveActor const*);
setFixActorCameraAngleH(al::CameraTicket*, float);
setTowerCameraDistance(al::CameraTicket*, float);
setTowerCameraStartAngleV(al::CameraTicket*, float);
setTowerCameraUserMarginAngleH(al::CameraTicket*, float);
resetTowerCameraUserMarginAngleH(al::CameraTicket*);
resetTowerCameraInputRotate(al::CameraTicket*, float, int);
initSubjectiveCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*);
initSubjectiveCameraNoSave(al::IUseCamera const*, char const*);
getSubjectiveCameraOffsetUp(al::CameraTicket const*);
getSubjectiveCameraOffsetFront();
setSubjectiveCameraStartAngleH(al::CameraTicket const*, float);
validateSubjectiveCameraResetAngleH(al::CameraTicket*);
requestSubjectiveCameraZoomIn(al::CameraTicket*);
initParallelCamera(al::IUseCamera const*, char const*);
initParallelCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*);
setParallelCameraLookAtOffset(al::CameraTicket const*, sead::Vector3<float> const&);
setParallelCameraDistance(al::CameraTicket const*, float);
setParallelCameraAngleH(al::CameraTicket const*, float);
setParallelCameraAngleV(al::CameraTicket const*, float);
initQuickTurnCamera(al::IUseCamera const*, char const*);
setQuickTurnCameraFollow(al::CameraTicket*);
setQuickTurnCameraRotateFast(al::CameraTicket*);
initRaceCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*);
setRaceCameraFrontDirPtr(al::CameraTicket const*, sead::Vector3<float> const*);
setRaceCameraDistance(al::CameraTicket const*, float);
setRaceCameraOffsetY(al::CameraTicket const*, float);
setRaceCameraAngleDegreeV(al::CameraTicket const*, float);
initCartCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*);
stopCartCamera(al::CameraTicket const*);
restartCartCamera(al::CameraTicket const*);
initActorRailParallelCamera(al::LiveActor const*, al::ActorInitInfo const&, char const*);
initKinopioBrigadeCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*);
initAnimCamera(al::LiveActor const*, al::ActorInitInfo const&, char const*);
validateAnimCameraAngleSwing(al::CameraTicket*);
invalidateAnimCameraAngleSwing(al::CameraTicket*);
setAnimCameraBaseMtxPtr(al::CameraTicket*, sead::Matrix34<float> const*);
initEntranceCamera(al::IUseCamera const*, al::PlacementInfo const&, char const*);
initEntranceCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*);
initEntranceCameraNoSave(al::IUseCamera const*, al::PlacementInfo const&, char const*);
setEntranceCameraParam(al::CameraTicket*, float, sead::Vector3<float> const&, sead::Vector3<float> const&);
setEntranceCameraLookAt(al::CameraTicket*, sead::Vector3<float> const&);
invalidateEndEntranceCamera(al::LiveActor*);
invalidateEndEntranceCameraWithName(al::IUseCamera*, char const*);
validateEndEntranceCamera(al::IUseCamera*);
isPlayingEntranceCamera(al::IUseCamera const*, int);
setCameraInterpoleStep(al::CameraTicket*, int);
setCameraFovyDegree(al::CameraTicket*, float);
createSimpleCameraInput(int);
setCameraInput(al::IUseCamera*, al::ICameraInput const*);
setViewCameraInput(al::IUseCamera*, al::ICameraInput const*, int);
isExistCameraInputAtDisableTiming(al::IUseCamera const*, int);
createActorCameraTarget(al::LiveActor const*, float);
createActorCameraTarget(al::LiveActor const*, sead::Vector3<float> const*);
createActorJointCameraTarget(al::LiveActor const*, char const*);
createActorMatrixCameraTarget(al::LiveActor const*, sead::Matrix34<float> const*);
isActiveCameraTarget(al::CameraTargetBase const*);
setCameraTarget(al::IUseCamera*, al::CameraTargetBase*);
resetCameraTarget(al::IUseCamera*, al::CameraTargetBase*);
createActorCameraSubTarget(al::LiveActor const*, sead::Vector3<float> const*);
createActorBackAroundCameraSubTarget(al::LiveActor const*, sead::Vector3<float> const*);
createTransCameraSubTarget(char const*, sead::Vector3<float> const*);
initCameraSubTargetTurnParam(al::CameraSubTargetBase*, al::CameraSubTargetTurnParam const*);
isActiveCameraSubTarget(al::CameraSubTargetBase const*);
setCameraSubTarget(al::IUseCamera*, al::CameraSubTargetBase*);
resetCameraSubTarget(al::IUseCamera*, al::CameraSubTargetBase*);
setCameraPlacementSubTarget(al::IUseCamera*, al::CameraSubTargetBase*);
resetCameraPlacementSubTarget(al::IUseCamera*, al::CameraSubTargetBase*);
getCameraDistanceRocketFlowerCurve();
setViewCameraTarget(al::IUseCamera*, al::CameraTargetBase*, int);
startCameraShakeByAction(al::LiveActor const*, char const*, char const*, int, int);
startCameraShakeByHitReaction(al::IUseCamera const*, char const*, char const*, char const*, int, int);
requestCameraLoopShakeWeak(al::IUseCamera const*);
isActiveCameraInterpole(al::IUseCamera const*, int);
isActiveCameraInterpole(al::SceneCameraInfo const*, int);
startCameraInterpole(al::IUseCamera const*, int, int);
requestCancelCameraInterpole(al::IUseCamera const*, int);
tryCalcCameraPoseWithoutInterpole(sead::LookAtCamera*, al::IUseCamera const*, int);
invalidateCameraPoserVerticalAbsorber(al::CameraTicket*);
requestStopCameraVerticalAbsorb(al::IUseCamera*);
validateSnapShotCameraZoomFovy(al::CameraTicket*);
validateSnapShotCameraRoll(al::CameraTicket*);
isSnapShotOrientationRotate90(al::IUseCamera const*);
isSnapShotOrientationRotate270(al::IUseCamera const*);
isValidCameraGyro(al::IUseCamera const*);
isInvalidChangeSubjectiveCamera(al::IUseCamera const*);
isCurrentCameraZooming(al::IUseCamera const*, int);
onCameraRideObj(al::LiveActor const*);
offCameraRideObj(al::LiveActor const*);
isExistAnimCameraData(al::CameraTicket const*, char const*);
isEndAnimCamera(al::CameraTicket const*);
isAnimCameraPlaying(al::CameraTicket const*);
isAnimCameraAnimPlaying(al::CameraTicket const*, char const*);
getAnimCameraStepMax(al::CameraTicket const*);
getAnimCameraStep(al::CameraTicket const*);
calcAnimCameraAnimStepMax(al::CameraTicket const*, char const*);
setAnimCameraRotateBaseUp(al::CameraTicket const*);
isWallPolygon(sead::Vector3<float> const&, sead::Vector3<float> const&);
isFloorPolygon(sead::Vector3<float> const&, sead::Vector3<float> const&);
isFloorPolygonCos(sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isCeilingPolygon(sead::Vector3<float> const&, sead::Vector3<float> const&);
calcPolygonType(sead::Vector3<float> const&, sead::Vector3<float> const&);
calcTriangleColorByAngle(sead::Color4f*, float*, sead::Vector3<float> const&);
checkStrikePointCore(al::HitInfo*, sead::TList<al::CollisionParts*> const&, al::CollisionCheckInfoBase const&);
checkStrikeSphereCore(al::SphereHitResultBuffer*, sead::TList<al::CollisionParts*> const&, al::SphereCheckInfo const&, bool, sead::Vector3<float> const&);
checkStrikeArrowCore(al::ArrowHitResultBuffer*, sead::TList<al::CollisionParts*> const&, al::ArrowCheckInfo const&);
checkStrikeSphereForPlayerCore(al::SphereHitResultBuffer*, sead::TList<al::CollisionParts*> const&, al::SphereCheckInfo const&, bool, sead::Vector3<float> const&);
checkStrikeDiskCore(al::DiskHitResultBuffer*, sead::TList<al::CollisionParts*> const&, al::DiskCheckInfo const&);
updateCollisionParts(al::CollisionParts*);
updateCollisionPartsList(sead::TList<al::CollisionParts*>*);
pushBackCollisionParts(sead::TList<al::CollisionParts*>*, al::CollisionParts*);
createSimpleCollisionPartsKeeper();
getMaterialCodeName(al::Triangle const&);
getCollisionCodeName(al::Triangle const&, char const*);
getFloorCodeName(al::Triangle const&);
getWallCodeName(al::Triangle const&);
getCameraCodeName(al::Triangle const&);
getMaterialCodeName(al::HitInfo const*);
getFloorCodeName(al::HitInfo const*);
getWallCodeName(al::HitInfo const*);
getCameraCodeName(al::HitInfo const*);
getCollisionCodeName(al::HitInfo const*, char const*);
isMaterialCode(al::Triangle const&, char const*);
isFloorCode(al::Triangle const&, char const*);
isWallCode(al::Triangle const&, char const*);
isCameraCode(al::Triangle const&, char const*);
isCollisionCode(al::Triangle const&, char const*, char const*);
isMaterialCode(al::HitInfo const*, char const*);
isFloorCode(al::HitInfo const*, char const*);
isWallCode(al::HitInfo const*, char const*);
isCameraCode(al::HitInfo const*, char const*);
isCollisionCode(al::HitInfo const*, char const*, char const*);
getSpecialPurposeName(al::HitInfo const*);
isCollisionValid(al::CollisionParts const*);
isCollisionMoving(al::CollisionParts const*);
calcForceMovePower(sead::Vector3<float>*, al::CollisionParts const*, sead::Vector3<float> const&);
calcForceMovePowerExceptNormal(sead::Vector3<float>*, al::CollisionParts const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
createCollisionPartsFilterFunc(bool (*)(al::CollisionParts const&));
createCollisionPartsFilterFuncSendMsg(bool (*)(al::CollisionParts const&, al::HitSensor*), al::HitSensor*);
createCollisionPartsFilterConnectedSensor(al::HitSensor const*);
createMtxConnector(al::LiveActor const*);
createMtxConnector(al::LiveActor const*, sead::Quat<float> const&);
tryCreateMtxConnector(al::LiveActor const*, al::ActorInitInfo const&);
tryCreateMtxConnector(al::LiveActor const*, al::ActorInitInfo const&, sead::Quat<float> const&);
createCollisionPartsConnector(al::LiveActor const*, sead::Quat<float> const&);
tryCreateCollisionPartsConnector(al::LiveActor const*, al::ActorInitInfo const&);
tryCreateCollisionPartsConnector(al::LiveActor const*, al::ActorInitInfo const&, sead::Quat<float> const&);
isMtxConnectorConnecting(al::MtxConnector const*);
disconnectMtxConnector(al::MtxConnector*);
attachMtxConnectorToCollision(al::MtxConnector*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
attachMtxConnectorToCollision(al::MtxConnector*, al::LiveActor const*, bool);
attachMtxConnectorToCollision(al::MtxConnector*, al::LiveActor const*, float, float);
attachMtxConnectorToCollisionParts(al::MtxConnector*, al::CollisionParts const*);
setConnectorBaseQuatTrans(sead::Quat<float> const&, sead::Vector3<float> const&, al::MtxConnector*);
setConnectorBaseQuatTrans(al::LiveActor*, al::MtxConnector*);
connectPoseQT(al::LiveActor*, al::MtxConnector const*);
connectPoseQT(al::LiveActor*, al::MtxConnector const*, sead::Quat<float> const&, sead::Vector3<float> const&);
connectPoseTrans(al::LiveActor*, al::MtxConnector const*, sead::Vector3<float> const&);
connectPoseMtx(al::LiveActor*, al::MtxConnector const*, sead::Matrix34<float> const&);
calcConnectTrans(sead::Vector3<float>*, al::MtxConnector const*, sead::Vector3<float> const&);
calcConnectTrans(sead::Vector3<float>*, al::MtxConnector const*);
calcConnectDir(sead::Vector3<float>*, al::MtxConnector const*, sead::Vector3<float> const&);
calcConnectQT(sead::Quat<float>*, sead::Vector3<float>*, al::MtxConnector const*, sead::Quat<float> const&, sead::Vector3<float> const&);
calcConnectQT(sead::Quat<float>*, sead::Vector3<float>*, al::MtxConnector const*);
calcConnectMtx(sead::Matrix34<float>*, al::MtxConnector const*, sead::Matrix34<float> const&);
calcConnectMtx(sead::Matrix34<float>*, al::MtxConnector const*, sead::Quat<float> const&, sead::Vector3<float> const&);
attachMtxConnectorToCollisionRT(al::MtxConnector*, al::LiveActor const*, bool, bool);
attachMtxConnectorToCollisionQT(al::MtxConnector*, al::LiveActor const*, bool, bool);
attachMtxConnectorToJoint(al::MtxConnector*, al::LiveActor const*, char const*);
attachMtxConnectorToJoint(al::MtxConnector*, al::LiveActor const*, char const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
attachMtxConnectorToMtxPtr(al::MtxConnector*, sead::Matrix34<float> const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
attachMtxConnectorToActor(al::MtxConnector*, al::LiveActor const*);
attachMtxConnectorToActor(al::MtxConnector*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
attachMtxConnectorToMtxPtr(al::MtxConnector*, sead::Matrix34<float> const*);
attachMtxConnectorToSensor(al::MtxConnector*, al::HitSensor*, sead::Matrix34<float> const&);
attachSensorConnectorToSensor(al::SensorConnector*, al::HitSensor*, sead::Matrix34<float> const&);
attachMtxConnectorToScreenPointTarget(al::MtxConnector*, al::ScreenPointTarget*, sead::Matrix34<float> const&);
attachCollisionPartsConnector(al::CollisionPartsConnector*, al::CollisionParts const*);
attachCollisionPartsConnectorToGround(al::CollisionPartsConnector*, al::LiveActor const*);
attachToHitTriangle(al::CollisionPartsConnector*, al::Triangle const&, sead::Matrix34<float> const&);
attachToHitInfo(al::CollisionPartsConnector*, al::HitInfo const&, sead::Matrix34<float> const&);
attachToHitInfoNrmToMinusZ(al::CollisionPartsConnector*, al::HitInfo const&);
calcConnectInfo(al::MtxConnector const*, sead::Vector3<float>*, sead::Quat<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
connectPoseQTUsingConnectInfo(al::LiveActor*, al::MtxConnector const*);
getConnectBaseQuat(al::MtxConnector const*);
getConnectBaseTrans(al::MtxConnector const*);
tryCallControllerApplet(al::GamePadSystem const*, int, int);
getJoyPadSingleRightPort();
getJoyPadSingleLeftPort();
getJoyPadDoublePort();
getTouchPanelPort();
getMainControllerPort();
getPlayerControllerPort(int);
getMainJoyPadDoublePort();
getMainJoyPadSingleRightPort();
getMainJoyPadSingleLeftPort();
isSameNpadId(unsigned int, int);
isPadTrigger(int, int);
isPadTriggerA(int);
isPadTriggerB(int);
isPadTriggerX(int);
isPadTriggerY(int);
isPadTriggerZL(int);
isPadTriggerZR(int);
isPadTriggerL(int);
isPadTriggerR(int);
isPadTrigger1(int);
isPadTrigger2(int);
isPadTriggerUp(int);
isPadTriggerDown(int);
isPadTriggerLeft(int);
isPadTriggerRight(int);
isPadTriggerLeftUp(int);
isPadTriggerLeftDown(int);
isPadTriggerRightUp(int);
isPadTriggerRightDown(int);
isPadTriggerHome(int);
isPadTriggerStart(int);
isPadTriggerSelect(int);
isPadTriggerPlus(int);
isPadTriggerMinus(int);
isPadTriggerTouch();
isPadTriggerUpLeftStick(int);
isPadTriggerDownLeftStick(int);
isPadTriggerLeftLeftStick(int);
isPadTriggerRightLeftStick(int);
isPadTriggerUpRightStick(int);
isPadTriggerDownRightStick(int);
isPadTriggerLeftRightStick(int);
isPadTriggerRightRightStick(int);
isPadTriggerAnyABXY(int);
isPadTriggerAny(int);
isPadTriggerLeftStick(int);
isPadTriggerRightStick(int);
isPadTriggerPressLeftStick(int);
isPadTriggerPressRightStick(int);
isPadHoldPressLeftStick(int);
isPadHoldPressRightStick(int);
setPadRepeat(int, int, int, int);
isPadRepeatA(int);
isPadRepeatB(int);
isPadRepeatX(int);
isPadRepeatY(int);
isPadRepeatZL(int);
isPadRepeatZR(int);
isPadRepeatL(int);
isPadRepeatR(int);
isPadRepeat1(int);
isPadRepeat2(int);
isPadRepeatUp(int);
isPadRepeatDown(int);
isPadRepeatLeft(int);
isPadRepeatRight(int);
isPadRepeatHome(int);
isPadRepeatStart(int);
isPadRepeatSelect(int);
isPadRepeatPlus(int);
isPadRepeatMinus(int);
isPadRepeatTouch();
isPadRepeatUpLeftStick(int);
isPadRepeatDownLeftStick(int);
isPadRepeatLeftLeftStick(int);
isPadRepeatRightLeftStick(int);
isPadRepeatUpRightStick(int);
isPadRepeatDownRightStick(int);
isPadRepeatLeftRightStick(int);
isPadRepeatRightRightStick(int);
isPadHold(int, int);
isPadHoldA(int);
isPadHoldB(int);
isPadHoldX(int);
isPadHoldY(int);
isPadHoldZL(int);
isPadHoldZR(int);
isPadHoldL(int);
isPadHoldR(int);
isPadHold1(int);
isPadHold2(int);
isPadHoldUp(int);
isPadHoldDown(int);
isPadHoldLeft(int);
isPadHoldRight(int);
isPadHoldLeftUp(int);
isPadHoldLeftDown(int);
isPadHoldRightUp(int);
isPadHoldRightDown(int);
isPadHoldHome(int);
isPadHoldStart(int);
isPadHoldSelect(int);
isPadHoldPlus(int);
isPadHoldMinus(int);
isPadHoldAny(int);
isPadHoldAnyWithoutStick(int);
isPadHoldTouch();
isPadHoldUpLeftStick(int);
isPadHoldDownLeftStick(int);
isPadHoldLeftLeftStick(int);
isPadHoldRightLeftStick(int);
isPadHoldUpRightStick(int);
isPadHoldDownRightStick(int);
isPadHoldLeftRightStick(int);
isPadHoldRightRightStick(int);
isPadHoldLeftStick(int);
isPadHoldRightStick(int);
isPadReleaseA(int);
isPadReleaseB(int);
isPadReleaseX(int);
isPadReleaseY(int);
isPadReleaseZL(int);
isPadReleaseZR(int);
isPadReleaseL(int);
isPadReleaseR(int);
isPadRelease1(int);
isPadRelease2(int);
isPadReleaseUp(int);
isPadReleaseDown(int);
isPadReleaseLeft(int);
isPadReleaseRight(int);
isPadReleaseHome(int);
isPadReleaseStart(int);
isPadReleaseSelect(int);
isPadReleasePlus(int);
isPadReleaseMinus(int);
isPadReleaseTouch();
isPadReleaseUpLeftStick(int);
isPadReleaseDownLeftStick(int);
isPadReleaseLeftLeftStick(int);
isPadReleaseRightLeftStick(int);
isPadReleaseUpRightStick(int);
isPadReleaseDownRightStick(int);
isPadReleaseLeftRightStick(int);
isPadReleaseRightRightStick(int);
getLeftStick(int);
getRightStick(int);
getPadCrossDir(sead::Vector2<float>*, int);
getPadCrossDirSideways(sead::Vector2<float>*, int);
calcTouchScreenPos(sead::Vector2<float>*);
calcTouchLayoutPos(sead::Vector2<float>*);
isTouchPosInRect(sead::Vector2<float> const&, sead::Vector2<float> const&);
isTouchPosInCircle(sead::Vector2<float> const&, float);
isTouchPosInCircleByWorldPos(sead::Vector3<float> const&, al::IUseCamera const*, float, float);
isPadTouchRect(float, float, float, float);
isPadTriggerUiCursorUp(int);
isPadTriggerUiCursorDown(int);
isPadTriggerUiCursorLeft(int);
isPadTriggerUiCursorRight(int);
isPadRepeatUiCursorUp(int);
isPadRepeatUiCursorDown(int);
isPadRepeatUiCursorLeft(int);
isPadRepeatUiCursorRight(int);
isPadHoldUiCursorUp(int);
isPadHoldUiCursorDown(int);
isPadHoldUiCursorLeft(int);
isPadHoldUiCursorRight(int);
isPadReleaseUiCursorUp(int);
isPadReleaseUiCursorDown(int);
isPadReleaseUiCursorLeft(int);
isPadReleaseUiCursorRight(int);
getPadAccelerationDeviceNum(int);
tryGetPadAcceleration(sead::Vector3<float>*, int, int);
isPadConnected(int);
isShakePadAcceleration(float, int, int);
isPadEnableLeftStick(int);
isPadEnableRightStick(int);
isPadExistDeviceSpeaker(int);
getPadIdleFrame(int);
tryGetPortFirstConnected(int const*, int);
isPadConnectedJoyPadDouble();
getPadPoseDeviceNum(int);
tryGetPadPose(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, int, int);
getPadPose(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, int, int);
getPadPoseMtx(sead::Matrix33<float>*, int, int);
getPadPoseRadian(sead::Vector3<float>*, int, int);
getPadAngularVelocity(sead::Vector3<float>*, int, int);
getPadPoseMainJoySingleLeft(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*);
getPadPoseMainJoySingleRight(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*);
resetPadPose(int);
resetPadAutoSleepTimeCount(int);
isPadTypeJoySingle(int);
isPadTypeJoyDual(int);
isPadTypeJoyLeft(int);
isPadTypeJoyRight(int);
isPadTypeHandheld(int);
isPadTypeFullKey(int);
tryGetPadColor(sead::Color4f*, sead::Color4f*, sead::Color4f*, sead::Color4f*, int);
isEitherPadHoldA();
isEitherPadHoldB();
createReplayController(unsigned int);
unregistReplayController(unsigned int);
getReplayController(unsigned int);
setPadDataReader(al::IUsePadDataReader*, unsigned int);
createAndSetPadDataArcReader(char const*, char const*, unsigned int);
startPadReplay(unsigned int);
pausePadReplay(unsigned int);
endPadReplay(unsigned int);
setPadDataWriter(al::IUsePadDataWriter*, unsigned int);
startPadRecording(unsigned int);
endPadRecording(unsigned int);
isPadReplaying(unsigned int);
getPadReplayRemainFrame(unsigned int);
isPadRecording(unsigned int);
invalidatePadReplay(unsigned int);
validatePadReplay(unsigned int);
isValidReplayController(unsigned int);
isReadPadReplayData(unsigned int);
createPadRumbleKeeper(al::LiveActor const*, int);
setPadRumbleKeeper(al::LiveActor const*, al::PadRumbleKeeper const*);
trySetPadRumbleKeeper(al::LiveActor const*, al::PadRumbleKeeper const*);
isExistPadRumbleKeeper(al::LiveActor const*);
startPadRumbleWeak(al::LiveActor const*, int);
startPadRumbleNormal(al::LiveActor const*, int);
startPadRumbleStrong(al::LiveActor const*, int);
startPadRumbleContinueWeak(al::LiveActor const*, int);
startPadRumbleContinueNormal(al::LiveActor const*, int);
startPadRumbleContinueStrong(al::LiveActor const*, int);
validatePadRumbleAll(al::LiveActor const*);
invalidatePadRumbleAll(al::LiveActor const*);
isEnablePadWaveRumble(al::PadRumbleDirector const*);
isEnablePadWaveRumble(al::LiveActor const*);
getPrincipalID(al::IUseDataStore const*);
isAvailableDataStore(al::IUseDataStore const*);
startDataStoreSearchPublic(al::IUseDataStore const*, unsigned short, unsigned int, unsigned int);
startDataStoreSearchOwn(al::IUseDataStore const*, unsigned short, unsigned int, unsigned int);
startDataStoreSearchOwnList(al::IUseDataStore const*, nn::nex::qVector<unsigned short> const&, unsigned int, unsigned int);
tryEndDataStoreSearch(bool*, nn::nex::DataStoreSearchResult*, al::IUseDataStore const*);
startDataStoreUploadPrivate(al::IUseDataStore const*, unsigned short, void const*, unsigned int);
startDataStoreUploadPublicReadOnly(al::IUseDataStore const*, unsigned short, void const*, unsigned int);
startDataStoreUploadMetaBinaryPublic(al::IUseDataStore const*, unsigned short, void const*, unsigned int, unsigned short, nn::nex::qMap<signed char, nn::nex::DataStoreRatingInitParam> const*);
startDataStoreUploadEmptyPublic(al::IUseDataStore const*, unsigned short, nn::nex::qMap<signed char, nn::nex::DataStoreRatingInitParam> const*);
tryEndDataStoreUpload(bool*, unsigned long*, al::IUseDataStore const*);
startDataStoreUpdate(al::IUseDataStore const*, void const*, unsigned int, unsigned long);
startDataStoreUpdateMetaBinary(al::IUseDataStore const*, void const*, unsigned int, unsigned long);
startDataStoreUpdateMetaBinaryArray(al::IUseDataStore const*, nn::nex::qVector<nn::nex::DataStoreChangeMetaParam> const&);
tryEndDataStoreUpdate(bool*, al::IUseDataStore const*);
startDataStoreDownload(al::IUseDataStore const*, void*, unsigned int, unsigned long);
startDataStoreDownloadPersistence(al::IUseDataStore const*, void*, unsigned int, unsigned short);
startDataStoreDownloadMeta(al::IUseDataStore const*, nn::nex::DataStoreMetaInfo*, unsigned long);
startDataStoreDownloadMetaArray(al::IUseDataStore const*, nn::nex::qVector<nn::nex::DataStoreMetaInfo>*, nn::nex::qVector<nn::nex::DataStoreGetMetaParam> const&);
tryEndDataStoreDownload(bool*, al::IUseDataStore const*);
startDataStoreDelete(al::IUseDataStore const*, unsigned long);
startDataStoreDeleteArray(al::IUseDataStore const*, unsigned long const*, int);
tryEndDataStoreDelete(bool*, al::IUseDataStore const*);
startDataStoreDownloadRating(al::IUseDataStore const*, nn::nex::DataStoreRatingInfo*, signed char, unsigned long);
startDataStoreDownloadRatingArray(al::IUseDataStore const*, nn::nex::qVector<unsigned long> const&, nn::nex::qVector<nn::nex::qMap<signed char, nn::nex::DataStoreRatingInfo> >*);
tryEndDataStoreDownloadRating(bool*, al::IUseDataStore const*);
startDataStoreUpdateRating(al::IUseDataStore const*, signed char, unsigned long);
startDataStoreUpdateRatingArray(al::IUseDataStore const*, nn::nex::qVector<nn::nex::DataStoreRatingTarget> const&);
startDataStoreUpdateRatingArray(al::IUseDataStore const*, nn::nex::qVector<nn::nex::DataStoreRatingTarget> const&, nn::nex::qVector<nn::nex::DataStoreRateObjectParam> const&, bool);
tryEndDataStoreUpdateRating(bool*, al::IUseDataStore const*);
startDataStoreDownloadPersistenceInfo(al::IUseDataStore const*, nn::nex::DataStorePersistenceInfo*, unsigned short);
tryEndDownloadPersistenceInfo(bool*, al::IUseDataStore const*);
startDataStorePerpetuateObject(al::IUseDataStore const*, unsigned short, unsigned long);
tryEndDataStorePerpetuateObject(bool*, al::IUseDataStore const*);
startSearchBalloon(al::IUseDataStore const*, nn::nex::DataStoreSearchBalloonParam const&, nn::nex::qVector<nn::nex::DataStoreSearchBalloonResultSet>*);
tryEndSearchBalloon(bool*, al::IUseDataStore const*);
startFetchMyInfos(al::IUseDataStore const*, nn::nex::DataStoreFetchMyInfosParam const&, nn::nex::DataStoreFetchMyInfosResult*);
tryEndFetchMyInfos(bool*, al::IUseDataStore const*);
tryCancelDataStoreProcess(al::IUseDataStore const*);
calcDataStoreLastNetworkErrorCode(al::IUseDataStore const*);
isDataStoreLastNetworkErrorCodeNotFound(al::IUseDataStore const*);
isDataStoreLastNetworkErrorCodeShouldHandling(al::IUseDataStore const*);
tryGetComputerName(sead::BufferedSafeStringBase<char>*);
getComputerName(sead::BufferedSafeStringBase<char>*);
getUserName(sead::BufferedSafeStringBase<char>*);
makeUniqueTemporaryFilename(sead::BufferedSafeStringBase<char>*, char const*);
expandEnvironmentString(sead::BufferedSafeStringBase<char>*, sead::SafeStringBase<char> const&);
makeTmpExpandEnvironmentString(sead::SafeStringBase<char> const&);
makeTmpFileFullPath(char const*);
getALCommon();
registDemoRequesterToAddDemoInfo(al::LiveActor const*, al::ActorInitInfo const&, int);
registActorToDemoInfo(al::LiveActor*, al::ActorInitInfo const&);
addDemoActorFromAddDemoInfo(al::LiveActor const*, al::AddDemoInfo const*);
addDemoActorFromDemoActorHolder(al::LiveActor const*, al::DemoActorHolder const*);
addDemoActorFromDemoActorHolder(al::Scene const*, al::DemoActorHolder const*);
setDemoInfoDemoName(al::LiveActor const*, char const*);
killForceBeforeDemo(al::LiveActor*);
prepareSkip(al::LiveActor*, int);
invalidateLODWithSubActor(al::LiveActor*);
calcFovByProjection(sead::Vector2<float>*, sead::Matrix44<float> const&);
setDepthFuncNearDraw(sead::GraphicsContext*);
setDepthFuncFarDraw(sead::GraphicsContext*);
setDepthFuncNearDraw(sead::GraphicsContextMRT*);
setDepthFuncFarDraw(sead::GraphicsContextMRT*);
isUsingReverseProjection();
isDepthFuncReverse();
getDepthClearValue();
calcViewVolume(nn::g3d::ViewVolume*, sead::Matrix34<float> const&, sead::Matrix44<float> const&);
calcAndExpandViewVolume(nn::g3d::ViewVolume*, sead::Matrix34<float> const&, sead::Matrix44<float> const&, sead::Vector3<float> const&, float);
isUseBlend(nn::g3d::MaterialObj const*);
isUseXluZPrepass(nn::g3d::MaterialObj const*);
getBlendMode(nn::g3d::MaterialObj const*);
getBlendFunc(nn::g3d::MaterialObj const*, bool, bool);
getBlendEquation(nn::g3d::MaterialObj const*, bool);
getConstantColor(sead::Color4f*, nn::g3d::MaterialObj const*);
getDepthTestEnable(nn::g3d::MaterialObj const*);
getDepthWriteEnable(nn::g3d::MaterialObj const*);
getDepthCtrlFunc(nn::g3d::MaterialObj const*);
getAlphaTestEnable(nn::g3d::MaterialObj const*);
getAlphaTestValue(nn::g3d::MaterialObj const*);
getAlphaTestFunc(nn::g3d::MaterialObj const*);
getCullingMode(nn::g3d::MaterialObj const*);
setPolygonOffsetToContext(agl::DrawContext*, sead::GraphicsContext*, nn::g3d::MaterialObj const*, float);
setPolygonCtrlToContext(sead::GraphicsContext*, nn::g3d::MaterialObj const*);
setDepthCtrlToContext(sead::GraphicsContext*, nn::g3d::MaterialObj const*);
setBlendCtrlToContext(sead::GraphicsContext*, nn::g3d::MaterialObj const*);
setAlphaTestToContext(sead::GraphicsContext*, nn::g3d::MaterialObj const*);
setPolygonOffsetToContext(agl::DrawContext*, sead::GraphicsContextMRT*, nn::g3d::MaterialObj const*, float);
setPolygonCtrlToContext(sead::GraphicsContextMRT*, nn::g3d::MaterialObj const*);
setDepthCtrlToContext(sead::GraphicsContextMRT*, nn::g3d::MaterialObj const*);
setBlendCtrlToContext(sead::GraphicsContextMRT*, nn::g3d::MaterialObj const*);
setAlphaTestToContext(sead::GraphicsContextMRT*, nn::g3d::MaterialObj const*);
copyRenderBuffer(agl::DrawContext*, agl::RenderBuffer const&, agl::RenderBuffer const&);
setContextMRT(sead::GraphicsContextMRT*);
setContextMRTBlendBcLbuf(sead::GraphicsContextMRT*, bool);
setContextMRTAddBcLbuf(sead::GraphicsContextMRT*, bool);
setContextMRTBlendBcNrmLbuf(sead::GraphicsContextMRT*, bool);
setContextMRTBlendAll(sead::GraphicsContextMRT*, bool);
setContextMRTBlendLbuf(sead::GraphicsContextMRT*, bool);
setContextMRTAddLbuf(sead::GraphicsContextMRT*, bool);
setContextMRTMulAddLbuf(sead::GraphicsContextMRT*, bool);
setContextMRTMulLbuf(sead::GraphicsContextMRT*, bool);
setContextMRTMulBc(sead::GraphicsContextMRT*, bool);
setContextMRTFootPrint(sead::GraphicsContextMRT*);
setContextMRTAlphaMask(sead::GraphicsContextMRT*);
setContextMRTMiiFaceXlu(sead::GraphicsContextMRT*);
setContextMRTOnlyDepth(sead::GraphicsContextMRT*);
setContextMRTSilhouette(sead::GraphicsContextMRT*);
emitEffectCurrentPos(al::IUseEffectKeeper*, char const*);
emitEffect(al::IUseEffectKeeper*, char const*, sead::Vector3<float> const*);
tryEmitEffect(al::IUseEffectKeeper*, char const*, sead::Vector3<float> const*);
deleteEffect(al::IUseEffectKeeper*, char const*);
tryDeleteEffect(al::IUseEffectKeeper*, char const*);
deleteEffectAll(al::IUseEffectKeeper*);
tryKillEmitterAndParticleAll(al::IUseEffectKeeper*);
onCalcAndDrawEffect(al::IUseEffectKeeper*);
offCalcAndDrawEffect(al::IUseEffectKeeper*);
forceSetStopCalcAndDraw(al::IUseEffectKeeper*, bool);
isEffectEmitting(al::IUseEffectKeeper const*, char const*);
setEffectEmitRatio(al::IUseEffectKeeper*, char const*, float);
setEffectAllScale(al::IUseEffectKeeper*, char const*, sead::Vector3<float> const&);
setEffectEmitterVolumeScale(al::IUseEffectKeeper*, char const*, sead::Vector3<float> const&);
setEffectParticleScale(al::IUseEffectKeeper*, char const*, float);
setEffectParticleScale(al::IUseEffectKeeper*, char const*, sead::Vector3<float> const&);
setEffectParticleAlpha(al::IUseEffectKeeper*, char const*, float);
setEffectParticleColor(al::IUseEffectKeeper*, char const*, sead::Color4f const&);
setParticleLifeScale(al::IUseEffectKeeper*, char const*, float);
setEffectParticleDirectionalVel(al::IUseEffectKeeper*, char const*, float);
setEffectFollowPosPtr(al::IUseEffectKeeper*, char const*, sead::Vector3<float> const*);
setEffectFollowMtxPtr(al::IUseEffectKeeper*, char const*, sead::Matrix34<float> const*);
setEffectNamedMtxPtr(al::IUseEffectKeeper*, char const*, sead::Matrix34<float> const*);
trySetEffectNamedMtxPtr(al::IUseEffectKeeper*, char const*, sead::Matrix34<float> const*);
tryUpdateEffectMaterialCode(al::IUseEffectKeeper*, char const*);
resetEffectMaterialCode(al::IUseEffectKeeper*);
updateEffectMaterialWater(al::IUseEffectKeeper*, bool);
updateEffectMaterialWet(al::IUseEffectKeeper*, bool);
updateEffectMaterialPuddle(al::IUseEffectKeeper*, bool);
isInvalidUiCollisionCheck(al::IUseEventFlowData const*);
isExistLookAtJointCtrl(al::IUseEventFlowData const*);
initRailMoveType(al::LiveActor const*, al::ActorInitInfo const&);
isRailMoveLoop(int);
isRailMoveTurn(int);
isRailMoveRestart(int);
initEventReceiver(al::EventFlowExecutor*, al::IEventFlowEventReceiver*);
initEventFlowNode(al::EventFlowNode*, al::EventFlowNodeInitInfo const&);
initEventQuery(al::EventFlowNode*, al::EventFlowNodeInitInfo const&);
registerEventCamera(al::EventFlowNode*, char const*);
initEventNodeMessage(char16_t const**, al::EventFlowNode const*, al::EventFlowNodeInitInfo const&, char const*);
getParamIterKeyString(al::EventFlowNodeInitInfo const&, char const*);
getObjId(al::EventFlowNodeInitInfo const&);
getPlacementStageName(al::EventFlowNodeInitInfo const&);
getActorInitInfo(al::EventFlowNodeInitInfo const&);
makeParamMessageString(char16_t const**, al::EventFlowNodeInitInfo const&, char const*);
initEventFlowMovement(al::EventFlowMovement*, al::EventFlowNodeInitInfo const&);
getLayoutInitInfo(al::EventFlowNodeInitInfo const&);
tryGetParamIter(al::ByamlIter*, al::EventFlowNodeInitInfo const&);
tryGetParamIterKeyInt(int*, al::EventFlowNodeInitInfo const&, char const*);
tryGetParamIterKeyFloat(float*, al::EventFlowNodeInitInfo const&, char const*);
tryGetParamIterKeyBool(bool*, al::EventFlowNodeInitInfo const&, char const*);
tryGetParamIterKeyString(al::EventFlowNodeInitInfo const&, char const*);
getParamIterKeyBool(al::EventFlowNodeInitInfo const&, char const*);
getParamIterKeyInt(al::EventFlowNodeInitInfo const&, char const*);
getNodeIterKeyString(al::EventFlowNodeInitInfo const&, char const*);
getMessageString(al::IUseMessageSystem const*, al::ByamlIter const&);
getParamMessageLabel(al::EventFlowNodeInitInfo const&, char const*);
restartEventMovement(al::EventFlowNode*);
stopEventMovement(al::EventFlowNode*);
recordActorFront(al::EventFlowNode*);
getRecordActorFront(al::EventFlowNode const*);
sendEvent(al::EventFlowNode const*, al::EventFlowEventData const*);
judgeQuery(al::EventFlowNode const*, char const*);
invalidateClipping(al::EventFlowNode*);
validateClipping(al::EventFlowNode*);
getCaseEventNum(al::EventFlowNode const*);
getCaseEventNextId(al::EventFlowNode const*, int);
findCaseEventNextId(al::EventFlowNode const*, char const*);
getCaseEventMessage(al::EventFlowNode const*, int);
isTurnMovement(al::EventFlowNode const*);
isNodeName(al::EventFlowNode const*, char const*);
getScareMessage(al::EventFlowNode const*);
startEventCamera(al::EventFlowNode*, char const*, int);
startEventAnimCamera(al::EventFlowNode*, char const*, char const*, int);
endEventCamera(al::EventFlowNode*, char const*, int, bool);
tryEndEventCameraIfPlaying(al::EventFlowNode*, char const*, int, bool);
isEndInterpoleEventCamera(al::EventFlowNode const*, char const*);
isPlayingEventAnimCamera(al::EventFlowNode const*, char const*);
requestDemoAction(al::EventFlowNode*, char const*, bool);
requestPlayerDemoAction(al::EventFlowNode*, char const*);
isEndDemoAction(al::EventFlowNode const*);
setDemoTalkAction(al::EventFlowNode*, char const*);
resetDemoTalkAction(al::EventFlowNode*);
requestDemoCamera(al::EventFlowNode*, char const*);
isEndRequestDemoCamera(al::EventFlowNode const*);
isHideDemoPlayer(al::EventFlowNode const*);
requestHideDemoPlayer(al::EventFlowNode*);
requestShowDemoPlayer(al::EventFlowNode*);
calcPlayerWatchTrans(sead::Vector3<float>*, al::EventFlowNode const*);
requestCommandCloseTalkMessageLayout(al::EventFlowNode*);
isActive(al::EventFlowExecutor const*);
isScare(al::IUseEventFlowData const*);
tryGetScareEnemyPos(sead::Vector3<float>*, al::IUseEventFlowData const*);
invalidateUiCollisionCheck(al::EventFlowExecutor*);
onExistLookAtJointCtrl(al::EventFlowExecutor*);
setTalkSubActorName(al::EventFlowExecutor*, char const*);
resetTalkSubActorName(al::EventFlowExecutor*);
startEventAction(al::LiveActor*, al::IUseEventFlowData const*, char const*);
makeEventActionName(sead::BufferedSafeStringBase<char>*, al::IUseEventFlowData const*, char const*);
startEventActionAtRandomFrame(al::LiveActor*, al::IUseEventFlowData const*, char const*);
tryStartEventActionIfNotPlaying(al::LiveActor*, al::IUseEventFlowData const*, char const*);
isPlayingEventAction(al::LiveActor const*, al::IUseEventFlowData const*, char const*);
isExistEventAction(al::LiveActor const*, al::IUseEventFlowData const*, char const*);
isOneTimeEventAction(al::LiveActor const*, al::IUseEventFlowData const*, char const*);
getEventActionFrameMax(al::LiveActor const*, al::IUseEventFlowData const*, char const*);
getParamMoveSpeed(al::IUseEventFlowData const*);
getParamTurnSpeedDegree(al::IUseEventFlowData const*);
getRecordActorFront(al::IUseEventFlowData const*);
recordActorFront(al::IUseEventFlowData*, sead::Vector3<float> const&);
checkInsideTerritoryPos(al::IUseEventFlowData const*, al::LiveActor const*, sead::Vector3<float> const&, float);
checkInsideEmotionTerritoryPos(al::IUseEventFlowData const*, al::LiveActor const*, sead::Vector3<float> const&);
checkInsideEmotionLowPriorityTerritoryPos(al::IUseEventFlowData const*, al::LiveActor const*, sead::Vector3<float> const&);
checkInsideTalkTerritoryPos(al::IUseEventFlowData const*, al::LiveActor const*, sead::Vector3<float> const&);
calcBalloonOffset(sead::Vector3<float>*, al::IUseEventFlowData const*, al::LiveActor const*);
setBalloonLocalOffset(al::EventFlowExecutor*, sead::Vector3<float> const&);
getBalloonCollisionCheckOffsetRadius(al::IUseEventFlowData const*);
isDisableOpenBalloonByOrderGroup(al::LiveActor const*, al::IUseEventFlowData const*);
isEnableForceOpenBalloonByOrderGroup(al::LiveActor const*, al::IUseEventFlowData const*);
isWaitAtPointMovement(al::EventFlowExecutor const*);
isStopMovement(al::IUseEventFlowData const*);
isRequestEventDemoAction(al::EventFlowExecutor const*);
isPlayingEventDemoAction(al::EventFlowExecutor const*);
getEventDemoActionName(al::EventFlowExecutor const*);
isExistEventDemoTalkAction(al::EventFlowExecutor const*);
getEventDemoTalkActionName(al::EventFlowExecutor const*);
isResetEventDemoPlayerDynamics(al::EventFlowExecutor const*);
startEventDemoAction(al::EventFlowExecutor*);
endEventDemoAction(al::EventFlowExecutor*);
isRequestEventDemoCamera(al::EventFlowExecutor const*);
getEventDemoCameraAnimName(al::EventFlowExecutor const*);
clearEventDemoCameraRequest(al::EventFlowExecutor*);
isHideDemoPlayer(al::EventFlowExecutor const*);
isExistEventEntry(al::EventFlowExecutor const*, char const*);
isCurrentEventEntry(al::EventFlowExecutor const*, char const*);
isEventName(al::EventFlowEventData const*, char const*, ...);
getEventName(al::EventFlowEventData const*);
getEventDataParamString(al::EventFlowEventData const*, char const*);
isEventDataParamBool(al::EventFlowEventData const*, char const*);
registerExecutorActorUpdate(al::LiveActor*, al::ExecuteDirector*, char const*);
registerExecutorActorDraw(al::LiveActor*, al::ExecuteDirector*, char const*);
registerExecutorLayoutUpdate(al::LayoutActor*, al::ExecuteDirector*, char const*);
registerExecutorLayoutDraw(al::LayoutActor*, al::ExecuteDirector*, char const*);
registerExecutorUser(al::IUseExecutor*, al::ExecuteDirector*, char const*);
registerExecutorFunctor(char const*, al::ExecuteDirector*, al::FunctorBase const&);
registerExecutorFunctorDraw(char const*, al::ExecuteDirector*, al::FunctorBase const&);
isExistFile(sead::SafeStringBase<char> const&);
isExistDirectory(sead::SafeStringBase<char> const&);
isExistArchive(sead::SafeStringBase<char> const&);
isExistArchive(sead::SafeStringBase<char> const&, char const*);
getFileSize(sead::SafeStringBase<char> const&);
calcFileAlignment(sead::SafeStringBase<char> const&);
calcBufferSizeAlignment(sead::SafeStringBase<char> const&);
loadFile(sead::SafeStringBase<char> const&, int);
tryLoadFileToBuffer(sead::SafeStringBase<char> const&, unsigned char*, unsigned int, int);
loadArchive(sead::SafeStringBase<char> const&);
loadArchiveWithExt(sead::SafeStringBase<char> const&, char const*);
tryRequestLoadArchive(sead::SafeStringBase<char> const&, sead::Heap*);
loadSoundItem(unsigned int, unsigned int, al::IAudioResourceLoader*);
tryRequestLoadSoundItem(unsigned int);
tryRequestPreLoadFile(al::Resource const*, int, sead::Heap*, al::IAudioResourceLoader*);
tryRequestPreLoadFile(al::Resource const*, sead::SafeStringBase<char> const&, sead::Heap*, al::IAudioResourceLoader*);
waitLoadDoneAllFile();
clearFileLoaderEntry();
makeLocalizedArchivePath(sead::BufferedSafeStringBase<char>*, sead::SafeStringBase<char> const&);
makeLocalizedArchivePathByCountryCode(sead::BufferedSafeStringBase<char>*, sead::SafeStringBase<char> const&);
setFileLoaderThreadPriority(int);
isExistItemKeeper(al::LiveActor const*);
addItem(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*, int, bool);
addItem(al::LiveActor*, al::ActorInitInfo const&, char const*, bool);
setAppearItemFactor(al::LiveActor const*, char const*, al::HitSensor const*);
setAppearItemOffset(al::LiveActor const*, sead::Vector3<float> const&);
setAppearItemAttackerSensor(al::LiveActor const*, al::HitSensor const*);
appearItem(al::LiveActor const*);
appearItem(al::LiveActor const*, sead::Vector3<float> const&, sead::Quat<float> const&, al::HitSensor const*);
appearItem(al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, al::HitSensor const*);
appearItemTiming(al::LiveActor const*, char const*);
appearItemTiming(al::LiveActor const*, char const*, sead::Vector3<float> const&, sead::Quat<float> const&, al::HitSensor const*);
appearItemTiming(al::LiveActor const*, char const*, sead::Vector3<float> const&, sead::Vector3<float> const&, al::HitSensor const*);
acquireItem(al::LiveActor const*, al::HitSensor*, char const*);
getItemType(al::LiveActor const*, char const*);
initJointControllerKeeper(al::LiveActor const*, int);
isExistJointControllerKeeper(al::LiveActor const*);
registerJointController(al::LiveActor const*, al::JointControllerBase*);
registerJointController(al::LiveActor const*, al::JointControllerBase*, char const*);
initJointLocalRotator(al::LiveActor const*, sead::Vector3<float>*, char const*);
initJointLocalXRotator(al::LiveActor const*, float const*, char const*);
initJointLocalYRotator(al::LiveActor const*, float const*, char const*);
initJointLocalZRotator(al::LiveActor const*, float const*, char const*);
initJointLocalAxisRotator(al::LiveActor const*, sead::Vector3<float> const&, float const*, char const*, bool);
initJointLocalMinusXRotator(al::LiveActor const*, float const*, char const*);
initJointLocalMinusYRotator(al::LiveActor const*, float const*, char const*);
initJointLocalMinusZRotator(al::LiveActor const*, float const*, char const*);
initJointGlobalXRotator(al::LiveActor const*, float*, char const*);
initJointGlobalAxisRotator(al::LiveActor const*, sead::Vector3<float> const&, float*, char const*);
initJointGlobalYRotator(al::LiveActor const*, float*, char const*);
initJointGlobalZRotator(al::LiveActor const*, float*, char const*);
initJointGlobalMinusXRotator(al::LiveActor const*, float*, char const*);
initJointGlobalMinusYRotator(al::LiveActor const*, float*, char const*);
initJointGlobalMinusZRotator(al::LiveActor const*, float*, char const*);
initJointLocalTransControllerX(al::LiveActor const*, float const*, char const*);
initJointLocalTransControllerY(al::LiveActor const*, float const*, char const*);
initJointLocalTransControllerZ(al::LiveActor const*, float const*, char const*);
initJointLocalTransController(al::LiveActor const*, sead::Vector3<float> const*, char const*);
initJointLocalScaleControllerX(al::LiveActor const*, float const*, char const*);
initJointLocalScaleControllerY(al::LiveActor const*, float const*, char const*);
initJointLocalScaleControllerZ(al::LiveActor const*, float const*, char const*);
initJointLocalScaleController(al::LiveActor const*, sead::Vector3<float> const*, char const*);
initJointLocalMtxController(al::LiveActor const*, sead::Matrix34<float> const*, char const*);
initJointGlobalMtxController(al::LiveActor const*, sead::Matrix34<float> const*, char const*);
initJointGlobalQuatController(al::LiveActor const*, sead::Quat<float> const*, char const*);
initJointGlobalQuatTransController(al::LiveActor const*, sead::Quat<float> const*, sead::Vector3<float> const*, char const*);
initJointPostQuatController(al::LiveActor const*, sead::Quat<float> const*, char const*);
initJointLocalDirController(al::LiveActor const*, al::JointDirectionInfo const*, char const*);
initJointAimController(al::LiveActor const*, al::JointAimInfo const*, char const*);
initJointTranslateShaker(al::LiveActor const*, int);
appendJointTranslateShakerX(al::JointTranslateShaker*, char const*);
appendJointTranslateShakerY(al::JointTranslateShaker*, char const*);
appendJointTranslateShakerZ(al::JointTranslateShaker*, char const*);
initJointMasher(al::LiveActor const*, bool const*, int);
appendMashJoint(al::JointMasher*, char const*, float);
initJointRumbler(al::LiveActor const*, char const*, float, float, unsigned int, int);
initJointLocalQuatRotator(al::LiveActor const*, char const*, sead::Quat<float> const*);
initJointLookAtController(al::LiveActor const*, int);
appendJointLookAtController(al::JointLookAtController*, al::LiveActor const*, char const*, float, sead::Vector2<float> const&, sead::Vector2<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
appendJointLookAtControllerNoJudge(al::JointLookAtController*, al::LiveActor const*, char const*, float, sead::Vector2<float> const&, sead::Vector2<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
appendJointLookAtControllerNoJudgeNoOverLimitYaw(al::JointLookAtController*, al::LiveActor const*, char const*, float, sead::Vector2<float> const&, sead::Vector2<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
initJointGroundSmoothController(al::LiveActor const*, char const*);
initJointPosToPosController(al::LiveActor const*, char const*, sead::Vector3<float> const*, sead::Vector3<float> const*, float*, sead::Vector3<float> const&);
initJointSpringController(al::LiveActor const*, char const*);
initJointConstrainedSpringController(al::LiveActor const*, char const*);
initJointSpringTransController(al::LiveActor const*, char const*);
initJointSimpleIK(al::LiveActor const*, char const*);
createKeyPoseKeeper(al::ActorInitInfo const&);
createKeyPoseKeeper(al::PlacementInfo const&);
resetKeyPose(al::KeyPoseKeeper*);
nextKeyPose(al::KeyPoseKeeper*);
restartKeyPose(al::KeyPoseKeeper*, sead::Vector3<float>*, sead::Quat<float>*);
reverseKeyPose(al::KeyPoseKeeper*);
getCurrentKeyTrans(al::KeyPoseKeeper const*);
getNextKeyTrans(al::KeyPoseKeeper const*);
getCurrentKeyQuat(al::KeyPoseKeeper const*);
getNextKeyQuat(al::KeyPoseKeeper const*);
getCurrentKeyPlacementInfo(al::KeyPoseKeeper const*);
getNextKeyPlacementInfo(al::KeyPoseKeeper const*);
getKeyPoseCount(al::KeyPoseKeeper const*);
getKeyPoseTrans(sead::Vector3<float>*, al::KeyPoseKeeper const*, int);
getKeyPoseQuat(sead::Quat<float>*, al::KeyPoseKeeper const*, int);
calcLerpKeyTrans(sead::Vector3<float>*, al::KeyPoseKeeper const*, float);
calcSlerpKeyQuat(sead::Quat<float>*, al::KeyPoseKeeper const*, float);
isMoveSignKey(al::KeyPoseKeeper const*);
isLastKey(al::KeyPoseKeeper const*);
isFirstKey(al::KeyPoseKeeper const*);
isGoingToEnd(al::KeyPoseKeeper const*);
isStop(al::KeyPoseKeeper const*);
isRestart(al::KeyPoseKeeper const*);
calcDistanceNextKeyTrans(al::KeyPoseKeeper const*);
calcTimeToNextKeyMove(al::KeyPoseKeeper const*, float);
calcDirToNextKey(sead::Vector3<float>*, al::KeyPoseKeeper const*);
calcKeyMoveSpeed(al::KeyPoseKeeper const*);
calcKeyMoveSpeedByTime(al::KeyPoseKeeper const*);
calcKeyMoveWaitTime(al::KeyPoseKeeper const*);
calcKeyMoveMoveTime(al::KeyPoseKeeper const*);
calcKeyMoveClippingInfo(sead::Vector3<float>*, float*, al::KeyPoseKeeper const*, float);
setKeyMoveClippingInfo(al::LiveActor*, sead::Vector3<float>*, al::KeyPoseKeeper const*);
startAction(al::IUseLayoutAction*, char const*, char const*);
startActionAtRandomFrame(al::IUseLayoutAction*, char const*, char const*);
startFreezeAction(al::IUseLayoutAction*, char const*, float, char const*);
startFreezeActionEnd(al::IUseLayoutAction*, char const*, char const*);
getActionFrameMax(al::IUseLayoutAction const*, char const*, char const*);
startFreezeGaugeAction(al::IUseLayoutAction*, float, float, float, char const*, char const*);
tryStartAction(al::IUseLayoutAction*, char const*, char const*);
isExistAction(al::IUseLayoutAction const*, char const*, char const*);
isActionEnd(al::IUseLayoutAction const*, char const*);
isExistAction(al::IUseLayoutAction const*, char const*);
isActionOneTime(al::IUseLayoutAction const*, char const*, char const*);
getActionFrame(al::IUseLayoutAction const*, char const*);
setActionFrame(al::IUseLayoutAction*, float, char const*);
getActionFrameRate(al::IUseLayoutAction const*, char const*);
setActionFrameRate(al::IUseLayoutAction*, float, char const*);
getActionName(al::IUseLayoutAction const*, char const*);
isActionPlaying(al::IUseLayoutAction const*, char const*, char const*);
isAnyActionPlaying(al::IUseLayoutAction const*, char const*);
setNerveAtActionEnd(al::LayoutActor*, al::Nerve const*);
startTextPaneAnim(al::LayoutActor*, char16_t const*, al::MessageTagDataHolder const*, al::ReplaceTagProcessorBase const*);
startTextPaneAnimWithAudioUser(al::LayoutActor*, char16_t const*, al::MessageTagDataHolder const*, al::ReplaceTagProcessorBase const*, al::IUseAudioKeeper const*);
startAndSetTextPaneAnimStage(al::LayoutActor*, char const*, char const*, al::MessageTagDataHolder const*, al::ReplaceTagProcessorBase const*);
startAndSetTextPaneAnimSystem(al::LayoutActor*, char const*, char const*, al::MessageTagDataHolder const*, al::ReplaceTagProcessorBase const*);
endTextPaneAnim(al::LayoutActor*);
skipTextPaneAnim(al::LayoutActor*);
flushTextPaneAnim(al::LayoutActor*);
changeNextPage(al::LayoutActor*, al::MessageTagDataHolder const*, al::ReplaceTagProcessorBase const*);
tryChangeNextPage(al::LayoutActor*, al::MessageTagDataHolder const*, al::ReplaceTagProcessorBase const*);
isExistNextPage(al::LayoutActor const*);
isEndTextPaneAnim(al::LayoutActor const*, bool);
getCurrentMessagePaneAnim(al::LayoutActor const*);
calcCurrentMessageTextNum(al::LayoutActor const*);
calcShowTextTime(int);
tryStartTextAnim(al::LayoutActor*, char16_t const*);
tryStartTextTagVoice(al::LayoutActor*, char16_t const*, al::IUseAudioKeeper const*, char const*, sead::FixedSafeString<64>*);
startHitReaction(al::LayoutActor const*, char const*, char const*);
killLayoutIfActive(al::LayoutActor*);
appearLayoutIfDead(al::LayoutActor*);
isActive(al::LayoutActor const*);
isDead(al::LayoutActor const*);
calcTrans(sead::Vector3<float>*, al::IUseLayout const*);
getLocalTrans(al::IUseLayout const*);
getLocalTransPtr(al::IUseLayout const*);
calcScale(sead::Vector3<float>*, al::IUseLayout const*);
getLocalScale(al::IUseLayout const*);
setLocalTrans(al::IUseLayout*, sead::Vector3<float> const&);
setLocalTrans(al::IUseLayout*, sead::Vector2<float> const&);
setLocalScale(al::IUseLayout*, float);
setLocalScale(al::IUseLayout*, sead::Vector2<float> const&);
setLocalAlpha(al::IUseLayout*, float);
calcPaneTrans(sead::Vector3<float>*, al::IUseLayout const*, char const*);
calcPaneMtx(sead::Matrix34<float>*, al::IUseLayout const*, char const*);
calcPaneTrans(sead::Vector2<float>*, al::IUseLayout const*, char const*);
calcPaneScale(sead::Vector3<float>*, al::IUseLayout const*, char const*);
calcPaneSize(sead::Vector3<float>*, al::IUseLayout const*, char const*);
getPaneMtx(al::IUseLayout const*, char const*);
getPaneMtxRaw(al::IUseLayout const*, char const*);
getGlobalAlpha(al::IUseLayout const*, char const*);
setPaneLocalTrans(al::IUseLayout*, char const*, sead::Vector2<float> const&);
setPaneLocalTrans(al::IUseLayout*, char const*, sead::Vector3<float> const&);
setPaneLocalRotate(al::IUseLayout*, char const*, sead::Vector3<float> const&);
setPaneLocalScale(al::IUseLayout*, char const*, sead::Vector2<float> const&);
setPaneLocalSize(al::IUseLayout*, char const*, sead::Vector2<float> const&);
setPaneLocalAlpha(al::IUseLayout*, char const*, float);
getPaneLocalTrans(al::IUseLayout const*, char const*);
getPaneLocalSize(sead::Vector2<float>*, al::IUseLayout const*, char const*);
getPaneLocalRotate(al::IUseLayout const*, char const*);
getPaneLocalScale(al::IUseLayout const*, char const*);
getTextBoxDrawRectSize(al::IUseLayout const*, char const*);
showPane(al::IUseLayout*, char const*);
hidePane(al::IUseLayout*, char const*);
showPaneNoRecursive(al::IUseLayout*, char const*);
hidePaneNoRecursive(al::IUseLayout*, char const*);
isHidePane(al::IUseLayout const*, char const*);
showPaneRoot(al::IUseLayout*);
hidePaneRoot(al::IUseLayout*);
showPaneRootNoRecursive(al::IUseLayout*);
hidePaneRootNoRecursive(al::IUseLayout*);
isHidePaneRoot(al::IUseLayout const*);
isExistPane(al::IUseLayout const*, char const*);
isContainPointPane(al::IUseLayout const*, char const*, sead::Vector2<float> const&);
findHitPaneFromLayoutPos(al::IUseLayout const*, sead::Vector2<float> const&);
isExistHitPaneFromLayoutPos(al::IUseLayout const*, sead::Vector2<float> const&);
findHitPaneFromScreenPos(al::IUseLayout const*, sead::Vector2<float> const&);
isExistHitPaneFromScreenPos(al::IUseLayout const*, sead::Vector2<float> const&);
isTouchPosInPane(al::IUseLayout const*, char const*);
setCursorPanePos(al::IUseLayout*, al::IUseLayout const*);
setPaneVtxColor(al::IUseLayout const*, char const*, sead::Color4u8 const&);
isTriggerTouchPane(al::IUseLayout const*, char const*);
isHoldTouchPane(al::IUseLayout const*, char const*);
isReleaseTouchPane(al::IUseLayout const*, char const*);
getPaneChildNum(al::IUseLayout const*, char const*);
getPaneChildName(al::IUseLayout const*, char const*, int);
setPaneStringLength(al::IUseLayout*, char const*, char16_t const*, unsigned short, unsigned short);
setPaneString(al::IUseLayout*, char const*, char16_t const*, unsigned short);
setPaneCounterDigit1(al::IUseLayout*, char const*, int, unsigned short);
setPaneCounterDigit2(al::IUseLayout*, char const*, int, unsigned short);
setPaneCounterDigit3(al::IUseLayout*, char const*, int, unsigned short);
setPaneCounterDigit4(al::IUseLayout*, char const*, int, unsigned short);
setPaneCounterDigit5(al::IUseLayout*, char const*, int, unsigned short);
setPaneCounterDigit6(al::IUseLayout*, char const*, int, unsigned short);
setPaneNumberDigit1(al::IUseLayout*, char const*, int, unsigned short);
setPaneNumberDigit2(al::IUseLayout*, char const*, int, unsigned short);
setPaneNumberDigit3(al::IUseLayout*, char const*, int, unsigned short);
setPaneNumberDigit4(al::IUseLayout*, char const*, int, unsigned short);
setPaneNumberDigit5(al::IUseLayout*, char const*, int, unsigned short);
setPaneStringFormat(al::IUseLayout*, char const*, char const*, ...);
setTextPositionCenterH(al::IUseLayout*, char const*);
initPaneMessage(al::IUseLayout*, char const*, al::MessageHolder const*, char const*, unsigned int);
setPaneSystemMessage(al::LayoutActor*, char const*, char const*, char const*);
setPaneStageMessage(al::LayoutActor*, char const*, char const*, char const*);
getPaneStringBuffer(al::IUseLayout const*, char const*);
getPaneStringBufferLength(al::IUseLayout const*, char const*);
setTextBoxPaneFont(al::LayoutActor const*, char const*, char const*);
adjustPaneSizeToTextSizeAll(al::LayoutActor const*);
requestCaptureRecursive(al::LayoutActor const*);
setRubyScale(al::LayoutActor const*, float);
createTextureInfo();
createTextureInfo(agl::TextureData const&);
createTextureInfo(al::IUseLayout const*, char const*);
getPaneTextureInfo(nn::ui2d::TextureInfo*, al::IUseLayout const*, char const*);
createTextureInfo(char const*, char const*, char const*);
updateTextureInfo(nn::ui2d::TextureInfo*, agl::TextureData const&);
setPaneTexture(al::IUseLayout*, char const*, nn::ui2d::TextureInfo const*);
registerLayoutPartsActor(al::LayoutActor*, al::LayoutActor*);
updateLayoutPaneRecursive(al::LayoutActor*);
getLayoutPaneGroupNum(al::LayoutActor*);
getLayoutPaneGroup(al::LayoutActor*, int);
initLayoutActor(al::LayoutActor*, al::LayoutInitInfo const&, char const*, char const*);
initLayoutActorLocalized(al::LayoutActor*, al::LayoutInitInfo const&, char const*, char const*);
initLayoutActorUseOtherMessage(al::LayoutActor*, al::LayoutInitInfo const&, char const*, char const*, char const*);
initLayoutTextPaneAnimator(al::LayoutActor*, char const*);
initLayoutTextPaneAnimatorWithShadow(al::LayoutActor*, char const*);
initLayoutPartsActor(al::LayoutActor*, al::LayoutActor*, al::LayoutInitInfo const&, char const*, char const*);
initLayoutPartsActorLocalized(al::LayoutActor*, al::LayoutActor*, al::LayoutInitInfo const&, char const*, char const*);
setTextBoxString(nn::ui2d::TextBox*, char16_t const*, unsigned short);
setTextBoxStringLength(nn::ui2d::TextBox*, char16_t const*, unsigned short, unsigned short);
setTextBoxTagProcessor(nn::ui2d::TextBox*, nn::font::TagProcessorBase<unsigned short>*);
initTextBoxPane(nn::ui2d::TextBox*, al::MessageHolder const*, char const*, unsigned int);
reallocateTextBoxStringBuffer(nn::ui2d::TextBox*, unsigned int);
initTextBoxRecursive(nn::ui2d::Pane*, al::MessageHolder const*, char const*, unsigned int);
initTextBoxRecursiveWithSelfTextId(nn::ui2d::Pane*, unsigned int, al::MessageSystem const*, nn::ui2d::Layout const*, nn::ui2d::Layout const*);
replaceTextBoxMessage(nn::ui2d::TextBox*, al::MessageHolder const*, char const*);
replaceTextBoxMessage(nn::ui2d::TextBox*, char16_t const*, al::ReplaceTagProcessorBase const*, al::IUseMessageSystem const*);
setTextBoxNumberTagArgRecursive(nn::ui2d::Pane*, int, int);
calcPaneRectPos(sead::Vector2<float>*, sead::Vector2<float>*, nn::ui2d::Pane const*);
getPaneName(nn::ui2d::Pane const*);
showPaneRecursive(nn::ui2d::Pane*);
hidePaneRecursive(nn::ui2d::Pane*);
setTextBoxPaneFont(nn::ui2d::Pane*, nn::font::Font const*);
requestCaptureRecursive(nn::ui2d::Pane*);
initLayoutInitInfo(al::LayoutInitInfo*, al::LayoutKit const*, al::SceneObjHolder*, al::AudioDirector const*, al::LayoutSystem const*, al::MessageSystem const*, al::GamePadSystem const*);
setRenderBuffer(al::LayoutKit*, agl::RenderBuffer const*);
executeUpdate(al::LayoutKit*);
executeUpdateList(al::LayoutKit*, char const*, char const*);
executeUpdateEffect(al::LayoutKit*);
executeDraw(al::LayoutKit const*, char const*);
executeDrawEffect(al::LayoutKit const*);
isExistPrePassLightKeeper(al::LiveActor const*);
getPrePassLightNum(al::LiveActor const*);
getPrePassLightName(al::LiveActor const*, int);
isActivePrePassLight(al::LiveActor const*, char const*);
isExistPrePassLight(al::LiveActor const*, char const*);
appearPrePassLight(al::LiveActor const*, char const*, int);
killPrePassLight(al::LiveActor const*, char const*, int);
appearPrePassLightAll(al::LiveActor const*, int);
killPrePassLightAll(al::LiveActor const*, int);
setPrePassLightOffset(al::LiveActor const*, char const*, sead::Vector3<float> const&);
requestPrePassLightColor(al::LiveActor const*, char const*, sead::Color4f const&);
requestPrePassLightColor(al::LiveActor const*, char const*, float);
requestPrePassLightColor(al::LiveActor const*, char const*, char const*, float);
getPrePassUserColor(al::LiveActor const*, char const*);
setEnablePrePassLightSpecular(al::LiveActor const*, char const*, bool);
getPrePassPointLightRadius(al::LiveActor const*, char const*);
setPrePassPointLightRadius(al::LiveActor const*, char const*, float);
setPrePassLineLightInfo(al::LiveActor const*, char const*, sead::Color4f const&, float);
getPrePassSpotLightInfo(al::LiveActor const*, char const*, float*, float*, sead::Vector3<float>*, sead::Vector3<float>*);
setPrePassSpotLightLength(al::LiveActor const*, char const*, float);
getPrePassSpotLightCurrentLength(al::LiveActor const*, char const*);
setPrePassSpotLightDegree(al::LiveActor const*, char const*, float);
isPrePassSpotLightStrikeCollision(al::LiveActor const*, char const*);
getPrePassProjLightInfo(al::LiveActor const*, char const*, float*, float*, sead::Vector3<float>*, sead::Vector3<float>*);
getPrePassProjOrthoLightInfo(al::LiveActor const*, char const*, float*, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*);
setPrePassProjLightFar(al::LiveActor const*, char const*, float);
setPrePassProjLightFovyDegree(al::LiveActor const*, char const*, float);
setPrePassProjLightShadow(al::LiveActor const*, char const*, bool, bool, float);
setPrePassProjOrthoLightShadow(al::LiveActor const*, char const*, bool, bool, float);
setPrePassSpotLightShadow(al::LiveActor const*, char const*, bool, bool, float);
initPrePassLightMtxConnector(al::LiveActor const*, char const*, sead::Matrix34<float> const*);
getTexIrradianceObj(al::LiveActor const*);
startAction(al::LiveActor*, char const*);
startActionAtRandomFrame(al::LiveActor*, char const*);
tryStartAction(al::LiveActor*, char const*);
tryStartActionIfNotPlaying(al::LiveActor*, char const*);
isActionPlaying(al::LiveActor const*, char const*);
tryStartActionIfActionEnd(al::LiveActor*, char const*);
isActionEnd(al::LiveActor const*);
isExistAction(al::LiveActor const*);
isExistAction(al::LiveActor const*, char const*);
isActionOneTime(al::LiveActor const*);
isActionOneTime(al::LiveActor const*, char const*);
getActionName(al::LiveActor const*);
getActionFrame(al::LiveActor const*);
getActionFrameMax(al::LiveActor const*);
getActionFrameMax(al::LiveActor const*, char const*);
getActionFrameRate(al::LiveActor const*);
setActionFrame(al::LiveActor*, float);
setActionFrameRate(al::LiveActor*, float);
stopAction(al::LiveActor*);
restartAction(al::LiveActor*);
copyAction(al::LiveActor*, al::LiveActor const*);
startNerveAction(al::LiveActor*, char const*);
setNerveAtActionEnd(al::LiveActor*, al::Nerve const*);
resetNerveActionForInit(al::LiveActor*);
startHitReaction(al::LiveActor const*, char const*);
startHitReactionHitEffect(al::LiveActor const*, char const*, al::HitSensor const*, al::HitSensor const*);
startHitReactionHitEffect(al::LiveActor const*, char const*, sead::Vector3<float> const&);
startHitReactionHitEffect(al::LiveActor const*, char const*, sead::Matrix34<float> const*);
startHitReactionBlowHit(al::LiveActor const*, al::HitSensor const*, al::HitSensor const*);
startHitReactionBlowHit(al::LiveActor const*, sead::Vector3<float> const&);
startHitReactionBlowHit(al::LiveActor const*);
startHitReactionBlowHitDirect(al::LiveActor const*, al::HitSensor const*, al::HitSensor const*);
startHitReactionBlowHitDirect(al::LiveActor const*, sead::Vector3<float> const&);
startHitReactionBlowHitDirect(al::LiveActor const*);
startSklAnim(al::LiveActor*, char const*);
startSklAnimInterpole(al::LiveActor*, char const*, char const*);
tryStartSklAnimIfExist(al::LiveActor*, char const*);
isSklAnimExist(al::LiveActor const*, char const*);
tryStartSklAnimIfNotPlaying(al::LiveActor*, char const*);
isSklAnimPlaying(al::LiveActor const*, char const*, int);
startSklAnimBlend(al::LiveActor*, char const*, char const*, char const*, char const*, char const*, char const*);
startSklAnimBlendInterpole(al::LiveActor*, char const*, char const*, char const*, char const*, char const*, char const*, char const*);
copySklAnim(al::LiveActor*, al::LiveActor const*);
isExistSklAnimRetargetting(al::LiveActor const*);
isSklAnimRetargettingValid(al::LiveActor const*);
validateSklAnimRetargetting(al::LiveActor const*);
invalidateSklAnimRetargetting(al::LiveActor const*);
clearSklAnimInterpole(al::LiveActor*);
isSklAnimExist(al::LiveActor const*);
isSklAnimEnd(al::LiveActor const*, int);
isSklAnimOneTime(al::LiveActor const*, char const*);
isSklAnimOneTime(al::LiveActor const*, int);
isSklAnimPlaying(al::LiveActor const*, int);
getPlayingSklAnimName(al::LiveActor const*, int);
getSklAnimFrame(al::LiveActor const*, int);
getSklAnimFrameRate(al::LiveActor const*, int);
getSklAnimFrameMax(al::LiveActor const*, int);
getSklAnimFrameMax(al::LiveActor const*, char const*);
setSklAnimFrame(al::LiveActor*, float, int);
setSklAnimFrameRate(al::LiveActor*, float, int);
setSklAnimFrameAndStop(al::LiveActor*, float, int);
getSklAnimBlendNum(al::LiveActor const*);
getSklAnimBlendWeight(al::LiveActor const*, int);
setSklAnimBlendWeight(al::LiveActor*, float, int);
setSklAnimBlendWeightDouble(al::LiveActor*, float);
setSklAnimBlendWeightDouble(al::LiveActor*, float, float);
setSklAnimBlendWeightTriple(al::LiveActor*, float, float, float);
setSklAnimBlendWeightQuad(al::LiveActor*, float, float, float, float);
setSklAnimBlendWeightFivefold(al::LiveActor*, float, float, float, float, float);
setSklAnimBlendWeightSixfold(al::LiveActor*, float, float, float, float, float, float);
setSklAnimBlendFrameAll(al::LiveActor*, float, bool);
setSklAnimBlendFrameRateAll(al::LiveActor*, float, bool);
startMtpAnim(al::LiveActor*, char const*);
startMtpAnimAndSetFrameAndStop(al::LiveActor*, char const*, float);
setMtpAnimFrame(al::LiveActor*, float);
setMtpAnimFrameRate(al::LiveActor*, float);
tryStartMtpAnimIfExist(al::LiveActor*, char const*);
isMtpAnimExist(al::LiveActor const*, char const*);
tryStartMtpAnimIfNotPlaying(al::LiveActor*, char const*);
isMtpAnimPlaying(al::LiveActor const*, char const*);
clearMtpAnim(al::LiveActor*);
isMtpAnimExist(al::LiveActor const*);
isMtpAnimEnd(al::LiveActor const*);
isMtpAnimOneTime(al::LiveActor const*, char const*);
isMtpAnimOneTime(al::LiveActor const*);
getPlayingMtpAnimName(al::LiveActor const*);
isMtpAnimPlaying(al::LiveActor const*);
getMtpAnimFrame(al::LiveActor const*);
getMtpAnimFrameRate(al::LiveActor const*);
getMtpAnimFrameMax(al::LiveActor const*);
getMtpAnimFrameMax(al::LiveActor const*, char const*);
setMtpAnimFrameAndStop(al::LiveActor*, float);
setMtpAnimFrameAndStopEnd(al::LiveActor*);
startMclAnim(al::LiveActor*, char const*);
tryStartMclAnimIfExist(al::LiveActor*, char const*);
isMclAnimExist(al::LiveActor const*, char const*);
tryStartMclAnimIfNotPlaying(al::LiveActor*, char const*);
isMclAnimPlaying(al::LiveActor const*, char const*);
clearMclAnim(al::LiveActor*);
isMclAnimExist(al::LiveActor const*);
isMclAnimEnd(al::LiveActor const*);
isMclAnimOneTime(al::LiveActor const*, char const*);
isMclAnimOneTime(al::LiveActor const*);
getPlayingMclAnimName(al::LiveActor const*);
isMclAnimPlaying(al::LiveActor const*);
getMclAnimFrame(al::LiveActor const*);
getMclAnimFrameRate(al::LiveActor const*);
getMclAnimFrameMax(al::LiveActor const*);
getMclAnimFrameMax(al::LiveActor const*, char const*);
setMclAnimFrame(al::LiveActor*, float);
setMclAnimFrameRate(al::LiveActor*, float);
startMclAnimAndSetFrameAndStop(al::LiveActor*, char const*, float);
setMclAnimFrameAndStop(al::LiveActor*, float);
setMclAnimNormalFrameAndStop(al::LiveActor*, float);
setMclAnimFrameAndStopEnd(al::LiveActor*);
startMtsAnim(al::LiveActor*, char const*);
startMtsAnimAndSetFrameAndStop(al::LiveActor*, char const*, float);
setMtsAnimFrame(al::LiveActor*, float);
setMtsAnimFrameRate(al::LiveActor*, float);
tryStartMtsAnimIfExist(al::LiveActor*, char const*);
isMtsAnimExist(al::LiveActor const*, char const*);
tryStartMtsAnimIfNotPlaying(al::LiveActor*, char const*);
isMtsAnimPlaying(al::LiveActor const*, char const*);
clearMtsAnim(al::LiveActor*);
isMtsAnimExist(al::LiveActor const*);
isMtsAnimEnd(al::LiveActor const*);
isMtsAnimOneTime(al::LiveActor const*, char const*);
isMtsAnimOneTime(al::LiveActor const*);
getPlayingMtsAnimName(al::LiveActor const*);
isMtsAnimPlaying(al::LiveActor const*);
getMtsAnimFrame(al::LiveActor const*);
getMtsAnimFrameRate(al::LiveActor const*);
getMtsAnimFrameMax(al::LiveActor const*);
getMtsAnimFrameMax(al::LiveActor const*, char const*);
setMtsAnimFrameAndStop(al::LiveActor*, float);
setMtsAnimFrameAndStopEnd(al::LiveActor*);
createMatAnimSlotForMcl(al::LiveActor*);
createMatAnimSlotForMtp(al::LiveActor*);
createMatAnimSlotForMts(al::LiveActor*);
startMatAnim(al::LiveActor*, char const*);
startMatAnimAndSetFrameAndStop(al::LiveActor*, char const*, float);
setMatAnimFrame(al::LiveActor*, float);
setMatAnimFrameRate(al::LiveActor*, float);
tryStartMatAnimIfExist(al::LiveActor*, char const*);
isMatAnimExist(al::LiveActor const*, char const*);
tryStartMatAnimIfNotPlaying(al::LiveActor*, char const*);
isMatAnimPlaying(al::LiveActor const*, char const*);
clearMatAnim(al::LiveActor*);
isMatAnimExist(al::LiveActor const*);
isMatAnimEnd(al::LiveActor const*);
isMatAnimOneTime(al::LiveActor const*, char const*);
isMatAnimOneTime(al::LiveActor const*);
getPlayingMatAnimName(al::LiveActor const*);
isMatAnimPlaying(al::LiveActor const*);
getMatAnimFrame(al::LiveActor const*);
getMatAnimFrameRate(al::LiveActor const*);
getMatAnimFrameMax(al::LiveActor const*);
getMatAnimFrameMax(al::LiveActor const*, char const*);
setMatAnimFrameAndStop(al::LiveActor*, float);
setMatAnimFrameAndStopEnd(al::LiveActor*);
startVisAnim(al::LiveActor*, char const*);
tryStartVisAnimIfExist(al::LiveActor*, char const*);
isVisAnimExist(al::LiveActor const*, char const*);
tryStartVisAnimIfNotPlaying(al::LiveActor*, char const*);
isVisAnimPlaying(al::LiveActor const*, char const*);
clearVisAnim(al::LiveActor*);
isVisAnimExist(al::LiveActor const*);
isVisAnimEnd(al::LiveActor const*);
isVisAnimOneTime(al::LiveActor const*, char const*);
isVisAnimOneTime(al::LiveActor const*);
getPlayingVisAnimName(al::LiveActor const*);
isVisAnimPlaying(al::LiveActor const*);
getVisAnimFrame(al::LiveActor const*);
getVisAnimFrameRate(al::LiveActor const*);
getVisAnimFrameMax(al::LiveActor const*);
getVisAnimFrameMax(al::LiveActor const*, char const*);
setVisAnimFrame(al::LiveActor*, float);
setVisAnimFrameRate(al::LiveActor*, float);
setVisAnimFrameAndStop(al::LiveActor*, float);
setVisAnimFrameAndStopEnd(al::LiveActor*);
startVisAnimAndSetFrameAndStop(al::LiveActor*, char const*, float);
startVisAnimForAction(al::LiveActor*, char const*);
tryStartVisAnimIfExistForAction(al::LiveActor*, char const*);
tryStartVisAnimIfNotPlayingForAction(al::LiveActor*, char const*);
isVisAnimPlayingForAction(al::LiveActor const*, char const*);
clearVisAnimForAction(al::LiveActor*);
isVisAnimEndForAction(al::LiveActor const*);
isVisAnimOneTimeForAction(al::LiveActor const*, char const*);
isVisAnimOneTimeForAction(al::LiveActor const*);
getPlayingVisAnimNameForAction(al::LiveActor const*);
isVisAnimPlayingForAction(al::LiveActor const*);
getVisAnimFrameForAction(al::LiveActor const*);
getVisAnimFrameRateForAction(al::LiveActor const*);
getVisAnimFrameMaxForAction(al::LiveActor const*);
setVisAnimFrameForAction(al::LiveActor*, float);
setVisAnimFrameRateForAction(al::LiveActor*, float);
setVisAnimFrameAndStopForAction(al::LiveActor*, float);
setVisAnimFrameAndStopEndForAction(al::LiveActor*);
startVisAnimAndSetFrameAndStopForAction(al::LiveActor*, char const*, float);
setAllAnimFrame(al::LiveActor*, float);
setAllAnimFrameRate(al::LiveActor*, float);
initAndBindSklAnimRetargetting(al::LiveActor*, char const*, sead::Vector3<float> const&);
createSklAnimRetargetting(al::LiveActor const*, char const*, sead::Vector3<float> const&);
bindSklAnimRetargetting(al::LiveActor const*, al::SklAnimRetargettingInfo const*);
createSklAnimRetargetting(al::LiveActor const*, al::LiveActor const*, sead::Vector3<float> const&);
unbindSklAnimRetargetting(al::LiveActor const*);
initPartialSklAnim(al::LiveActor*, int, int, int);
getPartialSklAnimSlotNum(al::LiveActor*);
addPartialSklAnimPartsList(al::LiveActor*, char const*, char const*, int);
addPartialSklAnimPartsListRecursive(al::LiveActor*, char const*, int);
calcJoitsAmountFromJoint(al::LiveActor*, char const*);
startPartialSklAnim(al::LiveActor*, char const*, int, int, al::SklAnimRetargettingInfo const*);
startPartialSklAnimWithInterpolate(al::LiveActor*, char const*, int, int, int, al::SklAnimRetargettingInfo const*);
clearPartialSklAnim(al::LiveActor*, int);
clearPartialSklAnimWithInterpolate(al::LiveActor*, int, int);
isPartialSklAnimEnd(al::LiveActor const*, int);
isPartialSklAnimOneTime(al::LiveActor const*, int);
isPartialSklAnimAttached(al::LiveActor const*, int);
isPartialSklAnimPlaying(al::LiveActor const*, char const*, int);
getPlayingPartialSklAnimName(al::LiveActor const*, int);
getPartialSklAnimFrame(al::LiveActor const*, int);
setPartialSklAnimFrame(al::LiveActor*, int, float);
getPartialSklAnimFrameRate(al::LiveActor const*, int);
setPartialSklAnimFrameRate(al::LiveActor*, int, float);
setBaseMtxAndCalcAnim(al::LiveActor*, sead::Matrix34<float> const&, sead::Vector3<float> const&);
tryFindAreaObjPlayerOne(al::PlayerHolder const*, char const*);
tryFindAreaObjPlayerAll(al::PlayerHolder const*, char const*);
tryGetAreaObjPlayerAll(al::LiveActor const*, al::AreaObjGroup const*);
isInAreaObjPlayerAll(al::LiveActor const*, al::AreaObj const*);
isInAreaObjPlayerAll(al::LiveActor const*, al::AreaObjGroup const*);
isInAreaObjPlayerAnyOne(al::LiveActor const*, al::AreaObj const*);
isInAreaObjPlayerAnyOne(al::LiveActor const*, al::AreaObjGroup const*);
createAreaObj(al::ActorInitInfo const&, char const*);
initAreaInitInfo(al::AreaInitInfo*, al::ActorInitInfo const&);
createLinkArea(al::ActorInitInfo const&, char const*, char const*);
initAreaInitInfo(al::AreaInitInfo*, al::PlacementInfo const&, al::ActorInitInfo const&);
tryCreateLinkArea(al::ActorInitInfo const&, char const*, char const*);
createLinkAreaGroup(al::ActorInitInfo const&, char const*, char const*, char const*);
createLinkAreaGroup(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*);
tryFindAreaObj(al::LiveActor const*, char const*);
isInAreaObj(al::LiveActor const*, char const*);
isInAreaObjPlayerOne(al::PlayerHolder const*, char const*);
isInAreaObjPlayerAll(al::PlayerHolder const*, char const*);
isInAreaObjPlayerOneIgnoreAreaTarget(al::PlayerHolder const*, char const*);
isInDeathArea(al::LiveActor const*);
isInWaterArea(al::LiveActor const*);
isInPlayerControlOffArea(al::LiveActor const*);
calcWaterSinkDepth(al::LiveActor const*);
registerAreaHostMtx(al::IUseAreaObj const*, sead::Matrix34<float> const*, al::ActorInitInfo const&);
registerAreaHostMtx(al::IUseAreaObj const*, sead::Matrix34<float> const*, al::ActorInitInfo const&, al::ValidatorBase const&);
registerAreaHostMtx(al::LiveActor const*, al::ActorInitInfo const&);
registerAreaHostMtx(al::LiveActor const*, al::ActorInitInfo const&, al::ValidatorBase const&);
registerAreaSyncHostMtx(al::IUseAreaObj const*, sead::Matrix34<float> const*, al::ActorInitInfo const&);
registerAreaSyncHostMtx(al::IUseAreaObj const*, sead::Matrix34<float> const*, al::ActorInitInfo const&, al::ValidatorBase const&);
registerAreaSyncHostMtx(al::LiveActor const*, al::ActorInitInfo const&);
registerAreaSyncHostMtx(al::LiveActor const*, al::ActorInitInfo const&, al::ValidatorBase const&);
tryReviseVelocityInsideAreaObj(sead::Vector3<float>*, al::LiveActor*, al::AreaObjGroup*, al::AreaObj const*);
tryCreateSwitchKeepOnAreaGroup(al::LiveActor*, al::ActorInitInfo const&);
tryCreateSwitchOnAreaGroup(al::LiveActor*, al::ActorInitInfo const&);
initActorClipping(al::LiveActor*, al::ActorInitInfo const&);
initGroupClipping(al::LiveActor*, al::ActorInitInfo const&);
getClippingRadius(al::LiveActor const*);
setClippingInfo(al::LiveActor*, float, sead::Vector3<float> const*);
setClippingObb(al::LiveActor*, sead::BoundBox3<float> const&);
getClippingObb(al::LiveActor*);
getClippingCenterPos(al::LiveActor const*);
setClippingNearDistance(al::LiveActor*, float);
expandClippingRadiusByShadowLength(al::LiveActor*, sead::Vector3<float>*, float);
tryExpandClippingToGround(al::LiveActor*, sead::Vector3<float>*, float);
tryExpandClippingByShadowMaskLength(al::LiveActor*, sead::Vector3<float>*);
tryExpandClippingByDepthShadowLength(al::LiveActor*, sead::Vector3<float>*);
tryExpandClippingByExpandObject(al::LiveActor*, al::ActorInitInfo const&);
isClipped(al::LiveActor const*);
isInvalidClipping(al::LiveActor const*);
invalidateClipping(al::LiveActor*);
validateClipping(al::LiveActor*);
onDrawClipping(al::LiveActor*);
offDrawClipping(al::LiveActor*);
onGroupClipping(al::LiveActor*);
offGroupClipping(al::LiveActor*);
isInClippingFrustum(al::LiveActor const*, sead::Vector3<float> const&, float, float, int);
isInClippingFrustum(al::ClippingDirector const*, sead::Vector3<float> const&, float, float, int);
isInClippingFrustumAllView(al::LiveActor const*, sead::Vector3<float> const&, float, float);
getActorCollider(al::LiveActor const*);
isExistActorCollider(al::LiveActor const*);
getActorCollisionPartsSensor(al::LiveActor const*);
isExistCollisionParts(al::LiveActor const*);
isEqualCollisionParts(al::LiveActor const*, al::CollisionParts const*);
validateCollisionParts(al::LiveActor*);
invalidateCollisionParts(al::LiveActor*);
validateCollisionPartsBySystem(al::LiveActor*);
invalidateCollisionPartsBySystem(al::LiveActor*);
isValidCollisionParts(al::LiveActor const*);
setCollisionPartsSpecialPurposeName(al::LiveActor*, char const*);
resetAllCollisionMtx(al::LiveActor*);
syncCollisionMtx(al::LiveActor*, sead::Matrix34<float> const*);
syncCollisionMtx(al::LiveActor*, al::CollisionParts*, sead::Matrix34<float> const*);
setSyncCollisionMtxPtr(al::LiveActor*, sead::Matrix34<float> const*);
isOnGround(al::LiveActor const*, unsigned int);
isOnGroundFace(al::LiveActor const*);
isCollidedGroundEdgeOrCorner(al::LiveActor const*);
isOnGroundNoVelocity(al::LiveActor const*, unsigned int);
isOnGroundDegree(al::LiveActor const*, float, unsigned int);
isOnGroundFaceDegree(al::LiveActor const*, float);
isOnGroundNoVelocityDegree(al::LiveActor const*, float, unsigned int);
getOnGroundNormal(al::LiveActor const*, unsigned int);
setColliderRadius(al::LiveActor*, float);
setColliderOffsetY(al::LiveActor*, float);
getColliderRadius(al::LiveActor const*);
getColliderOffsetY(al::LiveActor const*);
getColliderFixReaction(al::LiveActor const*);
calcColliderPos(sead::Vector3<float>*, al::LiveActor const*);
validateColliderRobustCheck(al::LiveActor*);
invalidateColliderRobustCheck(al::LiveActor*);
setColliderReactMovePower(al::LiveActor*, bool);
calcColliderFloorRotatePower(sead::Quat<float>*, al::LiveActor*);
calcJumpInertia(sead::Vector3<float>*, al::LiveActor*, sead::Vector3<float> const&, float);
isCollidedGround(al::LiveActor const*);
calcJumpInertiaWall(sead::Vector3<float>*, al::LiveActor*, float);
isCollidedWall(al::LiveActor const*);
scaleVelocityInertiaWallHit(al::LiveActor*, float, float, float);
getCollidedWallNormal(al::LiveActor const*);
calcCollidedNormalSum(al::LiveActor const*, sead::Vector3<float>*);
calcGroundNormalOrUpDir(sead::Vector3<float>*, al::LiveActor const*);
getCollidedGroundNormal(al::LiveActor const*);
calcGroundNormalOrGravityDir(sead::Vector3<float>*, al::LiveActor const*);
setColliderFilterTriangle(al::LiveActor*, al::TriangleFilterBase const*);
setColliderFilterCollisionParts(al::LiveActor*, al::CollisionPartsFilterBase const*);
createAndSetColliderFilterExistActor(al::LiveActor*);
createAndSetColliderFilterExistActor(al::LiveActor*, al::LiveActor*);
createAndSetColliderFilterSubActor(al::LiveActor*);
createAndSetColliderSpecialPurpose(al::LiveActor*, char const*);
createAndSetColliderSpecialPurposeForCollisionActor(al::LiveActor*, char const*);
createAndSetColliderIgnoreOptionalPurpose(al::LiveActor*, char const*);
createAndSetColliderSpecialAndIgnoreOptionalPurpose(al::LiveActor*, char const*, char const*);
createActorCollisionController(al::LiveActor*);
setColliderRadius(al::ActorCollisionController*, float);
setColliderRadiusScale(al::ActorCollisionController*, float);
setColliderOffsetY(al::ActorCollisionController*, float);
resetActorCollisionController(al::ActorCollisionController*, int);
updateActorCollisionController(al::ActorCollisionController*);
getCollidedFloorMaterialCodeName(al::LiveActor const*);
getCollidedFloorMaterialCodeName(al::Collider const*);
getCollidedWallMaterialCodeName(al::LiveActor const*);
getCollidedCeilingMaterialCodeName(al::LiveActor const*);
isCollidedFloorCode(al::LiveActor const*, char const*);
isCollidedCollisionCode(al::LiveActor const*, char const*, char const*);
isCollidedWallCode(al::LiveActor const*, char const*);
isCollidedCameraCode(al::LiveActor const*, char const*);
isCollidedMaterialCode(al::LiveActor const*, char const*);
isCollidedGroundFloorCode(al::LiveActor const*, char const*);
isCollidedGroundCollisionCode(al::LiveActor const*, char const*, char const*);
isCollided(al::LiveActor const*);
isCollidedCeiling(al::LiveActor const*);
isCollidedWallFace(al::LiveActor const*);
isCollidedVelocity(al::LiveActor const*);
isCollidedWallVelocity(al::LiveActor const*);
isCollidedCeilingVelocity(al::LiveActor const*);
getCollidedCeilingNormal(al::LiveActor const*);
getCollidedGroundPos(al::LiveActor const*);
getCollidedWallPos(al::LiveActor const*);
getCollidedCeilingPos(al::LiveActor const*);
calcSpeedCollideWall(al::LiveActor const*);
calcSpeedCollideGround(al::LiveActor const*);
calcSpeedCollideCeiling(al::LiveActor const*);
getCollidedGroundCollisionParts(al::LiveActor const*);
tryGetCollidedGroundCollisionParts(al::LiveActor const*);
getCollidedWallCollisionParts(al::LiveActor const*);
tryGetCollidedWallCollisionParts(al::LiveActor const*);
getCollidedCeilingCollisionParts(al::LiveActor const*);
tryGetCollidedCeilingCollisionParts(al::LiveActor const*);
getCollidedGroundSensor(al::LiveActor const*);
tryGetCollidedGroundSensor(al::LiveActor const*);
getCollidedWallSensor(al::LiveActor const*);
tryGetCollidedWallSensor(al::LiveActor const*);
getCollidedCeilingSensor(al::LiveActor const*);
tryGetCollidedCeilingSensor(al::LiveActor const*);
tryGetCollidedSensor(al::LiveActor const*);
tryGetCollidedPos(sead::Vector3<float>*, al::LiveActor const*);
setForceCollisionScaleOne(al::LiveActor const*);
followRotateFrontAxisUpGround(al::LiveActor*);
followRotateFrontAxisUp(al::LiveActor*, al::CollisionParts const*);
isAlive(al::LiveActor const*);
isDead(al::LiveActor const*);
isNoCollide(al::LiveActor const*);
onCalcAnim(al::LiveActor*);
offCalcAnim(al::LiveActor*);
validateShadow(al::LiveActor*);
invalidateShadow(al::LiveActor*);
onCollide(al::LiveActor*);
offCollide(al::LiveActor*);
validateMaterialCode(al::LiveActor*);
invalidateMaterialCode(al::LiveActor*);
validatePuddleMaterial(al::LiveActor*);
invalidatePuddleMaterial(al::LiveActor*);
isAreaTarget(al::LiveActor const*);
onAreaTarget(al::LiveActor*);
offAreaTarget(al::LiveActor*);
isUpdateMovementEffectAudioCollisionSensor(al::LiveActor const*);
onUpdateMovementEffectAudioCollisionSensor(al::LiveActor*);
offUpdateMovementEffectAudioCollisionSensor(al::LiveActor*);
initActorSceneInfo(al::LiveActor*, al::ActorInitInfo const&);
initExecutorUpdate(al::LiveActor*, al::ActorInitInfo const&, char const*);
initExecutorDraw(al::LiveActor*, al::ActorInitInfo const&, char const*);
initExecutorPlayer(al::LiveActor*, al::ActorInitInfo const&);
initExecutorPlayerPreMovement(al::LiveActor*, al::ActorInitInfo const&);
initExecutorPlayerMovement(al::LiveActor*, al::ActorInitInfo const&);
initExecutorPlayerModel(al::LiveActor*, al::ActorInitInfo const&);
initExecutorPlayerDecoration(al::LiveActor*, al::ActorInitInfo const&);
initExecutorEnemy(al::LiveActor*, al::ActorInitInfo const&);
initExecutorEnemyMovement(al::LiveActor*, al::ActorInitInfo const&);
initExecutorEnemyDecoration(al::LiveActor*, al::ActorInitInfo const&);
initExecutorEnemyDecorationMovement(al::LiveActor*, al::ActorInitInfo const&);
initExecutorMapObj(al::LiveActor*, al::ActorInitInfo const&);
initExecutorMapObjMovement(al::LiveActor*, al::ActorInitInfo const&);
initExecutorMapObjDecoration(al::LiveActor*, al::ActorInitInfo const&);
initExecutorNpcDecoration(al::LiveActor*, al::ActorInitInfo const&);
initExecutorShadowVolume(al::LiveActor*, al::ActorInitInfo const&);
initExecutorShadowVolumeFillStencil(al::LiveActor*, al::ActorInitInfo const&);
initExecutorCollisionMapObjDecorationMovement(al::LiveActor*, al::ActorInitInfo const&);
initExecutorWatchObj(al::LiveActor*, al::ActorInitInfo const&);
initExecutorDebugMovement(al::LiveActor*, al::ActorInitInfo const&);
initExecutorModelUpdate(al::LiveActor*, al::ActorInitInfo const&);
initExecutorDrcAssistMovement(al::LiveActor*, al::ActorInitInfo const&);
initActorPoseTRSV(al::LiveActor*);
initActorPoseTRMSV(al::LiveActor*);
initActorPoseTRGMSV(al::LiveActor*);
initActorPoseTFSV(al::LiveActor*);
initActorPoseTFUSV(al::LiveActor*);
initActorPoseTFGSV(al::LiveActor*);
initActorPoseTQSV(al::LiveActor*);
initActorPoseTQGSV(al::LiveActor*);
initActorPoseTQGMSV(al::LiveActor*);
initActorSRT(al::LiveActor*, al::ActorInitInfo const&);
initActorModelKeeper(al::LiveActor*, al::ActorInitInfo const&, al::ActorResource const*, int);
initActorModelKeeper(al::LiveActor*, al::ActorInitInfo const&, char const*, int, char const*);
initActorModelKeeperByHost(al::LiveActor*, al::LiveActor const*);
initActorModelForceCubeMap(al::LiveActor*, al::ActorInitInfo const&);
initActorActionKeeper(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*);
initActorActionKeeper(al::LiveActor*, al::ActorResource const*, char const*, char const*);
initActorEffectKeeper(al::LiveActor*, al::ActorInitInfo const&, char const*);
initActorSeKeeper(al::LiveActor*, al::ActorInitInfo const&, char const*, sead::Vector3<float> const*, sead::Matrix34<float> const*);
initActorSeKeeper(al::LiveActor*, al::ActorInitInfo const&, char const*);
initActorSeKeeperWithout3D(al::LiveActor*, al::ActorInitInfo const&, char const*);
initActorBgmKeeper(al::LiveActor*, al::ActorInitInfo const&, char const*);
isInitializedBgmKeeper(al::LiveActor*);
initHitReactionKeeper(al::LiveActor*, char const*);
initHitReactionKeeper(al::LiveActor*, al::Resource const*, char const*);
initActorParamHolder(al::LiveActor*, char const*);
initActorParamHolder(al::LiveActor*, al::Resource const*, char const*);
initDepthShadowMapCtrl(al::LiveActor*, al::Resource const*, al::ActorInitInfo const&, char const*);
initDepthShadowMapCtrlWithoutIter(al::LiveActor*, int, bool);
addDepthShadowMapInfo(al::LiveActor const*, char const*, int, int, int, float, bool, sead::Vector3<float> const&, bool, sead::Vector3<float> const&, sead::Vector3<float> const&, bool, char const*, int, bool, float, float, float, bool, bool, float, int, bool);
declareUseDepthShadowMap(al::LiveActor const*, int);
createDepthShadowMap(al::LiveActor const*, char const*, int, int, int);
initShadowMaskCtrl(al::LiveActor*, al::ActorInitInfo const&, al::ByamlIter const&, char const*);
initShadowMaskCtrlWithoutInitFile(al::LiveActor*, al::ActorInitInfo const&, int);
createShadowMaskSphere(al::LiveActor*, char const*, char const*, char const*);
createShadowMaskCube(al::LiveActor*, char const*, char const*, char const*, sead::Color4f const&, sead::Vector3<float> const&, float, float, float, sead::Vector3<float> const&, float);
createShadowMaskCylinder(al::LiveActor*, char const*, char const*, char const*, sead::Color4f const&, sead::Vector3<float> const&, float, float, float, float, float);
createShadowMaskCastOvalCylinder(al::LiveActor*, char const*, char const*, char const*, sead::Color4f const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float, float);
initActorCollision(al::LiveActor*, sead::SafeStringBase<char> const&, al::HitSensor*, sead::Matrix34<float> const*);
initActorCollisionWithResource(al::LiveActor*, al::Resource const*, sead::SafeStringBase<char> const&, al::HitSensor*, sead::Matrix34<float> const*, char const*);
initActorCollisionWithArchiveName(al::LiveActor*, sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&, al::HitSensor*, sead::Matrix34<float> const*);
initActorCollisionWithFilePtr(al::LiveActor*, void*, void const*, al::HitSensor*, sead::Matrix34<float> const*, char const*, char const*, int);
initStageSwitch(al::LiveActor*, al::ActorInitInfo const&);
initActorItemKeeper(al::LiveActor*, al::ActorInitInfo const&, al::ByamlIter const&);
initActorPrePassLightKeeper(al::LiveActor*, al::Resource const*, al::ActorInitInfo const&, char const*);
initActorOcclusionKeeper(al::LiveActor*, al::Resource const*, al::ActorInitInfo const&, char const*);
initSubActorKeeper(al::LiveActor*, al::ActorInitInfo const&, char const*, int);
initSubActorKeeperNoFile(al::LiveActor*, al::ActorInitInfo const&, int);
registerSubActor(al::LiveActor*, al::LiveActor*);
registerSubActorSyncClipping(al::LiveActor*, al::LiveActor*);
registerSubActorSyncClippingAndHide(al::LiveActor*, al::LiveActor*);
registerSubActorSyncAll(al::LiveActor*, al::LiveActor*);
setSubActorOffSyncClipping(al::LiveActor*);
initScreenPointKeeper(al::LiveActor*, al::Resource const*, al::ActorInitInfo const&, char const*);
initScreenPointKeeperNoYaml(al::LiveActor*, int);
initActorMaterialCategory(al::LiveActor*, al::ActorInitInfo const&, char const*);
initActor(al::LiveActor*, al::ActorInitInfo const&);
initActorSuffix(al::LiveActor*, al::ActorInitInfo const&, char const*);
initActorChangeModel(al::LiveActor*, al::ActorInitInfo const&);
initActorChangeModelSuffix(al::LiveActor*, al::ActorInitInfo const&, char const*);
initActorWithArchiveName(al::LiveActor*, al::ActorInitInfo const&, sead::SafeStringBase<char> const&, char const*);
initChildActorWithArchiveNameWithPlacementInfo(al::LiveActor*, al::ActorInitInfo const&, sead::SafeStringBase<char> const&, char const*);
initChildActorWithArchiveNameNoPlacementInfo(al::LiveActor*, al::ActorInitInfo const&, sead::SafeStringBase<char> const&, char const*);
createChildLinkSimpleActor(char const*, char const*, al::ActorInitInfo const&, bool);
createChildLinkMapPartsActor(char const*, char const*, al::ActorInitInfo const&, int, bool);
initMapPartsActor(al::LiveActor*, al::ActorInitInfo const&, char const*);
initLinksActor(al::LiveActor*, al::ActorInitInfo const&, char const*, int);
createLinksPlayerActorInfo(al::LiveActor*, al::ActorInitInfo const&);
getLinksActorClassName(al::ActorInitInfo const&, char const*, int);
getLinksActorDisplayName(al::ActorInitInfo const&, char const*, int);
getLinksActorObjectName(al::ActorInitInfo const&, char const*, int);
initCreateActorWithPlacementInfo(al::LiveActor*, al::ActorInitInfo const&);
initCreateActorWithPlacementInfo(al::LiveActor*, al::ActorInitInfo const&, al::PlacementInfo const&);
initCreateActorNoPlacementInfo(al::LiveActor*, al::ActorInitInfo const&);
initCreateActorNoPlacementInfoNoViewId(al::LiveActor*, al::ActorInitInfo const&);
createPlacementActorFromFactory(al::ActorInitInfo const&, al::PlacementInfo const*);
createLinksActorFromFactory(al::ActorInitInfo const&, char const*, int);
createLinksActorGroupFromFactory(al::ActorInitInfo const&, char const*, char const*);
tryCreateLinksActorGroupFromFactory(al::ActorInitInfo const&, char const*, char const*);
tryCreateLinksActorFromFactorySingle(al::ActorInitInfo const&, char const*);
createAndRegisterLinksActorFromFactory(al::LiveActorGroup*, al::ActorInitInfo const&, char const*);
makeMapPartsModelName(sead::BufferedSafeStringBase<char>*, sead::BufferedSafeStringBase<char>*, al::PlacementInfo const&);
makeMapPartsModelName(sead::BufferedSafeStringBase<char>*, sead::BufferedSafeStringBase<char>*, al::ActorInitInfo const&);
tryGetMapPartsSuffix(al::ActorInitInfo const&, char const*);
initMapPartsActorWithArchiveName(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*);
initNerve(al::LiveActor*, al::Nerve const*, int);
initNerveAction(al::LiveActor*, char const*, alNerveFunction::NerveActionCollector*, int);
trySyncStageSwitchAppear(al::LiveActor*);
trySyncStageSwitchKill(al::LiveActor*);
trySyncStageSwitchAppearAndKill(al::LiveActor*);
tryListenStageSwitchAppear(al::LiveActor*);
tryListenStageSwitchKill(al::LiveActor*);
syncSensorScaleY(al::LiveActor*);
syncSensorAndColliderScaleY(al::LiveActor*);
setMaterialCode(al::LiveActor*, char const*);
initMaterialCode(al::LiveActor*, al::ActorInitInfo const&);
tryAddDisplayRotate(al::LiveActor*, al::ActorInitInfo const&);
tryAddDisplayOffset(al::LiveActor*, al::ActorInitInfo const&);
tryAddDisplayScale(al::LiveActor*, al::ActorInitInfo const&);
getPlacementInfo(al::ActorInitInfo const&);
getLayoutInitInfo(al::ActorInitInfo const&);
getAudioDirector(al::ActorInitInfo const&);
getCollisionDirectorFromInfo(al::ActorInitInfo const&);
getSceneCameraInfoFromInfo(al::ActorInitInfo const&);
getGraphicsSystemInfo(al::ActorInitInfo const&);
getDrawContext(al::ActorInitInfo const&);
getActorRecourseDataF32(float*, al::LiveActor*, char const*, char const*);
getActorRecourseDataString(char const**, al::LiveActor*, char const*, char const*);
getActorRecourseDataV3f(sead::Vector3<float>*, al::LiveActor*, char const*, char const*);
getActorRecourseDataBox3f(sead::BoundBox3<float>*, al::LiveActor*, char const*, char const*);
createPartsEffectGroup(al::LiveActor*, al::ActorInitInfo const&, int);
updateMaterialCodeGround(al::LiveActor*, char const*);
updateMaterialCodeAll(al::LiveActor*);
updateMaterialCodeArea(al::LiveActor*);
updateMaterialCodeWet(al::LiveActor*, bool);
updateMaterialCodeWater(al::LiveActor*);
updateMaterialCodeWater(al::LiveActor*, bool);
updateMaterialCodePuddle(al::LiveActor*);
updateMaterialCodePuddle(al::LiveActor*, bool);
resetMaterialCode(al::LiveActor*);
showModel(al::LiveActor*);
showModelIfHide(al::LiveActor*);
isHideModel(al::LiveActor const*);
hideModel(al::LiveActor*);
hideModelIfShow(al::LiveActor*);
isExistModel(al::LiveActor const*);
switchShowHideModelIfNearCamera(al::LiveActor*, float);
blinkModel(al::LiveActor*, int, int, int);
calcViewModelSystem(al::LiveActor*);
calcViewModel(al::LiveActor*);
showSilhouetteModel(al::LiveActor*);
hideSilhouetteModel(al::LiveActor*);
isSilhouetteModelHidden(al::LiveActor const*);
showSilhouetteModelIfHide(al::LiveActor*);
hideSilhouetteModelIfShow(al::LiveActor*);
setModelAlphaMask(al::LiveActor*, float);
getModelAlphaMask(al::LiveActor const*);
isModelAlphaMask(al::LiveActor const*);
updateModelAlphaMaskCameraDistance(al::LiveActor*, float, float, float, float);
isExistZPrePass(al::LiveActor const*);
isEnableZPrePass(al::LiveActor const*);
validateZPrePass(al::LiveActor*);
invalidateZPrePass(al::LiveActor*);
invalidateOcclusionQuery(al::LiveActor*);
validateOcclusionQuery(al::LiveActor*);
isValidOcclusionQuery(al::LiveActor const*);
setFixedModelFlag(al::LiveActor*);
tryInitFixedModelGpuBuffer(al::LiveActor*);
setIgnoreUpdateDrawClipping(al::LiveActor*, bool);
setNeedSetBaseMtxAndCalcAnimFlag(al::LiveActor*, bool);
isViewDependentModel(al::LiveActor const*);
isNeedUpdateModel(al::LiveActor const*);
setEnvTextureMirror(al::LiveActor*, int);
setEnvTextureProc3D(al::LiveActor*, int);
forceApplyCubeMap(al::LiveActor*, char const*);
setMaterialProgrammable(al::LiveActor*);
isIncludePrepassCullingShape(al::LiveActor*);
isExistJoint(al::LiveActor const*, char const*);
getJointIndex(al::LiveActor const*, char const*);
getJointMtxPtr(al::LiveActor const*, char const*);
getJointMtxPtrByIndex(al::LiveActor const*, int);
getJointLocalTrans(sead::Vector3<float>*, al::LiveActor const*, char const*);
calcJointPos(sead::Vector3<float>*, al::LiveActor const*, char const*);
calcJointOffsetPos(sead::Vector3<float>*, al::LiveActor const*, char const*, sead::Vector3<float> const&);
calcJointPosByIndex(sead::Vector3<float>*, al::LiveActor const*, int);
calcJointSideDir(sead::Vector3<float>*, al::LiveActor const*, char const*);
calcJointUpDir(sead::Vector3<float>*, al::LiveActor const*, char const*);
calcJointFrontDir(sead::Vector3<float>*, al::LiveActor const*, char const*);
calcJointScale(sead::Vector3<float>*, al::LiveActor const*, char const*);
calcJointQuat(sead::Quat<float>*, al::LiveActor const*, char const*);
multVecJointMtx(sead::Vector3<float>*, sead::Vector3<float> const&, al::LiveActor const*, char const*);
multVecJointInvMtx(sead::Vector3<float>*, sead::Vector3<float> const&, al::LiveActor const*, char const*);
multMtxJointInvMtx(sead::Matrix34<float>*, sead::Matrix34<float> const&, al::LiveActor const*, char const*);
setJointVisibility(al::LiveActor*, char const*, bool);
isJointVisibility(al::LiveActor const*, char const*);
isFaceJointXDirDegreeYZ(al::LiveActor const*, char const*, sead::Vector3<float> const&, float, float);
isFaceJointYDirDegreeZX(al::LiveActor const*, char const*, sead::Vector3<float> const&, float, float);
isFaceJointZDirDegreeXY(al::LiveActor const*, char const*, sead::Vector3<float> const&, float, float);
calcJointAngleXDirToTargetOnYDir(al::LiveActor const*, char const*, sead::Vector3<float> const&);
calcJointAngleXDirToTargetOnZDir(al::LiveActor const*, char const*, sead::Vector3<float> const&);
calcJointAngleYDirToTargetOnXDir(al::LiveActor const*, char const*, sead::Vector3<float> const&);
calcJointAngleYDirToTargetOnZDir(al::LiveActor const*, char const*, sead::Vector3<float> const&);
calcJointAngleZDirToTargetOnXDir(al::LiveActor const*, char const*, sead::Vector3<float> const&);
calcJointAngleZDirToTargetOnYDir(al::LiveActor const*, char const*, sead::Vector3<float> const&);
getMaterialName(al::LiveActor const*, int);
getMaterialCount(al::LiveActor const*);
isExistMaterial(al::LiveActor const*, char const*);
getMaterialObj(al::LiveActor const*, int);
getMaterialObj(al::LiveActor const*, char const*);
getMaterialIndex(al::LiveActor const*, char const*);
isExistMaterialTexture(al::LiveActor const*, char const*, char const*);
getMaterialCategory(al::LiveActor const*, int);
tryGetMaterialCategory(al::LiveActor const*, int);
isOnlyMaterialCategoryObject(al::LiveActor const*);
showMaterial(al::LiveActor*, char const*);
hideMaterial(al::LiveActor*, char const*);
showMaterial(al::LiveActor*, int);
hideMaterial(al::LiveActor*, int);
showMaterialAll(al::LiveActor*);
tryShowMaterial(al::LiveActor*, int);
tryHideMaterial(al::LiveActor*, int);
tryShowMaterialAll(al::LiveActor*);
setModelMaterialParameterF32(al::LiveActor const*, int, char const*, float);
setModelMaterialParameterF32(al::LiveActor const*, char const*, char const*, float);
setModelMaterialParameterV2F(al::LiveActor const*, int, char const*, sead::Vector2<float> const&);
setModelMaterialParameterV2F(al::LiveActor const*, char const*, char const*, sead::Vector2<float> const&);
setModelMaterialParameterV3F(al::LiveActor const*, int, char const*, sead::Vector3<float> const&);
setModelMaterialParameterV3F(al::LiveActor const*, char const*, char const*, sead::Vector3<float> const&);
setModelMaterialParameterV4F(al::LiveActor const*, int, char const*, sead::Vector4<float> const&);
setModelMaterialParameterV4F(al::LiveActor const*, char const*, char const*, sead::Vector4<float> const&);
setModelMaterialParameterRgb(al::LiveActor const*, int, char const*, sead::Vector3<float> const&);
setModelMaterialParameterRgb(al::LiveActor const*, char const*, char const*, sead::Vector3<float> const&);
setModelMaterialParameterRgb(al::LiveActor const*, int, char const*, sead::Color4f const&);
setModelMaterialParameterRgb(al::LiveActor const*, char const*, char const*, sead::Color4f const&);
setModelMaterialParameterRgba(al::LiveActor const*, int, char const*, sead::Color4f const&);
setModelMaterialParameterRgba(al::LiveActor const*, char const*, char const*, sead::Color4f const&);
setModelMaterialParameterAlpha(al::LiveActor const*, int, char const*, float);
setModelMaterialParameterAlpha(al::LiveActor const*, char const*, char const*, float);
setModelMaterialParameterTextureTrans(al::LiveActor const*, char const*, int, sead::Vector2<float> const&);
getModelMaterialParameterDisplacementScale(al::LiveActor const*, char const*, int);
setModelMaterialParameterDisplacementScale(al::LiveActor const*, char const*, int, float);
getModelUniformBlock(al::LiveActor const*, char const*);
findModelUniformBlock(al::LiveActor const*, char const*);
swapModelUniformBlock(agl::UniformBlock*);
flushModelUniformBlock(agl::UniformBlock*);
getModelDrawCategoryFromShaderAssign(bool*, bool*, bool*, bool*, al::LiveActor const*);
trySetOcclusionQueryBox(al::LiveActor*, float);
trySetOcclusionQueryBox(al::LiveActor*, sead::BoundBox3<float> const&);
trySetOcclusionQueryCenter(al::LiveActor*, sead::Vector3<float> const*);
getModelName(al::LiveActor const*);
isModelName(al::LiveActor const*, char const*);
calcModelBoundingSphereRadius(al::LiveActor const*);
getBoundingSphereCenterAndRadius(sead::Vector3<float>*, float*, al::LiveActor const*);
calcModelBoundingBox(sead::BoundBox3<float>*, al::LiveActor const*);
calcModelBoundingBoxMtx(sead::Matrix34<float>*, al::LiveActor const*);
submitViewModel(al::LiveActor const*, sead::Matrix34<float> const&);
replaceMaterialTextureRef(al::LiveActor*, nn::g3d::TextureRef*, char const*, char const*);
replaceMaterialResTexture(al::LiveActor*, nn::gfx::ResTexture*, char const*, char const*);
replaceMaterialResTexture(al::LiveActor*, char const*, char const*, nn::gfx::DescriptorSlot, nn::gfx::TTextureView<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > > const*);
replaceMaterialLayoutTexture(al::LiveActor*, al::LayoutTextureRenderObj const*, char const*, char const*);
recreateModelDisplayList(al::LiveActor const*);
calcPolygonNum(al::LiveActor const*, int);
calcPolygonNumCurrentLod(al::LiveActor const*);
calcPolygonNumCurrentLodWithoutVisAnim(al::LiveActor const*);
getLodLevel(al::LiveActor const*);
getMaterialLodLevel(al::LiveActor const*);
getLodLevelNoClamp(al::LiveActor const*);
getLodModelCount(al::LiveActor const*);
forceLodLevel(al::LiveActor*, int);
unforceLodLevel(al::LiveActor*);
isExistLodModel(al::LiveActor const*);
isEnableMaterialLod(al::LiveActor const*);
validateLodModel(al::LiveActor*);
invalidateLodModel(al::LiveActor*);
isValidateLodModel(al::LiveActor const*);
isExistDitherAnimator(al::LiveActor const*);
isValidNearDitherAnim(al::LiveActor const*);
stopDitherAnimAutoCtrl(al::LiveActor*);
restartDitherAnimAutoCtrl(al::LiveActor*);
validateDitherAnim(al::LiveActor*);
invalidateDitherAnim(al::LiveActor*);
validateFarDitherIfInvalidateClipping(al::LiveActor*);
setDitherAnimSphereRadius(al::LiveActor*, float);
setDitherAnimBoundingBox(al::LiveActor*, sead::Vector3<float> const&);
setDitherAnimMaxAlpha(al::LiveActor*, float);
setDitherAnimClippingJudgeLocalOffset(al::LiveActor*, sead::Vector3<float> const&);
setDitherAnimClippingJudgeParam(al::LiveActor*, char const*);
resetDitherAnimClippingJudgeParam(al::LiveActor*);
getDitherAnimMinNearDitherAlpha(al::LiveActor const*);
getDitherAnimNearClipStartDistance(al::LiveActor const*);
getDitherAnimNearClipEndDistance(al::LiveActor const*);
calcDitherAnimJudgeDistance(al::LiveActor const*);
createUniqueShader(al::LiveActor*);
isJudgedToClipFrustum(al::ClippingDirector const*, sead::Vector3<float> const&, float, float);
isJudgedToClipFrustum(al::LiveActor const*, sead::Vector3<float> const&, float, float);
isJudgedToClipFrustum(al::LiveActor const*, float, float);
isJudgedToClipFrustumWithoutFar(al::ClippingDirector const*, sead::Vector3<float> const&, float, float);
isJudgedToClipFrustumWithoutFar(al::LiveActor const*, sead::Vector3<float> const&, float, float);
isJudgedToClipFrustumWithoutFar(al::LiveActor const*, float, float);
resetPosition(al::LiveActor*);
resetPosition(al::LiveActor*, sead::Vector3<float> const&);
resetRotatePosition(al::LiveActor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
resetQuatPosition(al::LiveActor*, sead::Quat<float> const&, sead::Vector3<float> const&);
resetMtxPosition(al::LiveActor*, sead::Matrix34<float> const&);
resetActorPosition(al::LiveActor*, al::LiveActor const*);
trySetPosOnGround(al::LiveActor*);
getVelocity(al::LiveActor const*);
getVelocityPtr(al::LiveActor*);
separateVelocityHV(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*);
separateVelocityDirHV(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
separateVelocityParallelVertical(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
setVelocity(al::LiveActor*, sead::Vector3<float> const&);
setVelocity(al::LiveActor*, float, float, float);
setVelocityX(al::LiveActor*, float);
setVelocityY(al::LiveActor*, float);
setVelocityZ(al::LiveActor*, float);
setVelocityZero(al::LiveActor*);
setVelocityZeroX(al::LiveActor*);
setVelocityZeroY(al::LiveActor*);
setVelocityZeroZ(al::LiveActor*);
setVelocityZeroH(al::LiveActor*);
setVelocityZeroH(al::LiveActor*, sead::Vector3<float> const&);
setVelocityZeroV(al::LiveActor*);
setVelocityZeroV(al::LiveActor*, sead::Vector3<float> const&);
setVelocityJump(al::LiveActor*, float);
setVelocityToFront(al::LiveActor*, float);
setVelocityToUp(al::LiveActor*, float);
setVelocityToSide(al::LiveActor*, float);
setVelocityToDirection(al::LiveActor*, sead::Vector3<float> const&, float);
setVelocityToGravity(al::LiveActor*, float);
setVelocitySeparateHV(al::LiveActor*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
setVelocitySeparateHV(al::LiveActor*, sead::Vector3<float> const&, float, float);
calcVelocitySeparateHV(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, float, float);
setVelocitySeparateUp(al::LiveActor*, sead::Vector3<float> const&, float, float);
setVelocityOnlyDir(al::LiveActor*, sead::Vector3<float> const&, float);
setVelocityOnlyV(al::LiveActor*, float);
setVelocityOnlyGravity(al::LiveActor*, float);
addVelocity(al::LiveActor*, sead::Vector3<float> const&);
addVelocity(al::LiveActor*, float, float, float);
addVelocityX(al::LiveActor*, float);
addVelocityY(al::LiveActor*, float);
addVelocityZ(al::LiveActor*, float);
addVelocityDump(al::LiveActor*, sead::Vector3<float> const&, float);
addVelocityJump(al::LiveActor*, float);
addVelocityToFront(al::LiveActor*, float);
addVelocityToUp(al::LiveActor*, float);
addVelocityToSide(al::LiveActor*, float);
addVelocityToDown(al::LiveActor*, float);
addVelocityToDirection(al::LiveActor*, sead::Vector3<float> const&, float);
addVelocityToGravity(al::LiveActor*, float);
addVelocityToGravityLimit(al::LiveActor*, float, float);
addVelocityToGravityFittedGround(al::LiveActor*, float, unsigned int);
addVelocityToGravityNaturalOrFittedGround(al::LiveActor*, float);
calcGravityDir(sead::Vector3<float>*, al::LiveActor const*);
addVelocityToTarget(al::LiveActor*, sead::Vector3<float> const&, float);
addVelocityToTarget(al::LiveActor*, sead::Vector3<float> const&, float, float, float, float);
addVelocityToTargetH(al::LiveActor*, sead::Vector3<float> const&, float);
addVelocityToTargetHV(al::LiveActor*, sead::Vector3<float> const&, float, float);
addVelocityDampToTarget(al::LiveActor*, sead::Vector3<float> const&, float);
addVelocityDampToTarget(al::LiveActor*, sead::Vector3<float> const&, float, float);
addVelocityToPlayer(al::LiveActor*, float, sead::Vector3<float> const&);
addVelocityToPlayerHV(al::LiveActor*, float, float, sead::Vector3<float> const&);
addVelocityFromTarget(al::LiveActor*, sead::Vector3<float> const&, float);
addVelocityFromTargetHV(al::LiveActor*, sead::Vector3<float> const&, float, float);
addVelocityFromPlayer(al::LiveActor*, float, sead::Vector3<float> const&);
addVelocityFromPlayerHV(al::LiveActor*, float, float, sead::Vector3<float> const&);
addVelocityClockwiseToDirection(al::LiveActor*, sead::Vector3<float> const&, float);
calcVelocityClockwiseToDirection(al::LiveActor*, sead::Vector3<float>*, sead::Vector3<float> const&);
addVelocityClockwiseToTarget(al::LiveActor*, sead::Vector3<float> const&, float);
addVelocityJumpGroundInertia(al::LiveActor*, sead::Vector3<float> const&, float);
tryAddVelocityLimit(al::LiveActor*, sead::Vector3<float> const&, float);
subVelocityExceptDirectionLimit(al::LiveActor*, sead::Vector3<float> const&, float, float);
scaleVelocity(al::LiveActor*, float);
scaleVelocityLimit(al::LiveActor*, float, float);
scaleVelocityX(al::LiveActor*, float);
scaleVelocityY(al::LiveActor*, float);
scaleVelocityZ(al::LiveActor*, float);
scaleVelocityHV(al::LiveActor*, float, float);
scaleVelocityDirection(al::LiveActor*, sead::Vector3<float> const&, float);
scaleVelocityExceptDirection(al::LiveActor*, sead::Vector3<float> const&, float);
scaleVelocityParallelVertical(al::LiveActor*, sead::Vector3<float> const&, float, float);
limitVelocity(al::LiveActor*, float);
calcSpeed(al::LiveActor const*);
limitVelocityX(al::LiveActor*, float);
limitVelocityY(al::LiveActor*, float);
limitVelocityZ(al::LiveActor*, float);
limitVelocityH(al::LiveActor*, float);
limitVelocityHV(al::LiveActor*, float, float);
limitVelocityUpGravityH(al::LiveActor*, float, float, float);
limitVelocityDir(al::LiveActor*, sead::Vector3<float> const&, float);
limitVelocityDirSign(al::LiveActor*, sead::Vector3<float> const&, float);
limitVelocityDirV(al::LiveActor*, sead::Vector3<float> const&, float);
limitVelocityDirVRate(al::LiveActor*, sead::Vector3<float> const&, float, float);
limitVelocityParallelVertical(al::LiveActor*, sead::Vector3<float> const&, float, float);
limitVelocitySeparateHV(al::LiveActor*, sead::Vector3<float> const&, float, float);
reboundVelocityPart(al::LiveActor*, float, float);
reboundVelocityPart(al::LiveActor*, float, float, float, float);
reboundVelocityFromEachCollision(al::LiveActor*, float, float, float, float);
reboundVelocityFromCollision(al::LiveActor*, float, float, float);
reboundVelocityFromTriangles(al::LiveActor*, float, float);
reboundVelocityFromActor(al::LiveActor*, al::LiveActor const*, float);
reboundVelocityFromActor(al::LiveActor*, al::LiveActor const*, sead::Vector3<float> const&, float);
reboundVelocityFromSensor(al::LiveActor*, al::HitSensor const*, float);
reboundVelocityFromSensor(al::LiveActor*, al::HitSensor const*, sead::Vector3<float> const&, float);
calcDirToActor(sead::Vector3<float>*, al::LiveActor const*, al::LiveActor const*);
reboundVelocityBetweenActor(al::LiveActor*, al::LiveActor*, float);
reboundVelocityBetweenSensor(al::HitSensor*, al::HitSensor*, float);
calcVelocityKeepLengthBetweenActor(sead::Vector3<float>*, al::LiveActor const*, al::LiveActor const*, float, float);
addVelocityKeepLengthBetweenActor(al::LiveActor*, al::LiveActor*, float, float);
addVelocityDumpKeepLengthBetweenActor(al::LiveActor*, al::LiveActor*, float, float, float);
calcVelocityBlowAttack(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, float, float);
addVelocityBlowAttack(al::LiveActor*, sead::Vector3<float> const&, float, float);
addVelocityBlowAttack(al::LiveActor*, al::HitSensor const*, float, float);
setVelocityBlowAttack(al::LiveActor*, sead::Vector3<float> const&, float, float);
setVelocityBlowAttack(al::LiveActor*, al::HitSensor const*, float, float);
setVelocityBlowAttackAndTurnToTarget(al::LiveActor*, sead::Vector3<float> const&, float, float);
isVelocityFast(al::LiveActor const*, float);
isVelocityFastH(al::LiveActor const*, float);
isVelocitySlow(al::LiveActor const*, float);
isVelocitySlowH(al::LiveActor const*, float);
calcSpeedH(al::LiveActor const*);
calcSpeedV(al::LiveActor const*);
calcSpeedDirection(al::LiveActor const*, sead::Vector3<float> const&);
calcSpeedExceptDir(al::LiveActor const*, sead::Vector3<float> const&);
isNear(al::LiveActor const*, al::LiveActor const*, float);
isNear(al::LiveActor const*, sead::Vector3<float> const&, float);
isNearXZ(al::LiveActor const*, sead::Vector3<float> const&, float);
isNearH(al::LiveActor const*, sead::Vector3<float> const&, float);
calcDistanceH(al::LiveActor const*, sead::Vector3<float> const&);
isNearV(al::LiveActor const*, sead::Vector3<float> const&, float);
calcDistanceV(al::LiveActor const*, sead::Vector3<float> const&);
isNearHV(al::LiveActor const*, sead::Vector3<float> const&, float, float);
isNearHV(al::LiveActor const*, sead::Vector3<float> const&, float, float, float);
calcHeight(al::LiveActor const*, sead::Vector3<float> const&);
isFar(al::LiveActor const*, al::LiveActor const*, float);
isFar(al::LiveActor const*, sead::Vector3<float> const&, float);
calcDistance(al::LiveActor const*, al::LiveActor const*);
calcDistance(al::LiveActor const*, sead::Vector3<float> const&);
calcDistanceV(al::LiveActor const*, al::LiveActor const*);
calcDistanceH(al::LiveActor const*, al::LiveActor const*);
calcDistanceH(al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcHeight(al::LiveActor const*, al::LiveActor const*);
calcDistanceFront(al::LiveActor const*, sead::Vector3<float> const&);
calcDistanceFront(al::LiveActor const*, al::LiveActor const*);
addRotateAndRepeatX(al::LiveActor*, float);
addRotateAndRepeatY(al::LiveActor*, float);
addRotateAndRepeatZ(al::LiveActor*, float);
addRandomRotateY(al::LiveActor*);
calcQuatSide(sead::Vector3<float>*, al::LiveActor const*);
calcQuatUp(sead::Vector3<float>*, al::LiveActor const*);
calcQuatFront(sead::Vector3<float>*, al::LiveActor const*);
calcQuatLocalAxis(sead::Vector3<float>*, al::LiveActor const*, int);
calcTransOffsetFront(sead::Vector3<float>*, al::LiveActor const*, float);
calcTransOffsetUp(sead::Vector3<float>*, al::LiveActor const*, float);
calcTransOffsetSide(sead::Vector3<float>*, al::LiveActor const*, float);
setTransOffsetLocalDir(al::LiveActor*, sead::Quat<float> const&, sead::Vector3<float> const&, float, int);
addTransOffsetLocal(al::LiveActor*, sead::Vector3<float> const&);
addTransOffsetLocalDir(al::LiveActor*, float, int);
rotateQuatXDirDegree(al::LiveActor*, float);
rotateQuatXDirDegree(al::LiveActor*, sead::Quat<float> const&, float);
rotateQuatYDirDegree(al::LiveActor*, float);
rotateQuatYDirDegree(al::LiveActor*, sead::Quat<float> const&, float);
rotateQuatZDirDegree(al::LiveActor*, float);
rotateQuatZDirDegree(al::LiveActor*, sead::Quat<float> const&, float);
rotateQuatLocalDirDegree(al::LiveActor*, int, float);
rotateQuatLocalDirDegree(al::LiveActor*, sead::Quat<float> const&, int, float);
rotateQuatYDirRandomDegree(al::LiveActor*);
rotateQuatYDirRandomDegree(al::LiveActor*, sead::Quat<float> const&);
turnQuatFrontToDirDegreeH(al::LiveActor*, sead::Vector3<float> const&, float);
turnQuatFrontToPosDegreeH(al::LiveActor*, sead::Vector3<float> const&, float);
turnQuatFrontFromPosDegreeH(al::LiveActor*, sead::Vector3<float> const&, float);
turnFront(al::LiveActor*, float);
turnFront(al::LiveActor*, sead::Vector3<float> const&, float);
turnFrontToPos(al::LiveActor*, sead::Vector3<float> const&, float);
turnFrontToDir(al::LiveActor*, sead::Vector3<float> const&, float);
turnFrontToDirGetIsFinished(al::LiveActor*, sead::Vector3<float> const&, float);
turnDirectionDegree(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float> const&, float);
turnFrontToTarget(al::LiveActor*, al::LiveActor const*, float);
turnFrontFromTarget(al::LiveActor*, al::LiveActor const*, float);
turnFrontToPlayer(al::LiveActor*, float);
turnFrontFromPlayer(al::LiveActor*, float);
turnDirection(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float> const&, float);
turnDirectionToTarget(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float> const&, float);
turnDirectionToTargetDegree(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float> const&, float);
turnDirectionFromTargetDegree(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float> const&, float);
turnDirectionAlongGround(al::LiveActor const*, sead::Vector3<float>*);
turnDirectionAlongGround(al::LiveActor*);
turnToDirectionAxis(al::LiveActor*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
turnFrontSpherical(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float> const&, float);
turnFrontSphericalToTarget(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float> const&, float);
turnFrontSphericalToTargetDegree(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float> const&, float);
turnToDirection(al::LiveActor*, sead::Vector3<float> const&, float);
turnLocalDirToDirection(al::LiveActor*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
turnToTarget(al::LiveActor*, sead::Vector3<float> const&, float);
turnToTarget(al::LiveActor*, al::LiveActor const*, float);
faceToDirection(al::LiveActor*, sead::Vector3<float> const&);
faceToDirectionSupportUp(al::LiveActor*, sead::Vector3<float> const&);
faceToTarget(al::LiveActor*, sead::Vector3<float> const&);
faceToTarget(al::LiveActor*, al::LiveActor const*);
faceToSensor(al::LiveActor*, al::HitSensor const*);
faceToVelocity(al::LiveActor*);
calcDirClockwiseToDir(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
calcDirClockwiseToPos(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
calcDirToActorH(sead::Vector3<float>*, al::LiveActor const*, al::LiveActor const*);
calcDirToActorH(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
calcAngleToTargetH(al::LiveActor const*, sead::Vector3<float> const&);
calcAngleToTargetV(al::LiveActor const*, sead::Vector3<float> const&);
isFaceToTargetDegree(al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isFaceToTargetDegree(al::LiveActor const*, sead::Vector3<float> const&, float);
isFaceToTargetDegreeHV(al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
isFaceToTargetDegreeH(al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isInSightCone(al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
isInSightConeTarget(al::LiveActor const*, al::LiveActor const*, float, float);
isInSightConePlayer(al::LiveActor const*, float, float);
isInSightFan(al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float);
isInSightFanTarget(al::LiveActor const*, al::LiveActor const*, float, float, float);
isInSightBox(al::LiveActor const*, sead::Vector3<float> const&, sead::BoundBox3<float> const&);
walkAndTurnToDirection(al::LiveActor*, sead::Vector3<float> const&, float, float, float, float, bool);
walkAndTurnToDirection(al::LiveActor*, sead::Vector3<float>*, sead::Vector3<float> const&, float, float, float, float, bool);
walkAndTurnPoseToDirection(al::LiveActor*, sead::Vector3<float> const&, al::ActorParamMove const&, bool);
walkAndTurnToTarget(al::LiveActor*, sead::Vector3<float> const&, float, float, float, float, bool);
flyAndTurnToDirection(al::LiveActor*, sead::Vector3<float>*, sead::Vector3<float> const&, float, float, float, float);
flyAndTurnToDirection(al::LiveActor*, sead::Vector3<float> const&, float, float, float, float);
flyAndTurnToTarget(al::LiveActor*, sead::Vector3<float> const&, float, float, float, float);
walkAndTurnToDirectionFittedGroundGravity(al::LiveActor*, sead::Vector3<float>*, sead::Vector3<float> const&, float, float, float, float, bool);
walkAndTurnToDirectionFittedGroundGravity(al::LiveActor*, sead::Vector3<float> const&, float, float, float, float, bool);
walkAndTurnToTargetFittedGroundGravity(al::LiveActor*, sead::Vector3<float> const&, float, float, float, float, bool);
tryKillByDeathArea(al::LiveActor*);
rotateAndKeepColliderPosRate(al::LiveActor*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcSpringMovement(al::LiveActor*, sead::Vector3<float> const&, float, float, sead::Vector3<float> const&, float, float);
addVelocityClockwiseToPlayer(al::LiveActor*, float);
calcDirClockwiseToPlayer(sead::Vector3<float>*, al::LiveActor const*);
flyAndTurnToPlayer(al::LiveActor*, al::ActorParamMove const&);
escapeFromPlayer(al::LiveActor*, float, float, float, float);
escapeFromPlayer(al::LiveActor*, sead::Vector3<float>*, float, float, float, float);
walkAndTurnToPlayer(al::LiveActor*, float, float, float, float, bool);
isPlayerInSightFan(al::LiveActor const*, float, float, float);
isFallOrDamageCodeNextMove(al::LiveActor const*, sead::Vector3<float> const&, float, float);
isFallNextMove(al::LiveActor const*, sead::Vector3<float> const&, float, float);
findActorParamF32(al::LiveActor const*, char const*);
findActorParamS32(al::LiveActor const*, char const*);
findActorParamMove(al::LiveActor const*, char const*);
findActorParamJump(al::LiveActor const*, char const*);
findActorParamSight(al::LiveActor const*, char const*);
findActorParamRebound(al::LiveActor const*, char const*);
setActorParamMove(al::ActorParamMove*, float, float, float, float);
initActorPoseT(al::LiveActor*, sead::Vector3<float> const&);
setTrans(al::LiveActor*, sead::Vector3<float> const&);
initActorPoseTR(al::LiveActor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
setRotate(al::LiveActor*, sead::Vector3<float> const&);
makeMtxSRT(sead::Matrix34<float>*, al::LiveActor const*);
makeMtxRT(sead::Matrix34<float>*, al::LiveActor const*);
makeMtxR(sead::Matrix34<float>*, al::LiveActor const*);
calcAnimFrontGravityPos(al::LiveActor*, sead::Vector3<float> const&);
getGravity(al::LiveActor const*);
getTrans(al::LiveActor const*);
getScale(al::LiveActor const*);
copyPose(al::LiveActor*, al::LiveActor const*);
updatePoseTrans(al::LiveActor*, sead::Vector3<float> const&);
updatePoseRotate(al::LiveActor*, sead::Vector3<float> const&);
updatePoseQuat(al::LiveActor*, sead::Quat<float> const&);
updatePoseMtx(al::LiveActor*, sead::Matrix34<float> const*);
calcSideDir(sead::Vector3<float>*, al::LiveActor const*);
calcLeftDir(sead::Vector3<float>*, al::LiveActor const*);
calcRightDir(sead::Vector3<float>*, al::LiveActor const*);
calcUpDir(sead::Vector3<float>*, al::LiveActor const*);
calcDownDir(sead::Vector3<float>*, al::LiveActor const*);
calcFrontDir(sead::Vector3<float>*, al::LiveActor const*);
calcBackDir(sead::Vector3<float>*, al::LiveActor const*);
calcPoseDir(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*);
calcQuat(sead::Quat<float>*, al::LiveActor const*);
calcDistanceSignLocalXDir(al::LiveActor const*, sead::Vector3<float> const&);
calcDistanceSignLocalYDir(al::LiveActor const*, sead::Vector3<float> const&);
calcDistanceSignLocalZDir(al::LiveActor const*, sead::Vector3<float> const&);
calcDistanceLocalXDir(al::LiveActor const*, sead::Vector3<float> const&);
calcDistanceLocalYDir(al::LiveActor const*, sead::Vector3<float> const&);
calcDistanceLocalZDir(al::LiveActor const*, sead::Vector3<float> const&);
getTransPtr(al::LiveActor*);
setTrans(al::LiveActor*, float, float, float);
setTransX(al::LiveActor*, float);
setTransY(al::LiveActor*, float);
setTransZ(al::LiveActor*, float);
getRotate(al::LiveActor const*);
getRotatePtr(al::LiveActor*);
setRotate(al::LiveActor*, float, float, float);
setRotateX(al::LiveActor*, float);
setRotateY(al::LiveActor*, float);
setRotateZ(al::LiveActor*, float);
getScalePtr(al::LiveActor*);
tryGetScalePtr(al::LiveActor*);
getScaleX(al::LiveActor const*);
getScaleY(al::LiveActor const*);
getScaleZ(al::LiveActor const*);
setScale(al::LiveActor*, sead::Vector3<float> const&);
setScale(al::LiveActor*, float, float, float);
setScaleAll(al::LiveActor*, float);
setScaleX(al::LiveActor*, float);
setScaleY(al::LiveActor*, float);
setScaleZ(al::LiveActor*, float);
isFrontTarget(al::LiveActor const*, sead::Vector3<float> const&);
isFrontDir(al::LiveActor const*, sead::Vector3<float> const&);
isBackTarget(al::LiveActor const*, sead::Vector3<float> const&);
isBackDir(al::LiveActor const*, sead::Vector3<float> const&);
isLeftTarget(al::LiveActor const*, sead::Vector3<float> const&);
isLeftDir(al::LiveActor const*, sead::Vector3<float> const&);
isRightTarget(al::LiveActor const*, sead::Vector3<float> const&);
isRightDir(al::LiveActor const*, sead::Vector3<float> const&);
isUpTarget(al::LiveActor const*, sead::Vector3<float> const&);
isUpDir(al::LiveActor const*, sead::Vector3<float> const&);
isDownTarget(al::LiveActor const*, sead::Vector3<float> const&);
isDownDir(al::LiveActor const*, sead::Vector3<float> const&);
getQuat(al::LiveActor const*);
getQuatPtr(al::LiveActor*);
tryGetQuatPtr(al::LiveActor*);
setQuat(al::LiveActor*, sead::Quat<float> const&);
getGravityPtr(al::LiveActor const*);
setGravity(al::LiveActor const*, sead::Vector3<float> const&);
getFront(al::LiveActor const*);
getFrontPtr(al::LiveActor*);
setFront(al::LiveActor*, sead::Vector3<float> const&);
getUp(al::LiveActor const*);
getUpPtr(al::LiveActor*);
setUp(al::LiveActor*, sead::Vector3<float> const&);
multVecPoseNoTrans(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
multVecPose(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
multVecPoseAndScale(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
multVecInvPose(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
multVecInvQuat(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
multMtxInvPose(sead::Matrix34<float>*, al::LiveActor const*, sead::Matrix34<float> const&);
calcTransLocalOffset(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
isExistModelResource(al::LiveActor const*);
isExistAnimResource(al::LiveActor const*);
tryGetAnimResource(al::LiveActor const*);
isExistModelResourceYaml(al::LiveActor const*, char const*, char const*);
getModelResource(al::LiveActor const*);
isExistAnimResourceYaml(al::LiveActor const*, char const*, char const*);
getAnimResource(al::LiveActor const*);
isExistModelOrAnimResourceYaml(al::LiveActor const*, char const*, char const*);
getModelResourceYaml(al::LiveActor const*, char const*, char const*);
getAnimResourceYaml(al::LiveActor const*, char const*, char const*);
getModelOrAnimResourceYaml(al::LiveActor const*, char const*, char const*);
getMapPartsResourceYaml(al::ActorInitInfo const&, char const*);
tryGetMapPartsResourceYaml(al::ActorInitInfo const&, char const*);
tryMakeInitFileName(sead::BufferedSafeStringBase<char>*, al::Resource const*, char const*, char const*, char const*);
tryGetSuffixIter(al::ByamlIter*, al::Resource const*, char const*, char const*);
tryGetInitFileIterAndName(al::ByamlIter*, sead::BufferedSafeStringBase<char>*, al::Resource const*, char const*, char const*, char const*);
tryGetActorInitFileIterAndName(al::ByamlIter*, sead::BufferedSafeStringBase<char>*, al::Resource const*, char const*, char const*);
tryGetActorInitFileIter(al::ByamlIter*, al::Resource const*, char const*, char const*);
tryGetActorInitFileIterAndName(al::ByamlIter*, sead::BufferedSafeStringBase<char>*, al::LiveActor const*, char const*, char const*);
tryGetActorInitFileIter(al::ByamlIter*, al::LiveActor const*, char const*, char const*);
tryGetActorInitFileName(sead::BufferedSafeStringBase<char>*, al::Resource const*, char const*, char const*);
tryGetActorInitFileName(sead::BufferedSafeStringBase<char>*, al::ActorResource const*, char const*, char const*);
tryGetActorInitFileName(sead::BufferedSafeStringBase<char>*, al::LiveActor const*, char const*, char const*);
tryGetActorInitFileSuffixName(sead::BufferedSafeStringBase<char>*, al::Resource const*, char const*, char const*);
tryGetActorInitFileSuffixName(sead::BufferedSafeStringBase<char>*, al::LiveActor const*, char const*, char const*);
tryGetActorInitFileSuffixName(al::LiveActor const*, char const*, char const*);
tryGetActorInitFileSuffixName(al::Resource const*, char const*, char const*);
initParameterIoAsActorInfo(al::ParameterIo*, al::LiveActor const*, char const*, char const*);
initParameterIoAndLoad(al::ParameterIo*, al::LiveActor const*, char const*, char const*);
stopScene(al::LiveActor const*, int, int);
isStopScene(al::LiveActor const*);
stopScene(al::SceneStopCtrl*, int, int);
isStopScene(al::SceneStopCtrl*);
requestCaptureScreenCover(al::LiveActor const*, int);
requestStartDemo(al::LiveActor const*, char const*);
requestEndDemo(al::LiveActor const*, char const*);
addDemoActor(al::LiveActor*);
addHitSensorPlayer(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensor(al::LiveActor*, al::ActorInitInfo const&, char const*, unsigned int, float, unsigned short, sead::Vector3<float> const&);
addHitSensorPlayerAttack(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorPlayerEye(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorEnemy(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorEnemyBody(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorEnemyAttack(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorMapObj(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorBindable(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorBindableGoal(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorBindableAllPlayer(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorBindableBubbleOutScreen(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorBindableKoura(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorBindableRouteDokan(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorBindableBubblePadInput(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorCollisionParts(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
addHitSensorEye(al::LiveActor*, al::ActorInitInfo const&, char const*, float, unsigned short, sead::Vector3<float> const&);
setHitSensorSort(al::LiveActor*, char const*, al::SensorSortCmpFuncBase const*);
setHitSensorPosPtr(al::LiveActor*, char const*, sead::Vector3<float> const*);
getHitSensor(al::LiveActor const*, char const*);
setHitSensorMtxPtr(al::LiveActor*, char const*, sead::Matrix34<float> const*);
setHitSensorJointMtx(al::LiveActor*, char const*, char const*);
setSensorRadius(al::LiveActor*, char const*, float);
setSensorRadius(al::LiveActor*, float);
getSensorRadius(al::LiveActor const*, char const*);
getSensorRadius(al::LiveActor const*);
getSensorPos(al::LiveActor const*, char const*);
getSensorPos(al::LiveActor const*);
setSensorFollowPosOffset(al::LiveActor*, char const*, sead::Vector3<float> const&);
setSensorFollowPosOffset(al::LiveActor*, sead::Vector3<float> const&);
getSensorFollowPosOffset(al::LiveActor const*, char const*);
getSensorFollowPosOffset(al::LiveActor const*);
createActorSensorController(al::LiveActor*, char const*);
setSensorRadius(al::ActorSensorController*, float);
setSensorScale(al::ActorSensorController*, float);
setSensorFollowPosOffset(al::ActorSensorController*, sead::Vector3<float> const&);
getOriginalSensorRadius(al::ActorSensorController const*);
getOriginalSensorFollowPosOffset(al::ActorSensorController const*);
resetActorSensorController(al::ActorSensorController*);
calcPosBetweenSensors(sead::Vector3<float>*, al::HitSensor const*, al::HitSensor const*, float);
calcDistance(al::HitSensor const*, al::HitSensor const*);
getSensorPos(al::HitSensor const*);
calcDistanceV(sead::Vector3<float> const&, al::HitSensor const*, al::HitSensor const*);
calcDistanceH(sead::Vector3<float> const&, al::HitSensor const*, al::HitSensor const*);
calcDirBetweenSensors(sead::Vector3<float>*, al::HitSensor const*, al::HitSensor const*);
calcDirBetweenSensorsH(sead::Vector3<float>*, al::HitSensor const*, al::HitSensor const*);
calcDirBetweenSensorsNormal(sead::Vector3<float>*, al::HitSensor const*, al::HitSensor const*, sead::Vector3<float>);
calcVecBetweenSensors(sead::Vector3<float>*, al::HitSensor const*, al::HitSensor const*);
calcVecBetweenSensorsH(sead::Vector3<float>*, al::HitSensor const*, al::HitSensor const*);
calcVecBetweenSensorsNormal(sead::Vector3<float>*, al::HitSensor const*, al::HitSensor const*, sead::Vector3<float>);
calcStrikeArrowCollideWallAndCeilingBetweenAttackSensor(al::LiveActor const*, al::HitSensor const*, al::HitSensor const*, sead::Vector3<float> const&, float);
getSensorHost(al::HitSensor const*);
isFaceBetweenSensors(sead::Vector3<float> const&, al::HitSensor const*, al::HitSensor const*);
isFaceBetweenSensorsH(sead::Vector3<float> const&, al::HitSensor const*, al::HitSensor const*);
isEnableLookAtTargetSensor(al::HitSensor const*, sead::Vector3<float> const&, float);
isSensorValid(al::HitSensor const*);
isHitBoxSensor(al::HitSensor const*, sead::Vector3<float> const&, sead::BoundBox3<float> const&);
getSensorRadius(al::HitSensor const*);
isHitBoxSensor(al::HitSensor const*, sead::Matrix34<float> const&, sead::BoundBox3<float> const&);
isHitCylinderSensor(al::HitSensor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isHitCylinderSensor(al::HitSensor const*, al::HitSensor const*, sead::Vector3<float> const&, float);
isHitCylinderSensor(sead::Vector3<float>*, sead::Vector3<float>*, al::HitSensor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isHitCylinderSensor(sead::Vector3<float>*, sead::Vector3<float>*, al::HitSensor const*, al::HitSensor const*, sead::Vector3<float> const&, float);
isHitCylinderSensorHeight(al::HitSensor const*, al::HitSensor const*, sead::Vector3<float> const&, float, float);
isHitCircleSensor(sead::Vector3<float>*, sead::Vector3<float>*, al::HitSensor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
isHitCircleSensor(sead::Vector3<float>*, sead::Vector3<float>*, al::HitSensor const*, al::HitSensor const*, sead::Vector3<float> const&, float, float);
isHitCircleSensor(al::HitSensor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
isHitCircleSensor(al::HitSensor const*, al::HitSensor const*, sead::Vector3<float> const&, float, float);
isHitPlaneSensor(al::HitSensor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isHitPlaneSensor(al::HitSensor const*, al::HitSensor const*, sead::Vector3<float> const&, float);
getActorTrans(al::HitSensor const*);
getActorVelocity(al::HitSensor const*);
getActorGravity(al::HitSensor const*);
isSensorName(al::HitSensor const*, char const*);
isSensorHostName(al::HitSensor const*, char const*);
isSensorHost(al::HitSensor const*, al::LiveActor const*);
validateHitSensors(al::LiveActor*);
invalidateHitSensors(al::LiveActor*);
isSensorValid(al::LiveActor const*, char const*);
validateHitSensor(al::LiveActor*, char const*);
invalidateHitSensor(al::LiveActor*, char const*);
validateHitSensorBindableAll(al::LiveActor*);
isSensorBindableAll(al::HitSensor const*);
validateHitSensorEnemyAll(al::LiveActor*);
isSensorEnemy(al::HitSensor const*);
validateHitSensorEnemyAttackAll(al::LiveActor*);
isSensorEnemyAttack(al::HitSensor const*);
validateHitSensorEnemyBodyAll(al::LiveActor*);
isSensorEnemyBody(al::HitSensor const*);
validateHitSensorEyeAll(al::LiveActor*);
isSensorEye(al::HitSensor const*);
validateHitSensorMapObjAll(al::LiveActor*);
isSensorMapObj(al::HitSensor const*);
validateHitSensorNpcAll(al::LiveActor*);
isSensorNpc(al::HitSensor const*);
validateHitSensorPlayerAll(al::LiveActor*);
isSensorPlayerAll(al::HitSensor const*);
validateHitSensorRideAll(al::LiveActor*);
isSensorRide(al::HitSensor const*);
invalidateHitSensorEyeAll(al::LiveActor*);
invalidateHitSensorPlayerAll(al::LiveActor*);
invalidateHitSensorPlayerAttackAll(al::LiveActor*);
isSensorPlayerAttack(al::HitSensor const*);
sendMsgPlayerAttackTrample(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerTrampleReflect(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerReflectOrTrample(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerHipDrop(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerObjHipDrop(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerObjHipDropReflect(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerObjHipDropHighJump(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerHipDropKnockDown(al::HitSensor*, al::HitSensor*);
sendMsgPlayerStatueDrop(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerObjStatueDrop(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerObjStatueDropReflect(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerObjStatueDropReflectNoCondition(al::HitSensor*, al::HitSensor*);
sendMsgPlayerStatueTouch(al::HitSensor*, al::HitSensor*);
sendMsgPlayerUpperPunch(al::HitSensor*, al::HitSensor*);
sendMsgPlayerObjUpperPunch(al::HitSensor*, al::HitSensor*);
sendMsgPlayerRollingAttack(al::HitSensor*, al::HitSensor*);
sendMsgPlayerRollingReflect(al::HitSensor*, al::HitSensor*);
sendMsgPlayerObjRollingAttack(al::HitSensor*, al::HitSensor*);
sendMsgPlayerObjRollingAttackFailure(al::HitSensor*, al::HitSensor*);
sendMsgPlayerInvincibleAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerFireBallAttack(al::HitSensor*, al::HitSensor*);
sendMsgPlayerRouteDokanFireBallAttack(al::HitSensor*, al::HitSensor*);
sendMsgPlayerTailAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerTouch(al::HitSensor*, al::HitSensor*);
sendMsgPlayerKick(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCatch(al::HitSensor*, al::HitSensor*);
sendMsgPlayerSlidingAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerBoomerangAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerBoomerangAttackCollide(al::HitSensor*, al::HitSensor*);
sendMsgPlayerBoomerangReflect(al::HitSensor*, al::HitSensor*);
sendMsgPlayerBoomerangBreak(al::HitSensor*, al::HitSensor*);
sendMsgPlayerBodyAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerBodyLanding(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerBodyAttackReflect(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerClimbAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerSpinAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerGiantAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerCooperationHipDrop(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerClimbSlidingAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerClimbRollingAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerGiantHipDrop(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerDisregard(al::HitSensor*, al::HitSensor*);
sendMsgPlayerItemGet(al::HitSensor*, al::HitSensor*);
sendMsgPlayerPutOnEquipment(al::HitSensor*, al::HitSensor*);
sendMsgPlayerReleaseEquipment(al::HitSensor*, al::HitSensor*);
sendMsgPlayerReleaseEquipmentGoal(al::HitSensor*, al::HitSensor*, unsigned int);
sendMsgPlayerFloorTouch(al::HitSensor*, al::HitSensor*);
sendMsgPlayerDamageTouch(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCarryFront(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCarryFrontWallKeep(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCarryUp(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCarryKeepDemo(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCarryWarp(al::HitSensor*, al::HitSensor*);
sendMsgPlayerLeave(al::HitSensor*, al::HitSensor*);
sendMsgPlayerRelease(al::HitSensor*, al::HitSensor*);
sendMsgPlayerReleaseBySwing(al::HitSensor*, al::HitSensor*);
sendMsgPlayerReleaseDamage(al::HitSensor*, al::HitSensor*);
sendMsgPlayerReleaseDead(al::HitSensor*, al::HitSensor*);
sendMsgPlayerReleaseDemo(al::HitSensor*, al::HitSensor*);
sendMsgPlayerToss(al::HitSensor*, al::HitSensor*);
sendMsgPlayerInvincibleTouch(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgEnemyAttack(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttackBoomerang(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttackFire(al::HitSensor*, al::HitSensor*, char const*);
sendMsgEnemyAttackNeedle(al::HitSensor*, al::HitSensor*);
sendMsgEnemyFloorTouch(al::HitSensor*, al::HitSensor*);
sendMsgEnemyItemGet(al::HitSensor*, al::HitSensor*);
sendMsgEnemyRouteDokanAttack(al::HitSensor*, al::HitSensor*);
sendMsgEnemyRouteDokanFire(al::HitSensor*, al::HitSensor*);
sendMsgEnemyTouch(al::HitSensor*, al::HitSensor*);
sendMsgEnemyUpperPunch(al::HitSensor*, al::HitSensor*);
sendMsgEnemyTrample(al::HitSensor*, al::HitSensor*);
sendMsgMapObjTrample(al::HitSensor*, al::HitSensor*);
sendMsgPressureDeath(al::HitSensor*, al::HitSensor*);
sendMsgNpcTouch(al::HitSensor*, al::HitSensor*);
sendMsgExplosion(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgExplosionCollide(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPush(al::HitSensor*, al::HitSensor*);
sendMsgPushStrong(al::HitSensor*, al::HitSensor*);
sendMsgPushVeryStrong(al::HitSensor*, al::HitSensor*);
sendMsgHit(al::HitSensor*, al::HitSensor*);
sendMsgHitStrong(al::HitSensor*, al::HitSensor*);
sendMsgHitVeryStrong(al::HitSensor*, al::HitSensor*);
sendMsgKnockDown(al::HitSensor*, al::HitSensor*);
sendMsgMapPush(al::HitSensor*, al::HitSensor*);
sendMsgVanish(al::HitSensor*, al::HitSensor*);
sendMsgChangeAlpha(al::LiveActor*, float);
sendMsgShowModel(al::HitSensor*, al::HitSensor*);
sendMsgHideModel(al::HitSensor*, al::HitSensor*);
sendMsgRestart(al::HitSensor*, al::HitSensor*);
sendMsgNeedleBallAttack(al::HitSensor*, al::HitSensor*);
sendMsgPunpunFloorTouch(al::HitSensor*, al::HitSensor*);
sendMsgInvalidateFootPrint(al::HitSensor*, al::HitSensor*);
sendMsgKickKouraAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgKickKouraAttackCollide(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgKickKouraGetItem(al::HitSensor*, al::HitSensor*);
sendMsgKickKouraReflect(al::HitSensor*, al::HitSensor*);
sendMsgKickKouraCollideNoReflect(al::HitSensor*, al::HitSensor*);
sendMsgKickKouraBreak(al::HitSensor*, al::HitSensor*);
sendMsgKickKouraBlow(al::HitSensor*, al::HitSensor*);
sendMsgKickStoneAttack(al::HitSensor*, al::HitSensor*);
sendMsgKickStoneAttackCollide(al::HitSensor*, al::HitSensor*);
sendMsgKickStoneAttackHold(al::HitSensor*, al::HitSensor*);
sendMsgKickStoneAttackReflect(al::HitSensor*, al::HitSensor*);
sendMsgKickStoneTrample(al::HitSensor*, al::HitSensor*);
sendMsgKillerAttack(al::HitSensor*, al::HitSensor*);
sendMsgLiftGeyser(al::HitSensor*, al::HitSensor*);
sendMsgWarpStart(al::HitSensor*, al::HitSensor*);
sendMsgWarpEnd(al::HitSensor*, al::HitSensor*);
sendMsgHoldCancel(al::HitSensor*, al::HitSensor*);
sendMsgHoleIn(al::HitSensor*, al::HitSensor*);
sendMsgJumpInhibit(al::HitSensor*, al::HitSensor*);
sendMsgGoalKill(al::HitSensor*, al::HitSensor*);
sendMsgGoal(al::HitSensor*, al::HitSensor*);
sendMsgBindStart(al::HitSensor*, al::HitSensor*);
sendMsgBindInit(al::HitSensor*, al::HitSensor*, unsigned int);
sendMsgBindEnd(al::HitSensor*, al::HitSensor*);
sendMsgBindCancel(al::HitSensor*, al::HitSensor*);
sendMsgBindCancelByDemo(al::HitSensor*, al::HitSensor*);
sendMsgBindDamage(al::HitSensor*, al::HitSensor*);
sendMsgBindSteal(al::HitSensor*, al::HitSensor*);
sendMsgBindGiant(al::HitSensor*, al::HitSensor*);
sendMsgBallAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgBallRouteDokanAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgBallAttackHold(al::HitSensor*, al::HitSensor*);
sendMsgBallAttackDRCHold(al::HitSensor*, al::HitSensor*);
sendMsgBallAttackCollide(al::HitSensor*, al::HitSensor*);
sendMsgBallTrample(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgBallTrampleCollide(al::HitSensor*, al::HitSensor*);
sendMsgBallItemGet(al::HitSensor*, al::HitSensor*);
sendMsgFireBalCollide(al::HitSensor*, al::HitSensor*);
sendMsgFireBallFloorTouch(al::HitSensor*, al::HitSensor*);
sendMsgDokanBazookaAttack(al::HitSensor*, al::HitSensor*);
sendMsgRideAllPlayerItemGet(al::HitSensor*, al::HitSensor*);
sendMsgHideModel(al::LiveActor*);
sendMsgShowModel(al::LiveActor*);
sendMsgRestart(al::LiveActor*);
sendMsgCollisionImpulse(al::HitSensor*, al::HitSensor*, sead::Vector3<float>*, sead::Vector3<float> const&, float, sead::Vector3<float> const&, float);
sendMsgSwitchOn(al::LiveActor*);
sendMsgSwitchOnInit(al::LiveActor*);
sendMsgSwitchOffInit(al::LiveActor*);
sendMsgSwitchKillOn(al::LiveActor*);
sendMsgSwitchKillOnInit(al::LiveActor*);
sendMsgSwitchKillOffInit(al::LiveActor*);
sendMsgPlayerFloorTouchToColliderGround(al::LiveActor*, al::HitSensor*);
sendMsgPlayerUpperPunchToColliderCeiling(al::LiveActor*, al::HitSensor*);
sendMsgEnemyFloorTouchToColliderGround(al::LiveActor*, al::HitSensor*);
sendMsgEnemyUpperPunchToColliderCeiling(al::LiveActor*, al::HitSensor*);
sendMsgAskSafetyPoint(al::HitSensor*, al::HitSensor*, sead::Vector3<float>**);
sendMsgAskSafetyPointToColliderGround(al::LiveActor*, al::HitSensor*, sead::Vector3<float>**);
sendMsgTouchAssist(al::HitSensor*, al::HitSensor*);
sendMsgTouchAssistTrig(al::HitSensor*, al::HitSensor*);
sendMsgTouchStroke(al::HitSensor*, al::HitSensor*);
sendMsgScreenPointInvalidCollisionParts(al::HitSensor*, al::HitSensor*);
sendMsgBlockUpperPunch(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgBlockLowerPunch(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgBlockItemGet(al::HitSensor*, al::HitSensor*);
sendMsgKillerItemGet(al::HitSensor*, al::HitSensor*);
sendMsgPlayerKouraAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgLightFlash(al::HitSensor*, al::HitSensor*);
sendMsgForceAbyss(al::HitSensor*, al::HitSensor*);
sendMsgIsNerveSupportFreeze(al::HitSensor*, al::HitSensor*);
sendMsgOnSyncSupportFreeze(al::HitSensor*, al::HitSensor*);
sendMsgOffSyncSupportFreeze(al::HitSensor*, al::HitSensor*);
sendMsgSwordAttackHighLeft(al::HitSensor*, al::HitSensor*);
sendMsgSwordAttackLowLeft(al::HitSensor*, al::HitSensor*);
sendMsgSwordAttackHighRight(al::HitSensor*, al::HitSensor*);
sendMsgSwordAttackLowRight(al::HitSensor*, al::HitSensor*);
sendMsgSwordAttackJumpUnder(al::HitSensor*, al::HitSensor*);
sendMsgSwordBeamAttack(al::HitSensor*, al::HitSensor*);
sendMsgSwordBeamReflectAttack(al::HitSensor*, al::HitSensor*);
sendMsgShieldGuard(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttackKnockDown(al::HitSensor*, al::HitSensor*);
sendMsgAskMultiPlayerEnemy(al::HitSensor*, al::HitSensor*);
sendMsgItemGettable(al::HitSensor*, al::HitSensor*);
sendMsgKikkiThrow(al::HitSensor*, al::HitSensor*);
sendMsgIsKikkiThrowTarget(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCloudGet(al::HitSensor*, al::HitSensor*);
sendMsgAutoJump(al::HitSensor*, al::HitSensor*);
sendMsgPlayerTouchShadow(al::HitSensor*, al::HitSensor*);
sendMsgPlayerPullOutShadow(al::HitSensor*, al::HitSensor*);
sendMsgPlayerAttackShadow(al::HitSensor*, al::HitSensor*);
sendMsgPlayerAttackShadowStrong(al::HitSensor*, al::HitSensor*);
sendMsgPlayerAttackChangePos(al::HitSensor*, al::HitSensor*, sead::Vector3<float>*);
sendMsgAtmosOnlineLight(al::HitSensor*, al::HitSensor*);
sendMsgLightBurn(al::HitSensor*, al::HitSensor*);
sendMsgMoonLightBurn(al::HitSensor*, al::HitSensor*);
sendMsgString(al::HitSensor*, al::HitSensor*, char const*);
sendMsgStringV4fPtr(al::HitSensor*, al::HitSensor*, char const*, sead::Vector4<float>*);
sendMsgStringV4fSensorPtr(al::HitSensor*, al::HitSensor*, char const*, sead::Vector4<float>*);
sendMsgStringVoidPtr(al::HitSensor*, al::HitSensor*, char const*, void*);
isMsgPushAll(al::SensorMsg const*);
isMsgPush(al::SensorMsg const*);
isMsgPushStrong(al::SensorMsg const*);
isMsgPushVeryStrong(al::SensorMsg const*);
isMsgHoldReleaseAll(al::SensorMsg const*);
isMsgHoldCancel(al::SensorMsg const*);
isMsgPlayerRelease(al::SensorMsg const*);
isMsgPlayerReleaseBySwing(al::SensorMsg const*);
isMsgPlayerReleaseDead(al::SensorMsg const*);
isMsgPlayerReleaseDamage(al::SensorMsg const*);
isMsgPlayerReleaseDemo(al::SensorMsg const*);
isMsgItemGetDirectAll(al::SensorMsg const*);
isMsgPlayerItemGet(al::SensorMsg const*);
isMsgRideAllPlayerItemGet(al::SensorMsg const*);
isMsgPlayerTailAttack(al::SensorMsg const*);
isMsgItemGetByObjAll(al::SensorMsg const*);
isMsgBallItemGet(al::SensorMsg const*);
isMsgKickKouraItemGet(al::SensorMsg const*);
isMsgKillerItemGet(al::SensorMsg const*);
isMsgItemGetAll(al::SensorMsg const*);
isMsgFloorTouch(al::SensorMsg const*);
isMsgPlayerFloorTouch(al::SensorMsg const*);
isMsgEnemyFloorTouch(al::SensorMsg const*);
isMsgUpperPunch(al::SensorMsg const*);
isMsgPlayerUpperPunch(al::SensorMsg const*);
isMsgEnemyUpperPunch(al::SensorMsg const*);
isMsgPlayerTrample(al::SensorMsg const*);
isMsgPlayerTrampleReflect(al::SensorMsg const*);
isMsgPlayerHipDropAll(al::SensorMsg const*);
isMsgPlayerStatueDrop(al::SensorMsg const*);
isMsgPlayerObjHipDropAll(al::SensorMsg const*);
isMsgPlayerObjStatueDrop(al::SensorMsg const*);
isMsgPlayerObjHipDropReflectAll(al::SensorMsg const*);
isMsgPlayerObjStatueDropReflect(al::SensorMsg const*);
isMsgPlayerObjHipDropHighJump(al::SensorMsg const*);
isMsgPlayerHipDropKnockDown(al::SensorMsg const*);
isMsgPlayerObjStatueDropReflectNoCondition(al::SensorMsg const*);
isMsgPlayerStatueTouch(al::SensorMsg const*);
isMsgPlayerObjUpperPunch(al::SensorMsg const*);
isMsgPlayerRollingAttack(al::SensorMsg const*);
isMsgPlayerRollingReflect(al::SensorMsg const*);
isMsgPlayerObjRollingAttack(al::SensorMsg const*);
isMsgPlayerObjRollingAttackFailure(al::SensorMsg const*);
isMsgPlayerInvincibleAttack(al::SensorMsg const*);
isMsgPlayerFireBallAttack(al::SensorMsg const*);
isMsgPlayerRouteDokanFireBallAttack(al::SensorMsg const*);
isMsgPlayerKick(al::SensorMsg const*);
isMsgPlayerCatch(al::SensorMsg const*);
isMsgPlayerSlidingAttack(al::SensorMsg const*);
isMsgPlayerBoomerangAttack(al::SensorMsg const*);
isMsgPlayerBoomerangAttackCollide(al::SensorMsg const*);
isMsgPlayerBoomerangReflect(al::SensorMsg const*);
isMsgPlayerBoomerangBreak(al::SensorMsg const*);
isMsgPlayerBodyAttack(al::SensorMsg const*);
isMsgPlayerBodyLanding(al::SensorMsg const*);
isMsgPlayerBodyAttackReflect(al::SensorMsg const*);
isMsgPlayerClimbAttack(al::SensorMsg const*);
isMsgPlayerSpinAttack(al::SensorMsg const*);
isMsgPlayerGiantAttack(al::SensorMsg const*);
isMsgPlayerCooperationHipDrop(al::SensorMsg const*);
isMsgPlayerClimbSlidingAttack(al::SensorMsg const*);
isMsgPlayerClimbRollingAttack(al::SensorMsg const*);
isMsgPlayerGiantHipDrop(al::SensorMsg const*);
isMsgPlayerDisregard(al::SensorMsg const*);
isMsgPlayerDash(al::SensorMsg const*);
isMsgPlayerDamageTouch(al::SensorMsg const*);
isMsgPlayerFloorTouchBind(al::SensorMsg const*);
isMsgPlayerTouch(al::SensorMsg const*);
isMsgPlayerInvincibleTouch(al::SensorMsg const*);
isMsgPlayerGiantTouch(al::SensorMsg const*);
isMsgPlayerObjTouch(al::SensorMsg const*);
isMsgPlayerPutOnEquipment(al::SensorMsg const*);
isMsgPlayerReleaseEquipment(al::SensorMsg const*);
isMsgPlayerReleaseEquipmentGoal(al::SensorMsg const*);
isMsgPlayerCarryFront(al::SensorMsg const*);
isMsgPlayerCarryFrontWallKeep(al::SensorMsg const*);
isMsgPlayerCarryUp(al::SensorMsg const*);
isMsgPlayerCarryKeepDemo(al::SensorMsg const*);
isMsgPlayerCarryWarp(al::SensorMsg const*);
isMsgPlayerLeave(al::SensorMsg const*);
isMsgPlayerToss(al::SensorMsg const*);
isMsgEnemyAttack(al::SensorMsg const*);
isMsgEnemyAttackFire(al::SensorMsg const*);
isMsgEnemyAttackKnockDown(al::SensorMsg const*);
isMsgEnemyAttackBoomerang(al::SensorMsg const*);
isMsgEnemyAttackNeedle(al::SensorMsg const*);
isMsgEnemyItemGet(al::SensorMsg const*);
isMsgEnemyRouteDokanAttack(al::SensorMsg const*);
isMsgEnemyRouteDokanFire(al::SensorMsg const*);
isMsgExplosion(al::SensorMsg const*);
isMsgExplosionCollide(al::SensorMsg const*);
isMsgBindStart(al::SensorMsg const*);
isMsgBindInit(al::SensorMsg const*);
isMsgBindEnd(al::SensorMsg const*);
isMsgBindCancel(al::SensorMsg const*);
isMsgBindCancelByDemo(al::SensorMsg const*);
isMsgBindDamage(al::SensorMsg const*);
isMsgBindSteal(al::SensorMsg const*);
isMsgBindGiant(al::SensorMsg const*);
isMsgPressureDeath(al::SensorMsg const*);
isMsgNpcTouch(al::SensorMsg const*);
isMsgHit(al::SensorMsg const*);
isMsgHitStrong(al::SensorMsg const*);
isMsgHitVeryStrong(al::SensorMsg const*);
isMsgKnockDown(al::SensorMsg const*);
isMsgMapPush(al::SensorMsg const*);
isMsgVanish(al::SensorMsg const*);
isMsgChangeAlpha(al::SensorMsg const*);
isMsgShowModel(al::SensorMsg const*);
isMsgHideModel(al::SensorMsg const*);
isMsgRestart(al::SensorMsg const*);
isMsgEnemyTouch(al::SensorMsg const*);
isMsgEnemyTrample(al::SensorMsg const*);
isMsgMapObjTrample(al::SensorMsg const*);
isMsgNeedleBallAttack(al::SensorMsg const*);
isMsgPunpunFloorTouch(al::SensorMsg const*);
isMsgInvalidateFootPrint(al::SensorMsg const*);
isMsgKickKouraAttack(al::SensorMsg const*);
isMsgKickKouraAttackCollide(al::SensorMsg const*);
isMsgKickKouraReflect(al::SensorMsg const*);
isMsgKickKouraCollideNoReflect(al::SensorMsg const*);
isMsgKickKouraBreak(al::SensorMsg const*);
isMsgKickKouraBlow(al::SensorMsg const*);
isMsgKickStoneAttack(al::SensorMsg const*);
isMsgKickStoneAttackCollide(al::SensorMsg const*);
isMsgKickStoneAttackHold(al::SensorMsg const*);
isMsgKickStoneAttackReflect(al::SensorMsg const*);
isMsgKickStoneTrample(al::SensorMsg const*);
isMsgKillerAttack(al::SensorMsg const*);
isMsgLiftGeyser(al::SensorMsg const*);
isMsgWarpStart(al::SensorMsg const*);
isMsgWarpEnd(al::SensorMsg const*);
isMsgHoleIn(al::SensorMsg const*);
isMsgJumpInhibit(al::SensorMsg const*);
isMsgGoalKill(al::SensorMsg const*);
isMsgGoal(al::SensorMsg const*);
isMsgBallAttack(al::SensorMsg const*);
isMsgBallRouteDokanAttack(al::SensorMsg const*);
isMsgBallAttackHold(al::SensorMsg const*);
isMsgBallAttackDRCHold(al::SensorMsg const*);
isMsgBallAttackCollide(al::SensorMsg const*);
isMsgBallTrample(al::SensorMsg const*);
isMsgBallTrampleCollide(al::SensorMsg const*);
isMsgFireBallCollide(al::SensorMsg const*);
isMsgFireBallFloorTouch(al::SensorMsg const*);
isMsgDokanBazookaAttack(al::SensorMsg const*);
isMsgSwitchOn(al::SensorMsg const*);
isMsgSwitchOnInit(al::SensorMsg const*);
isMsgSwitchOffInit(al::SensorMsg const*);
isMsgSwitchKillOn(al::SensorMsg const*);
isMsgSwitchKillOnInit(al::SensorMsg const*);
isMsgSwitchKillOffInit(al::SensorMsg const*);
isMsgAskSafetyPoint(al::SensorMsg const*);
trySetAskSafetyPointFollowPos(al::SensorMsg const*, sead::Vector3<float>*);
isMsgTouchAssist(al::SensorMsg const*);
isMsgTouchAssistNoPat(al::SensorMsg const*);
isMsgTouchAssistTrig(al::SensorMsg const*);
isMsgTouchAssistTrigOff(al::SensorMsg const*);
isMsgTouchAssistTrigNoPat(al::SensorMsg const*);
isMsgTouchAssistBurn(al::SensorMsg const*);
isMsgTouchAssistAll(al::SensorMsg const*);
isMsgTouchCarryItem(al::SensorMsg const*);
isMsgTouchReleaseItem(al::SensorMsg const*);
isMsgTouchStroke(al::SensorMsg const*);
isMsgIsNerveSupportFreeze(al::SensorMsg const*);
isMsgOnSyncSupportFreeze(al::SensorMsg const*);
isMsgOffSyncSupportFreeze(al::SensorMsg const*);
isMsgScreenPointInvalidCollisionParts(al::SensorMsg const*);
isMsgBlockUpperPunch(al::SensorMsg const*);
isMsgBlockLowerPunch(al::SensorMsg const*);
isMsgBlockItemGet(al::SensorMsg const*);
isMsgPlayerKouraAttack(al::SensorMsg const*);
isMsgLightFlash(al::SensorMsg const*);
isMsgForceAbyss(al::SensorMsg const*);
isMsgSwordAttackHigh(al::SensorMsg const*);
isMsgSwordAttackHighLeft(al::SensorMsg const*);
isMsgSwordAttackHighRight(al::SensorMsg const*);
isMsgSwordAttackLow(al::SensorMsg const*);
isMsgSwordAttackLowLeft(al::SensorMsg const*);
isMsgSwordAttackLowRight(al::SensorMsg const*);
isMsgSwordBeamAttack(al::SensorMsg const*);
isMsgSwordBeamReflectAttack(al::SensorMsg const*);
isMsgSwordAttackJumpUnder(al::SensorMsg const*);
isMsgShieldGuard(al::SensorMsg const*);
isMsgAskMultiPlayerEnemy(al::SensorMsg const*);
isMsgItemGettable(al::SensorMsg const*);
isMsgKikkiThrow(al::SensorMsg const*);
isMsgIsKikkiThrowTarget(al::SensorMsg const*);
isMsgPlayerCloudGet(al::SensorMsg const*);
isMsgAutoJump(al::SensorMsg const*);
isMsgPlayerTouchShadow(al::SensorMsg const*);
isMsgPlayerPullOutShadow(al::SensorMsg const*);
isMsgPlayerAttackShadow(al::SensorMsg const*);
isMsgPlayerAttackShadowStrong(al::SensorMsg const*);
isMsgPlayerAttackChangePos(al::SensorMsg const*);
isMsgAtmosOnlineLight(al::SensorMsg const*);
isMsgLightBurn(al::SensorMsg const*);
isMsgMoonLightBurn(al::SensorMsg const*);
isMsgString(al::SensorMsg const*);
isMsgStringV4fPtr(al::SensorMsg const*);
isMsgStringV4fSensorPtr(al::SensorMsg const*);
isMsgStringVoidPtr(al::SensorMsg const*);
isMsgPlayerTrampleForCrossoverSensor(al::SensorMsg const*, al::HitSensor const*, al::HitSensor const*);
isMsgPlayerTrampleReflectForCrossoverSensor(al::SensorMsg const*, al::HitSensor const*, al::HitSensor const*);
isMsgPlayerUpperPunchForCrossoverSensor(al::SensorMsg const*, al::HitSensor const*, al::HitSensor const*, float);
isMsgKickStoneTrampleForCrossoverSensor(al::SensorMsg const*, al::HitSensor const*, al::HitSensor const*);
sendMsgEnemyAttackForCrossoverSensor(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttackForCrossoverCylinderSensor(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isSensorPlayer(al::HitSensor const*);
isSensorPlayerFoot(al::HitSensor const*);
isSensorPlayerDecoration(al::HitSensor const*);
isSensorPlayerEye(al::HitSensor const*);
isSensorPlayerOrPlayerWeapon(al::HitSensor const*);
isSensorCollision(al::HitSensor const*);
isSensorPlayerFireBall(al::HitSensor const*);
isSensorHoldObj(al::HitSensor const*);
isSensorLookAt(al::HitSensor const*);
isSensorBindableGoal(al::HitSensor const*);
isSensorBindableAllPlayer(al::HitSensor const*);
isSensorBindableBubbleOutScreen(al::HitSensor const*);
isSensorBindableKoura(al::HitSensor const*);
isSensorBindableRouteDokan(al::HitSensor const*);
isSensorBindableBubblePadInput(al::HitSensor const*);
isSensorBindable(al::HitSensor const*);
isSensorSimple(al::HitSensor const*);
updateHitSensorsAll(al::LiveActor*);
isMySensor(al::HitSensor const*, al::LiveActor const*);
isSensorHitAnyPlane(al::HitSensor const*, al::HitSensor const*, sead::Vector3<float> const&);
isSensorHitRingShape(al::HitSensor const*, al::HitSensor const*, float);
tryGetEnemyAttackFireMaterialCode(char const**, al::SensorMsg const*);
sendMsgPushAndKillVelocityToTarget(al::LiveActor*, al::HitSensor*, al::HitSensor*);
sendMsgPushAndKillVelocityToTargetH(al::LiveActor*, al::HitSensor*, al::HitSensor*);
pushAndAddVelocity(al::LiveActor*, al::HitSensor const*, al::HitSensor const*, float);
pushAndAddVelocityH(al::LiveActor*, al::HitSensor const*, al::HitSensor const*, float);
pushAndAddVelocityV(al::LiveActor*, al::HitSensor const*, al::HitSensor const*, float);
tryReceiveMsgPushAndAddVelocity(al::LiveActor*, al::SensorMsg const*, al::HitSensor const*, al::HitSensor const*, float);
tryReceiveMsgPushAndAddVelocityH(al::LiveActor*, al::SensorMsg const*, al::HitSensor const*, al::HitSensor const*, float);
tryReceiveMsgPushAndCalcPushTrans(sead::Vector3<float>*, al::SensorMsg const*, al::LiveActor const*, al::HitSensor const*, al::HitSensor const*, float);
sendMsgCollidePush(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
tryReceiveMsgCollidePush(sead::Vector3<float>*, al::SensorMsg const*);
getChangeAlphaValue(al::SensorMsg const*);
getBindInitType(al::SensorMsg const*);
getMsgString(al::SensorMsg const*);
getMsgStringV4fPtr(al::SensorMsg const*, sead::Vector4<float>**);
getMsgStringV4fSensorPtr(al::SensorMsg const*, sead::Vector4<float>**, al::HitSensor**);
getMsgStringVoidPtr(al::SensorMsg const*, void**);
getPlayerReleaseEquipmentGoalType(al::SensorMsg const*);
isExistSubActorKeeper(al::LiveActor const*);
getSubActor(al::LiveActor const*, char const*);
tryGetSubActor(al::LiveActor const*, char const*);
getSubActor(al::LiveActor const*, int);
getSubActorNum(al::LiveActor const*);
offSyncClippingSubActor(al::LiveActor*, al::LiveActor const*);
offSyncClippingSubActor(al::LiveActor*, char const*);
offSyncClippingSubActorAll(al::LiveActor*);
onSyncClippingSubActor(al::LiveActor*, al::LiveActor const*);
onSyncClippingSubActor(al::LiveActor*, char const*);
onSyncClippingSubActorAll(al::LiveActor*);
offSyncAppearSubActor(al::LiveActor*, al::LiveActor const*);
offSyncAppearSubActor(al::LiveActor*, char const*);
offSyncAppearSubActorAll(al::LiveActor*);
onSyncAppearSubActor(al::LiveActor*, al::LiveActor const*);
onSyncAppearSubActor(al::LiveActor*, char const*);
onSyncAppearSubActorAll(al::LiveActor*);
offSyncHideSubActor(al::LiveActor*, al::LiveActor const*);
offSyncHideSubActor(al::LiveActor*, char const*);
offSyncHideSubActorAll(al::LiveActor*);
onSyncHideSubActor(al::LiveActor*, al::LiveActor const*);
onSyncHideSubActor(al::LiveActor*, char const*);
onSyncHideSubActorAll(al::LiveActor*);
isSyncHideSubActor(al::LiveActor const*, al::LiveActor const*);
offSyncAlphaMaskSubActor(al::LiveActor*, al::LiveActor const*);
offSyncAlphaMaskSubActor(al::LiveActor*, char const*);
offSyncAlphaMaskSubActorAll(al::LiveActor*);
onSyncAlphaMaskSubActor(al::LiveActor*, al::LiveActor const*);
onSyncAlphaMaskSubActor(al::LiveActor*, char const*);
onSyncAlphaMaskSubActorAll(al::LiveActor*);
isSyncAlphaMaskSubActor(al::LiveActor const*, al::LiveActor const*);
startActionSubActor(al::LiveActor const*, char const*, char const*);
isActionEndSubActor(al::LiveActor const*, char const*);
isActionPlayingSubActor(al::LiveActor const*, char const*, char const*);
isActionOneTimeSubActor(al::LiveActor const*, char const*);
isActionOneTimeSubActor(al::LiveActor const*, char const*, char const*);
tryStartActionSubActorAll(al::LiveActor const*, char const*);
makeActorDeadSubActorAll(al::LiveActor const*);
tryValidateCollisionPartsSubActorAll(al::LiveActor*);
tryInvalidateCollisionPartsSubActorAll(al::LiveActor*);
calcChildStepCount(al::ActorInitInfo const&);
tryInitSubActorKeeperChildStep(al::LiveActor*, al::ActorInitInfo const&);
createChildStep(al::ActorInitInfo const&, al::LiveActor*, bool);
calcWorldPosFromGridIndex(sead::Vector3<float>*, sead::Matrix34<float> const&, sead::Vector3<int> const&);
calcGridIndexFromWorldPos(sead::Vector3<int>*, sead::Matrix34<float> const&, sead::Vector3<float> const&);
calcGridIndexNext(sead::Vector3<int> const&, int);
calcDegreeDirIndexSignedX(int);
calcDegreeDirIndexSignedY(int);
calcDegreeDirIndexSignedZ(int);
calcDirIndexNearXY(sead::Vector3<int> const&, sead::Vector3<int> const&);
calcDirIndexNearYZ(sead::Vector3<int> const&, sead::Vector3<int> const&);
calcDirIndexNearZX(sead::Vector3<int> const&, sead::Vector3<int> const&);
signDirIndexX(int);
signDirIndexY(int);
signDirIndexZ(int);
calcGridMinMaxFromOBB(sead::Vector3<int>*, sead::Vector3<int>*, sead::Matrix34<float> const&, sead::Matrix34<float> const&, sead::BoundBox3<float> const&);
expandGridFromOBB(sead::Vector3<int>*, sead::Vector3<int>*, sead::Matrix34<float> const&, sead::Matrix34<float> const&, sead::BoundBox3<float> const&);
calcAngleRadian(sead::Vector3<float> const&, sead::Vector3<float> const&);
calcAngleDegree(sead::Vector3<float> const&, sead::Vector3<float> const&);
calcAngleDegree(sead::Vector2<float> const&, sead::Vector2<float> const&);
isNearZero(sead::Vector2<float> const&, float);
tryCalcAngleDegree(float*, sead::Vector3<float> const&, sead::Vector3<float> const&);
isNearZero(sead::Vector3<float> const&, float);
calcAngleOnPlaneRadian(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
verticalizeVec(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcAngleOnPlaneDegree(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcAngleOnPlaneDegreeOrZero(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
tryCalcAngleOnPlaneDegree(float*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
isParallelDirection(sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcAngleSignOnPlane(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
isNearAngleRadian(sead::Vector2<float> const&, sead::Vector2<float> const&, float);
normalize(sead::Vector2<float>*, sead::Vector2<float> const&);
isNearAngleRadian(sead::Vector3<float> const&, sead::Vector3<float> const&, float);
normalize(sead::Vector3<float>*, sead::Vector3<float> const&);
isNearAngleDegree(sead::Vector2<float> const&, sead::Vector2<float> const&, float);
isNearAngleDegree(sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isNearAngleRadianHV(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
tryNormalizeOrZero(sead::Vector3<float>*, sead::Vector3<float> const&);
tryNormalizeOrZero(sead::Vector3<float>*);
isNearAngleDegreeHV(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
isInAngleOnPlaneDegreeHV(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float, float);
isNear(float, float, float);
isNear(sead::Vector2<float> const&, sead::Vector2<float> const&, float);
isNear(sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isNear(sead::Color4f const&, sead::Color4f const&, float);
isNearZero(float, float);
isNearZero(sead::Matrix34<float> const&, float);
isNearZeroOrGreater(float, float);
isNearZeroOrLess(float, float);
isExistNearZeroVal(sead::Vector3<float> const&, float);
isNormalize(sead::Vector3<float> const&, float);
isNormalize(sead::Matrix34<float> const&);
isParallelDirection(sead::Vector2<float> const&, sead::Vector2<float> const&, float);
isReverseDirection(sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isNearDirection(sead::Vector2<float> const&, sead::Vector2<float> const&, float);
isNearDirection(sead::Vector3<float> const&, sead::Vector3<float> const&, float);
isInRange(int, int, int);
isInRange(float, float, float);
normalize(sead::Vector2<float>*);
normalize(sead::Vector3<float>*);
normalize(sead::Matrix33<float>*);
normalize(sead::Matrix34<float>*);
tryNormalizeOrZero(sead::Vector2<float>*);
tryNormalizeOrZero(sead::Vector2<float>*, sead::Vector2<float> const&);
tryNormalizeOrDirZ(sead::Vector3<float>*);
tryNormalizeOrDirZ(sead::Vector3<float>*, sead::Vector3<float> const&);
normalizeComplement(sead::Matrix34<float>*);
getMaxAbsElementIndex(sead::Vector3<float> const&);
setLength(sead::Vector3<float>*, float);
setProjectionLength(sead::Vector3<float>*, sead::Vector3<float> const&, float);
limitLength(sead::Vector2<float>*, sead::Vector2<float> const&, float);
limitLength(sead::Vector3<float>*, sead::Vector3<float> const&, float);
normalizeAbs(float, float, float);
normalize(float, float, float);
normalize(int, int, int);
sign(float);
sign(int);
cubeRoot(float);
clampV3f(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
clampV2f(sead::Vector2<float>*, sead::Vector2<float> const&, sead::Vector2<float> const&);
easeIn(float);
easeOut(float);
easeInOut(float);
squareIn(float);
squareOut(float);
powerIn(float, float);
powerOut(float, float);
logarithmIn(float, float);
logarithmOut(float, float);
exponentIn(float, float);
exponentOut(float, float);
hermiteRate(float, float, float);
calcFourthOrderRate(float, float);
calcTriangleWave01(float, float);
calcTriangleWave(float, float, float, float);
lerpValue(float, float, float);
calcRate01(float, float, float);
easeByType(float, int);
lerpValue(float, float, float, float, float);
lerpDegree(float, float, float);
lerpRadian(float, float, float);
lerpVec(sead::Vector2<float>*, sead::Vector2<float> const&, sead::Vector2<float> const&, float);
lerpVec(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
lerpVecHV(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
separateVectorHV(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
lerpColor(sead::Color4f*, sead::Color4f const&, sead::Color4f const&, float);
lerpLogValueEaseIn(float, float, float, float);
lerpLogValueEaseOut(float, float, float, float);
lerpLogVecEaseIn(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
lerpLogVecEaseOut(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
lerpExponentValueEaseIn(float, float, float, float);
lerpExponentValueEaseOut(float, float, float, float);
lerpExponentVecEaseIn(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
lerpExponentVecEaseOut(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
clampLeapMinAbs(float, float, float, float);
hermite(float, float, float, float, float);
hermite(float, float, float, float, float, float);
hermiteVec(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
converge(int, int, int);
converge(float, float, float);
convergeDegree(float, float, float);
convergeRadian(float, float, float);
convergeVec(sead::Vector2<float>*, sead::Vector2<float> const&, sead::Vector2<float> const&, float);
convergeVec(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
diffNearAngleDegree(float, float);
isInRangeAngleDegree(float, float, float);
calcEyesAnimAngleInRange(float*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float, float);
isSameSign(float, float);
reverseBit8(unsigned char);
reverseBit16(unsigned short);
reverseBit32(unsigned int);
calcVanDerCorput(unsigned int);
calcHammersleyPoint(sead::Vector2<float>*, unsigned int, unsigned int);
findMaxFromArray(int const*, int);
separateMinMax(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&);
findMinFromArray(int const*, int);
getRandom();
getRandom(float);
getRandom(float, float);
getRandom(int);
getRandom(int, int);
getRandomDegree();
getRandomRadian();
getRandomVector(sead::Vector3<float>*, float);
getRandomDir(sead::Vector3<float>*);
getRandomDirH(sead::Vector3<float>*, sead::Vector3<float> const&);
rotateVectorDegree(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
getRandomOnCircle(sead::Vector2<float>*, float);
getRandomInCircle(sead::Vector2<float>*, float);
getRandomInCircleMinMaxRadius(sead::Vector2<float>*, float, float);
getRandomInCircle(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
getRandomOnSphere(sead::Vector3<float>*, float);
getRandomInSphere(sead::Vector3<float>*, float);
calcRandomDirInCone(sead::Vector3<float>*, sead::Vector3<float> const&, float);
getRandomInSphereMinMaxRadius(sead::Vector3<float>*, float, float);
initRandomSeed(unsigned int);
initRandomSeedByTick();
initRandomSeedByString(char const*);
isHalfProbability();
isPercentProbability(float);
getRandomContext(unsigned int*, unsigned int*, unsigned int*, unsigned int*);
setRandomContext(unsigned int, unsigned int, unsigned int, unsigned int);
makeRandomDirXZ(sead::Vector3<float>*);
calcBoxMullerRandomGauss();
makeBoxMullerRandomGauss(sead::Vector2<float>*, float, float);
modf(float, float);
modi(int, int);
calcSpeedMax(float, float);
calcAccel(float, float);
calcFriction(float, float);
separateScalarAndDirection(float*, sead::Vector2<float>*, sead::Vector2<float> const&);
separateScalarAndDirection(float*, sead::Vector3<float>*, sead::Vector3<float> const&);
limitVectorSeparateHV(sead::Vector3<float>*, sead::Vector3<float> const&, float, float);
parallelizeVec(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcVectorSeparateHV(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
limitVectorParallelVertical(sead::Vector3<float>*, sead::Vector3<float> const&, float, float);
separateVectorParallelVertical(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
addVectorLimit(sead::Vector3<float>*, sead::Vector3<float> const&, float);
alongVectorNormalH(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcDistanceVecToPlane(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
limitPlanePos(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
limitCylinderInPos(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
limitCylinderInDir(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
limitCylinderInPos(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
limitCylinderInDir(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
roundOffVec(sead::Vector3<float>*, sead::Vector3<float> const&);
roundOffVec(sead::Vector3<float>*);
roundOffVec(sead::Vector2<float>*, sead::Vector2<float> const&);
roundOffVec(sead::Vector2<float>*);
snapToGrid(float, float, float);
snapVecToGrid(sead::Vector3<float>*, sead::Vector3<float> const&, float, sead::Vector3<float> const&);
snapVecToGrid(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
limitVectorOppositeDir(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
scaleVectorDirection(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
scaleVectorExceptDirection(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
snapVecToDirAxisY(sead::Vector3<float>*, sead::Vector3<float> const&, int);
calcDir(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcDirH(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcDirOnPlane(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
mapRangeLogarithmic(float, float, float, float, float, float);
calcDirFromLongitudeLatitude(sead::Vector3<float>*, float, float);
calcLongitudeLatitudeFromDir(float*, float*, sead::Vector3<float> const&);
getMaxAbsElementIndex(sead::Vector3<int> const&);
getMaxAbsElementValue(sead::Vector3<float> const&);
getMaxAbsElementValue(sead::Vector3<int> const&);
getMinAbsElementIndex(sead::Vector3<float> const&);
getMinAbsElementIndex(sead::Vector3<int> const&);
getMinAbsElementValue(sead::Vector3<float> const&);
getMinAbsElementValue(sead::Vector3<int> const&);
calcNearVecFromAxis2(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcNearVecFromAxis3(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcDirVerticalAny(sead::Vector3<float>*, sead::Vector3<float> const&);
calcDirSlide(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcNearVecFromAxis3(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Quat<float> const&);
calcQuatLocalAxisAll(sead::Quat<float> const&, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*);
addRandomVector(sead::Vector3<float>*, sead::Vector3<float> const&, float);
turnRandomVector(sead::Vector3<float>*, sead::Vector3<float> const&, float);
makeAxisFrontUp(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeAxisFrontSide(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeAxisUpFront(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeAxisUpSide(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeQuatFromTwoAxis(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, int, int);
makeQuatFrontUp(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeQuatFrontSide(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeQuatFrontNoSupport(sead::Quat<float>*, sead::Vector3<float> const&);
makeQuatUpFront(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeQuatUpSide(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeQuatUpNoSupport(sead::Quat<float>*, sead::Vector3<float> const&);
makeQuatSideUp(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeQuatSideFront(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeQuatSideNoSupport(sead::Quat<float>*, sead::Vector3<float> const&);
makeQuatFromToQuat(sead::Quat<float>*, sead::Quat<float> const&, sead::Quat<float> const&);
makeQuatRotationRate(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
makeQuatRotationLimit(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
makeQuatAxisRotation(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
makeQuatRotateDegree(sead::Quat<float>*, sead::Vector3<float> const&, float);
slerpQuat(sead::Quat<float>*, sead::Quat<float> const&, sead::Quat<float> const&, float);
calcQuatSide(sead::Vector3<float>*, sead::Quat<float> const&);
calcQuatUp(sead::Vector3<float>*, sead::Quat<float> const&);
calcQuatGravity(sead::Vector3<float>*, sead::Quat<float> const&);
calcQuatFront(sead::Vector3<float>*, sead::Quat<float> const&);
calcQuatUpY(sead::Quat<float> const&);
calcQuatFrontY(sead::Quat<float> const&);
calcQuatLocalAxis(sead::Vector3<float>*, sead::Quat<float> const&, int);
calcQuatLocalSignAxis(sead::Vector3<float>*, sead::Quat<float> const&, int);
calcQuatRotateDegree(sead::Vector3<float>*, sead::Quat<float> const&);
calcQuatRotateRadian(sead::Vector3<float>*, sead::Quat<float> const&);
calcQuatRotateAxisAndDegree(sead::Vector3<float>*, float*, sead::Quat<float> const&);
calcQuatRotateAxisAndDegree(sead::Vector3<float>*, float*, sead::Quat<float> const&, sead::Quat<float> const&);
rotateQuatRadian(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
makeQuatXDegree(sead::Quat<float>*, float);
makeQuatYDegree(sead::Quat<float>*, float);
makeQuatZDegree(sead::Quat<float>*, float);
rotateQuatXDirDegree(sead::Quat<float>*, sead::Quat<float> const&, float);
rotateQuatYDirDegree(sead::Quat<float>*, sead::Quat<float> const&, float);
rotateQuatZDirDegree(sead::Quat<float>*, sead::Quat<float> const&, float);
rotateQuatLocalDirDegree(sead::Quat<float>*, sead::Quat<float> const&, int, float);
rotateQuatMoment(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&);
rotateQuatMomentDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&);
rotateQuatRollBall(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcMomentRollBall(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
turnQuat(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
turnQuatXDirRadian(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatYDirRadian(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatZDirRadian(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatXDirRate(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatYDirRate(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatZDirRate(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
tiltQuatDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
tiltQuatXDirDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
tiltQuatYDirDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
tiltQuatZDirDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatWithAxisDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
turnQuatXDirWithYDirDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatXDirWithZDirDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatYDirWithZDirDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatYDirWithXDirDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatZDirWithXDirDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatZDirWithYDirDegree(sead::Quat<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
turnQuatZDirToTargetWithAxis(sead::Quat<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
turnQuatFrontToDirDegreeH(sead::Quat<float>*, sead::Vector3<float> const&, float);
rotateQuatAndTransDegree(sead::Quat<float>*, sead::Vector3<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
turnVecToVecDegree(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
turnVecToVecRate(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
turnVecToVecCos(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, sead::Vector3<float> const&, float);
turnVecToVecCosOnPlane(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
turnVecToVecCosOnPlane(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
rotateVectorCenterDegree(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
rotateVectorDegreeX(sead::Vector3<float>*, float);
rotateVectorDegreeY(sead::Vector3<float>*, float);
rotateVectorDegreeZ(sead::Vector3<float>*, float);
rotateVectorQuat(sead::Vector3<float>*, sead::Quat<float> const&);
calcAreaTriangle(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
createBoundingBox(sead::Vector3<float> const*, unsigned int, sead::Vector3<float>*, sead::Vector3<float>*);
updateBoundingBox(sead::Vector3<float>, sead::Vector3<float>*, sead::Vector3<float>*);
calcDistanceToFarthestBoundingBoxVertex(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcSphereMargeSpheres(sead::Vector3<float>*, float*, sead::Vector3<float> const&, float, sead::Vector3<float> const&, float);
calcCrossLinePoint(sead::Vector2<float>*, sead::Vector2<float> const&, sead::Vector2<float> const&, sead::Vector2<float> const&, sead::Vector2<float> const&);
calcSquaredDistanceSegmentToSegment(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float>*, sead::Vector3<float>*);
calcSquaredDistancePointToSegment(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcDistancePointToSegment(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcPerpendicFootToLineInside(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcClosestSegmentPoint(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcCylinderRadiusDot(sead::Vector3<float> const&, sead::Vector3<float> const&, float);
checkHitSemilinePlane(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
checkHitSegmentPlane(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, bool);
checkHitLinePlane(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
checkHitSegmentSphere(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, sead::Vector3<float>*, sead::Vector3<float>*);
checkHitSegmentSphereNearDepth(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, sead::Vector3<float>*, sead::Vector3<float>*);
checkInCylinder(sead::Vector3<float> const&, sead::Vector3<float> const&, float, sead::Vector3<float> const&, float);
checkHitSegmentCylinder(sead::Vector3<float> const&, float, sead::Vector3<float> const&, float, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float>*, sead::Vector3<float>*);
checkHitHalfLineSphere(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
checkHitSegmentBox(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::BoundBox3<float> const&, sead::Vector3<float>*);
checkHitPointCone(sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
checkHitSphereCone(sead::Vector3<float> const&, float, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
checkHitSphereSpotLight(sead::Vector3<float> const&, float, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
calcBoundingSphereSpotLight(sead::Vector3<float>*, float*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
calcBoundingSphereBox3f(sead::Vector3<float>*, float*, sead::BoundBox3<float> const&);
calcArrowAabb(sead::BoundBox3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
isNearCollideSphereAabb(sead::Vector3<float> const&, float, sead::BoundBox3<float> const&);
calcBoxFacePoint(sead::Vector3<float>*, sead::BoundBox3<float> const&, int);
calcBoxFacePoint(sead::Vector3<float>*, sead::BoundBox3<float> const&, int, sead::Matrix34<float> const&);
calcBoxFacePoint(sead::Vector3<float>*, sead::BoundBox3<float> const&, int, sead::Quat<float> const&, sead::Vector3<float> const&);
calcFittingBoxPoseEqualAxisAll(sead::Quat<float>*, sead::Quat<float> const&, sead::Quat<float> const&);
calcFittingBoxPoseEqualAxisNone(sead::Quat<float>*, sead::Quat<float> const&, sead::Quat<float> const&);
calcFittingBoxPoseEqualAxisTwo(sead::Quat<float>*, sead::Quat<float> const&, sead::Quat<float> const&, int);
calcFittingBoxPose(sead::Quat<float>*, sead::BoundBox3<float> const&, sead::Quat<float> const&, sead::Quat<float> const&);
calcSquaredDistanceToObb(sead::Vector3<float> const&, sead::Matrix34<float> const&, sead::Vector3<float> const&);
calcDistanceToObb(sead::Vector3<float> const&, sead::Matrix34<float> const&, sead::Vector3<float> const&);
calcSquaredDistanceToObb(sead::Vector3<float> const&, sead::Matrix34<float> const&, sead::Vector3<float> const&, sead::BoundBox3<float> const&);
calcDistanceToObb(sead::Vector3<float> const&, sead::Matrix34<float> const&, sead::Vector3<float> const&, sead::BoundBox3<float> const&);
calcSquaredDistanceToObb(sead::Vector3<float> const&, sead::Matrix34<float> const&);
calcDistanceToObb(sead::Vector3<float> const&, sead::Matrix34<float> const&);
calcObbCorners(sead::Vector3<float>*, sead::Matrix34<float> const&, sead::BoundBox3<float> const&);
calcTriangleInteriorAngleDegree(float*, float*, float*, float, float, float);
calcBetweenTwoLinkMtx(sead::Matrix34<float>*, sead::Matrix34<float>*, sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
calcBetweenTwoLinkPos(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, sead::Vector3<float> const&);
calcReflectionVector(sead::Vector3<float>*, sead::Vector3<float> const&, float, float);
calcReverseVector(sead::Vector3<float>*, sead::Vector3<float> const&, float);
calcParabolicFunctionParam(float*, float*, float, float);
calcConvergeVibrationValue(float, float, float, float, float);
calcSphericalPolarCoordPY(sead::Vector2<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcBezierPoint(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcSpringDumperForce(float, float, float, float);
convertSpringEnergyToSpeed(float, float, float);
axisIndexToString(int);
visitCellsOverlapped(sead::Vector3<float> const&, sead::Vector3<float> const&, float, al::VisitCellCallBack const&);
calcMultValueToDestination(unsigned int, float, float);
getHaltonSequence(unsigned int, unsigned int);
calcFractal(float, float, unsigned int, float, float, float, bool);
calcMultiFractal(float, float, float, unsigned int, float, float, float, bool);
calcNormalDistribution(float, float, float);
calcVecViewInput(sead::Vector3<float>*, sead::Vector2<float> const&, sead::Vector3<float> const&, sead::Matrix34<float> const*);
calcDirViewInput(sead::Vector3<float>*, sead::Vector2<float> const&, sead::Vector3<float> const&, sead::Matrix34<float> const*);
calcVecViewInput2D(sead::Vector3<float>*, sead::Vector2<float> const&, sead::Vector3<float> const&, sead::Matrix34<float> const*);
calcDirViewInput2D(sead::Vector3<float>*, sead::Vector2<float> const&, sead::Vector3<float> const&, sead::Matrix34<float> const*);
calcBendPosAndFront(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>&, float, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcCirclePointPicking(sead::Vector2<float>*, float, float);
pickUniformPointsOnCircleHammersley(sead::Vector2<float>*, unsigned int, unsigned int);
calcDiskPointPicking(sead::Vector2<float>*, float, float);
pickUniformPointsOnDiskHammersley(sead::Vector2<float>*, unsigned int, unsigned int);
pickUniformPointOnDisk(sead::Vector2<float>*);
calcSpherePointPicking(sead::Vector3<float>*, float, float);
pickUniformPointOnSphere(sead::Vector3<float>*);
makeBayerMatrix(int*, int);
f32ToF16(float);
f16ToF32(unsigned short);
makeMtxRotateTrans(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxFromTwoAxis(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, int, int);
makeMtxFrontUp(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxFrontSide(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxUpFront(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxUpSide(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxSideUp(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxSideFront(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxFrontNoSupport(sead::Matrix34<float>*, sead::Vector3<float> const&);
makeMtxFrontNoSupportPos(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxUpNoSupport(sead::Matrix34<float>*, sead::Vector3<float> const&);
makeMtxUpNoSupportPos(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxSideNoSupport(sead::Matrix34<float>*, sead::Vector3<float> const&);
makeMtxSideNoSupportPos(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxQuatPos(sead::Matrix34<float>*, sead::Quat<float> const&, sead::Vector3<float> const&);
makeMtxQuatScalePos(sead::Matrix34<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxQuatScalePos(sead::Matrix44<float>*, sead::Quat<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxFrontUpPos(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxFrontSidePos(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxUpFrontPos(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxUpSidePos(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxSideUpPos(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxSideFrontPos(sead::Matrix34<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxFollowTarget(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxProj(sead::Matrix44<float>*, sead::Vector2<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
makeMtxProjFromQuatPoseUp(sead::Matrix44<float>*, sead::Quat<float> const&, sead::Vector2<float> const&, sead::Vector3<float> const&);
makeMtxProjFromQuatPoseFront(sead::Matrix44<float>*, sead::Quat<float> const&, sead::Vector2<float> const&, sead::Vector3<float> const&);
makeMtxProjFromQuatPoseSide(sead::Matrix44<float>*, sead::Quat<float> const&, sead::Vector2<float> const&, sead::Vector3<float> const&);
makeMtxProjFromUp(sead::Matrix44<float>*, sead::Vector2<float> const&, sead::Vector3<float> const&);
rotateMtxXDirDegree(sead::Matrix34<float>*, sead::Matrix34<float> const&, float);
rotateMtxYDirDegree(sead::Matrix34<float>*, sead::Matrix34<float> const&, float);
rotateMtxZDirDegree(sead::Matrix34<float>*, sead::Matrix34<float> const&, float);
rotateMtxCenterPosXDirDegree(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&, float);
rotateMtxCenterPosAxisDegree(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
rotateMtxCenterPosYDirDegree(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&, float);
rotateMtxCenterPosZDirDegree(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&, float);
rotateMtxCenterPosQuat(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&, sead::Quat<float> const&);
turnMtxXDirDegree(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&, float);
turnMtxYDirDegree(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&, float);
turnMtxZDirDegree(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&, float);
calcCameraPosFromViewMtx(sead::Vector3<float>*, sead::Matrix34<float> const&);
calcMtxMul(sead::Vector3<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&);
calcMtxMul(sead::Vector3<float>*, al::Matrix43<float> const&, sead::Vector3<float> const&);
calcMtxScale(sead::Vector3<float>*, sead::Matrix34<float> const&);
calcMtxScale(sead::Vector3<float>*, al::Matrix43<float> const&);
normalizeMtxScale(sead::Matrix34<float>*, sead::Matrix34<float> const&);
tryNormalizeMtxScaleOrIdentity(sead::Matrix34<float>*, sead::Matrix34<float> const&);
calcMtxLocalTrans(sead::Vector3<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&);
calcTransLocalOffsetByMtx(sead::Vector3<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&);
preScaleMtx(sead::Matrix34<float>*, sead::Vector3<float> const&);
addTransMtxLocalOffset(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&);
blendMtx(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Matrix34<float> const&, float);
blendMtxRotate(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Matrix34<float> const&, float);
blendMtxTrans(sead::Matrix34<float>*, sead::Matrix34<float> const&, sead::Matrix34<float> const&, float);
calcMtxLocalDirAngleOnPlaneToTarget(sead::Matrix34<float> const*, sead::Vector3<float> const&, int, int);
calcMtxLocalDirAngleOnPlaneToDir(sead::Matrix34<float> const*, sead::Vector3<float> const&, int, int);
calcRotAxisOrZero(sead::Vector3<float>*, sead::Matrix34<float> const&);
calcMxtInvertOrtho(sead::Matrix34<float>*, sead::Matrix34<float> const&);
calcNearFarByInvProjection(float*, float*, sead::Matrix44<float> const&);
calcMovedInertiaTensor(sead::Matrix33<float>*, sead::Matrix33<float> const&, sead::Vector3<float> const&, float);
calcInertiaTensorByMovedTensorAndCenter(sead::Matrix33<float>*, sead::Matrix33<float> const&, sead::Vector3<float> const&, float);
calcInertiaTensorSphere(sead::Matrix33<float>*, float, float);
calcInertiaTensorBox(sead::Matrix33<float>*, sead::Vector3<float> const&, float);
makeMtx34f(sead::Matrix34<float>*, nn::util::neon::MatrixColumnMajor4x3fType const&);
makeMtx44f(sead::Matrix44<float>*, nn::util::neon::MatrixColumnMajor4x4fType const&);
getStationedHeap();
getSequenceHeap();
getSceneResourceHeap();
getSceneHeap();
getCourseSelectResourceHeap();
getCourseSelectHeap();
getWorldResourceHeap();
tryFindNamedHeap(char const*);
findNamedHeap(char const*);
addNamedHeap(sead::Heap*, char const*);
removeNamedHeap(char const*);
createSequenceHeap();
freeAllSequenceHeap();
printAllSequenceHeap();
createSceneHeap(char const*, bool);
createSceneResourceHeap(char const*);
isCreatedSceneResourceHeap();
destroySceneHeap(bool);
createCourseSelectHeap();
destroyCourseSelectHeap();
createWorldResourceHeap(bool);
destroyWorldResourceHeap(bool);
loadPlayerResource(char const*);
freePlayerResource(char const*);
setAudioResourceDirectorToMemorySystem(al::AudioResourceDirector*);
copyMemoryFast(unsigned int*, unsigned int const*, unsigned int);
copyMemory(void*, void const*, unsigned int);
tryCompressByZlib(unsigned char*, unsigned int*, unsigned char const*, unsigned int);
tryDecompressByZlib(unsigned char*, unsigned int*, unsigned char const*, unsigned int);
getCurrentHeap();
initRegionAndLanguage();
forceInitLanguage(alLanguage);
getLanguageString();
forceInitLanguage(char const*);
isLanguageEmQuad();
getLanguageCode();
getLanguage();
getLayoutMessageArcName();
isMessageTagMark(char16_t);
isMessageTagEndMark(char16_t);
isMessageTagPageBreak(al::IUseMessageSystem const*, char16_t const*);
isMessageTagPageBreak(al::IUseMessageSystem const*, al::MessageTag const&);
isMessageTagPageBreak(al::MessageProjectEx const*, al::MessageTag const&);
getMessageTagGroupName(al::MessageProjectEx const*, int);
getMessageTagGroupName(al::IUseMessageSystem const*, int);
getMessageTagName(al::MessageProjectEx const*, int, int);
getMessageTagName(al::IUseMessageSystem const*, int, int);
isExistMessageTag(char16_t const*);
calcMessageSizeWithoutNullCharacter(char16_t const*, char16_t const*);
isExistMessageTagTextPaneAnim(al::IUseMessageSystem const*, char16_t const*);
tryGetMessageTagTextAnim(sead::BufferedSafeStringBase<char>*, al::IUseMessageSystem const*, char16_t const*);
isMessageTagVoice(al::IUseMessageSystem const*, char16_t const*);
getMessageTagVoiceName(sead::BufferedSafeStringBase<char>*, al::IUseMessageSystem const*, char16_t const*);
tryGetMessageTagVoiceNameInPage(sead::BufferedSafeStringBase<char>*, al::IUseMessageSystem const*, char16_t const*);
isMessageTagPictFont(al::IUseMessageSystem const*, int);
isMessageTagDeviceFont(al::IUseMessageSystem const*, int);
isExistMessageTagPadSwitch(al::IUseMessageSystem const*, char16_t const*, int);
isMessageTagPadStyle(al::IUseMessageSystem const*, int, int);
isMessageTagPadPair(al::IUseMessageSystem const*, int, int);
isMessageTagPadStyle2P(al::IUseMessageSystem const*, int, int);
isMessageTagAlignLeft(al::IUseMessageSystem const*, int, int);
isMessageTagAlignCenter(al::IUseMessageSystem const*, int, int);
replaceMessageTagString(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, char16_t const*, char16_t const*);
replaceMessageTagTimeDirectRaceTime(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, al::ReplaceTimeInfo&);
getSystemMessageString(al::IUseMessageSystem const*, char const*, char const*);
replaceMessageTagTimeDirectDate(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, al::ReplaceTimeInfo&);
replaceMessageTagTimeDirectDateDetail(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, al::ReplaceTimeInfo&);
replaceMessageTagScore(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, char16_t const*, int, char const*);
replaceMessageTagCoinNum(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, char16_t const*, int, char const*);
replaceMessageTagAmiiboName(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, char16_t const*, char const*, char const*);
replaceMessageTagUserName(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, char16_t const*, char16_t const*, char const*);
replaceMessageTagNamedString(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, char16_t const*, char16_t const*, char const*);
replaceMessageTagTime(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, char16_t const*, al::ReplaceTimeInfo&, char const*);
createReplaceTimeInfoForRaceTime(al::ReplaceTimeInfo*, int, int, int);
createReplaceTimeInfoForDateTime(al::ReplaceTimeInfo*, unsigned long);
replacePaneDateTime(al::LayoutActor*, char const*, unsigned long);
initMessageTagDataHolder(int);
registerMessageTagDataScore(al::MessageTagDataHolder*, char const*, int const*);
registerMessageTagDataCoinNum(al::MessageTagDataHolder*, char const*, int const*);
registerMessageTagDataUserName(al::MessageTagDataHolder*, char const*, char16_t const**);
registerMessageTagDataAmiiboName(al::MessageTagDataHolder*, char const*, char const**);
registerMessageTagDataString(al::MessageTagDataHolder*, char const*, char16_t const**);
replaceMessageTagData(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, al::MessageTagDataHolder const*, char16_t const*);
calcMessageSizeWithoutTag(char16_t const*, char16_t const*);
isExistLayoutMessage(al::IUseMessageSystem const*, char const*);
isExistSystemMessage(al::IUseMessageSystem const*, char const*);
isExistStageMessage(al::IUseMessageSystem const*, char const*);
isExistLabelInLayoutMessage(al::IUseMessageSystem const*, char const*, char const*);
isExistLabelInSystemMessage(al::IUseMessageSystem const*, char const*, char const*);
isExistLabelInStageMessage(al::IUseMessageSystem const*, char const*, char const*);
calcSystemMessageCharacterNum(al::IUseMessageSystem const*, char const*, char const*);
calcSystemMessageCharacterNumWithoutTag(al::IUseMessageSystem const*, char const*, char const*);
getLayoutMessageString(al::IUseMessageSystem const*, char const*, char const*);
getStageMessageString(al::IUseMessageSystem const*, char const*, char const*);
tryGetStageMessageString(char16_t const**, al::IUseMessageSystem const*, char const*, char const*);
getLayoutMessageString(al::IUseMessageSystem const*, char const*, int);
getSystemMessageString(al::IUseMessageSystem const*, char const*, int);
getSystemMessageLabelNum(al::IUseMessageSystem const*, char const*);
getLayoutMessageLabelNum(al::IUseMessageSystem const*, char const*);
getMessageTagParamName(al::IUseMessageSystem const*, al::MessageTag const&, int);
getMessageTagParamNum(al::IUseMessageSystem const*, al::MessageTag const&);
getMessageTagParamString(sead::BufferedSafeStringBase<char16_t>*, al::IUseMessageSystem const*, al::MessageTag const&, int);
getSystemMessageLabelString(sead::BufferedSafeStringBase<char>*, al::IUseMessageSystem const*, char const*, int);
getLayoutMessageLabelString(sead::BufferedSafeStringBase<char>*, al::IUseMessageSystem const*, char const*, int);
getMessageLine(char16_t*, unsigned int, char16_t const*, unsigned int);
countMessageLine(char16_t const*);
copyMessageExpandTag(char16_t*, int, al::IUseMessageSystem const*, char16_t const*);
copyMessageWithoutTag(char16_t*, int, char16_t const*);
copyMessageWithoutRubyTag(char16_t*, int, al::IUseMessageSystem const*, char16_t const*);
copyMessageWithoutTagExpandRuby(char16_t*, int, al::IUseMessageSystem const*, char16_t const*);
copyMessageWithTag(char16_t*, int, char16_t const*);
copyMessageWithTagOnlyCurrentPage(al::IUseMessageSystem const*, char16_t*, int, char16_t const*, int);
getMessageWithPage(al::IUseMessageSystem const*, char16_t const*, int);
copyMessageOnlyRuby(char16_t*, int, al::IUseMessageSystem const*, char16_t const*);
countMessagePage(al::IUseMessageSystem const*, char16_t const*, int);
getNextMessagePage(al::IUseMessageSystem const*, char16_t const*);
getPictureFont(al::LayoutSystem const*);
getMaterialName(al::ModelKeeper const*, int);
getMaterialIndex(al::ModelKeeper const*, char const*);
getMaterialCount(al::ModelKeeper const*);
hideMaterial(al::ModelKeeper*, char const*);
hideMaterial(al::ModelKeeper*, int);
showMaterial(al::ModelKeeper*, char const*);
showMaterial(al::ModelKeeper*, int);
calcPolygonNum(al::ModelKeeper const*, int);
calcPolygonNumCurrentLod(al::ModelKeeper const*);
getLodLevel(al::ModelKeeper const*);
getMaterialLodLevel(al::ModelKeeper const*);
getLodLevelNoClamp(al::ModelKeeper const*);
isGreaterEqualMaxLodLevelNoClamp(al::ModelKeeper const*);
isGreaterMaxLodLevelNoClamp(al::ModelKeeper const*);
isLessMaxLodLevelNoClamp(al::ModelKeeper const*);
isMaxLodLevelNoClamp(al::ModelKeeper const*);
validateLodModel(al::ModelKeeper*);
invalidateLodModel(al::ModelKeeper*);
isEnableMaterialLod(al::ModelKeeper const*);
isValidateLodModel(al::ModelKeeper const*);
setUvOffset(al::ModelKeeper const*, sead::Vector2<float> const&);
setModelProjMtx0(al::ModelKeeper const*, sead::Matrix44<float> const&);
setModelProjMtx1(al::ModelKeeper const*, sead::Matrix44<float> const&);
setModelProjMtx2(al::ModelKeeper const*, sead::Matrix44<float> const&);
setModelProgProjMtx0(al::ModelKeeper const*, sead::Matrix44<float> const&);
createRetargetInfo(sead::Vector3<float> const&, char const*, char const*, char const*);
getJointNum(al::ModelKeeper const*);
getJointIndex(al::ModelKeeper const*, char const*);
isExistJoint(al::ModelKeeper const*, char const*);
getJointName(al::ModelKeeper const*, int);
getJointMtxPtr(al::ModelKeeper const*, char const*);
getJointMtxPtrByIndex(al::ModelKeeper const*, int);
getJointMtxPtrRaw(al::ModelKeeper const*, char const*);
getJointMtxPtrByIndexRaw(al::ModelKeeper const*, int);
getJointLocalTrans(sead::Vector3<float>*, al::ModelKeeper const*, char const*);
getJointLocalTrans(sead::Vector3<float>*, al::ModelKeeper const*, int);
getParentJointIndex(al::ModelKeeper const*, int);
setJointVisibility(al::ModelKeeper const*, char const*, bool);
isJointVisibility(al::ModelKeeper const*, char const*);
forceApplyCubeMap(al::ModelKeeper*, al::GraphicsSystemInfo const*, char const*);
clearSubMeshRange(nn::g3d::SubMeshRange*);
isEndSubMeshRange(nn::g3d::SubMeshRange const&);
isEqualSubMeshRange(nn::g3d::SubMeshRange const&, nn::g3d::SubMeshRange const&);
calcSubMeshRangeIndexSize(nn::g3d::ShapeObj const&, nn::g3d::SubMeshRange const&);
calcSubMeshRangeIndexCount(nn::g3d::ShapeObj const&, nn::g3d::SubMeshRange const&);
calcSubMeshRangeIndexBufferBaseIndex(nn::g3d::ShapeObj const&, nn::g3d::SubMeshRange const&);
calcSubMeshRangeIndexBufferBaseVertex(nn::g3d::ShapeObj const&, nn::g3d::SubMeshRange const&);
tryCreateRaceCheckPoint(al::StageInfo const*);
getLapMax(al::RaceJudgeDirector const*);
calcRaceProgress(al::RaceJudgeDirector const*, al::LiveActor const*);
getLapNum(al::RaceJudgeDirector const*, al::LiveActor const*);
calcIsReverse(al::RaceJudgeDirector const*, al::LiveActor const*);
isRaceGoal(al::RaceJudgeDirector const*, al::LiveActor const*);
calcGoalPlayerNum(al::RaceJudgeDirector const*);
getRacerNum(al::RaceJudgeDirector const*);
calcRank(al::RaceJudgeDirector const*, al::LiveActor const*);
isPassLapLine(al::RaceJudgeDirector const*, al::LiveActor const*);
isLastLap(al::RaceJudgeDirector const*, al::LiveActor const*);
validateRacerUpdate(al::RaceJudgeDirector const*, al::LiveActor const*);
invalidateRacerUpdate(al::RaceJudgeDirector const*, al::LiveActor const*);
isValidRacerUpdate(al::RaceJudgeDirector const*, al::LiveActor const*);
calcIsRaceTopGoal(al::RaceJudgeDirector const*, al::LiveActor const*);
isReverseGoAround(al::RaceJudgeDirector const*, al::LiveActor const*);
getGoalFrame(al::RaceJudgeDirector const*, al::LiveActor const*);
calcTotalFrame(al::RaceJudgeDirector const*, al::LiveActor const*);
getLapFrame(al::RaceJudgeDirector const*, al::LiveActor const*, int);
calcBestLapFrame(al::RaceJudgeDirector const*, al::LiveActor const*);
calcBestLap(al::RaceJudgeDirector const*, al::LiveActor const*);
calcLapFrameFraction(al::RaceJudgeDirector const*, al::LiveActor const*, int);
calcLapCsec(al::RaceJudgeDirector const*, al::LiveActor const*, int);
getCheckPointNum(al::RaceJudgeDirector const*);
calcPassCheckPointPos(sead::Vector3<float>*, al::RaceJudgeDirector const*, al::LiveActor const*);
calcPassCheckPointFront(sead::Vector3<float>*, al::RaceJudgeDirector const*, al::LiveActor const*);
isUseFinalCheckPoint(al::RaceJudgeDirector const*);
calcPassCheckPointIsUseRecoverPoint(al::RaceJudgeDirector const*, al::LiveActor const*);
calcPassCheckPointRecoverTrans(al::RaceJudgeDirector const*, al::LiveActor const*);
calcPassCheckPointRecoverPose(al::RaceJudgeDirector const*, al::LiveActor const*);
getRacerActor(al::RaceJudgeDirector const*, int);
tryCreateRailMoveMovement(al::LiveActor*, al::ActorInitInfo const&);
registerFluidSurfaceObj(al::IUseFluidSurface*, al::LiveActor const*);
isExistFluidSurface(al::LiveActor const*);
setWaterRippleFieldScale(al::LiveActor const*, float);
isInWaterPos(al::LiveActor const*, sead::Vector3<float> const&);
isInWater(al::LiveActor const*);
isInWaterNoIgnore(al::LiveActor const*, sead::Vector3<float> const&);
isInSodaWater(al::LiveActor const*, sead::Vector3<float> const&);
isInIceWaterPos(al::LiveActor const*, sead::Vector3<float> const&);
isInIceWater(al::LiveActor const*);
isInFirePos(al::LiveActor const*, sead::Vector3<float> const&);
isInFire(al::LiveActor const*);
isInCloudPos(al::LiveActor const*, sead::Vector3<float> const&);
isInCloud(al::LiveActor const*);
isWaterAreaIgnore(al::AreaObj const*);
getFireMaterialCode(al::LiveActor const*);
calcFindWaterSurface(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcFindWaterSurfaceFlat(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcFindWaterSurfaceDisplacement(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcFindWaterSurfaceOverGround(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcFindFireSurface(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcFindCloudSurface(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
tryAddRipple(al::NatureDirector const*, sead::Vector3<float> const&, float, float);
tryAddRippleTiny(al::LiveActor const*);
tryAddRippleSmall(al::LiveActor const*, sead::Vector3<float> const&);
tryAddRippleTiny(al::LiveActor const*, sead::Vector3<float> const&);
tryAddRippleSmall(al::LiveActor const*);
tryAddRippleMiddle(al::LiveActor const*);
tryAddRippleMiddle(al::LiveActor const*, sead::Vector3<float> const&);
tryAddRippleLarge(al::LiveActor const*);
tryAddRippleLarge(al::LiveActor const*, sead::Vector3<float> const&);
tryAddRippleWithRange(al::LiveActor const*, sead::Vector3<float> const&, float, float, float, float);
tryAddRipple(al::LiveActor const*, sead::Vector3<float> const&, float, float);
tryAddRippleRandomBlur(al::LiveActor const*, sead::Vector3<float> const&, float, float, float);
tryAddQuadRipple(al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
tryAddQuadRipple(al::LiveActor const*, sead::BoundBox3<float> const&, sead::Vector3<float> const&, sead::Quat<float> const&, float, float);
tryAddQuadRippleByBoxRotateY(al::LiveActor const*, sead::BoundBox3<float> const&, sead::Vector3<float> const&, float, float, float);
approachWaterSurfaceSpringDumper(al::LiveActor*, al::WaterSurfaceFinder const*, float, float, float, float, float);
approachFireSurfaceSpringDumper(al::LiveActor*, al::FireSurfaceFinder const*, float, float, float, float, float);
approachWaterSurfaceRate(al::LiveActor*, al::WaterSurfaceFinder const*, float, float, float);
approachFireSurfaceRate(al::LiveActor*, al::FireSurfaceFinder const*, float, float, float);
keepWaterSurfaceHeight(al::LiveActor*, al::WaterSurfaceFinder const*, float);
syncWaterSurfaceTrans(al::LiveActor*, al::WaterSurfaceFinder const*);
syncFireSurfaceTrans(al::LiveActor*, al::FireSurfaceFinder const*);
syncWaterSurfaceTransH(al::LiveActor*, al::WaterSurfaceFinder const*);
blendWaterSurfaceTransH(al::LiveActor*, al::WaterSurfaceFinder const*, float);
syncWaterSurfaceUp(al::LiveActor*, al::WaterSurfaceFinder const*, float);
syncFireSurfaceUp(al::LiveActor*, al::FireSurfaceFinder const*, float);
calcMatrixFromActorPoseAndWaterSurfaceH(sead::Matrix34<float>*, al::WaterSurfaceFinder const*, al::LiveActor const*);
setNerve(al::IUseNerve*, al::Nerve const*);
setNerveAtStep(al::IUseNerve*, al::Nerve const*, int);
isStep(al::IUseNerve const*, int);
setNerveAtGreaterEqualStep(al::IUseNerve*, al::Nerve const*, int);
isGreaterEqualStep(al::IUseNerve const*, int);
isNerve(al::IUseNerve const*, al::Nerve const*);
getNerveStep(al::IUseNerve const*);
getCurrentNerve(al::IUseNerve const*);
isFirstStep(al::IUseNerve const*);
isLessStep(al::IUseNerve const*, int);
isLessEqualStep(al::IUseNerve const*, int);
isGreaterStep(al::IUseNerve const*, int);
isInRangeStep(al::IUseNerve const*, int, int);
isIntervalStep(al::IUseNerve const*, int, int);
isIntervalOnOffStep(al::IUseNerve const*, int, int);
isNewNerve(al::IUseNerve const*);
calcNerveInterval(al::IUseNerve const*, int, int);
calcNerveRate(al::IUseNerve const*, int);
calcNerveRate(al::IUseNerve const*, int, int);
calcNerveEaseInRate(al::IUseNerve const*, int);
calcNerveEaseInRate(al::IUseNerve const*, int, int);
calcNerveEaseOutRate(al::IUseNerve const*, int);
calcNerveEaseOutRate(al::IUseNerve const*, int, int);
calcNerveEaseInOutRate(al::IUseNerve const*, int);
calcNerveEaseInOutRate(al::IUseNerve const*, int, int);
calcNerveSquareInRate(al::IUseNerve const*, int);
calcNerveSquareInRate(al::IUseNerve const*, int, int);
calcNerveSquareOutRate(al::IUseNerve const*, int);
calcNerveSquareOutRate(al::IUseNerve const*, int, int);
calcNerveEaseByTypeRate(al::IUseNerve const*, int, int);
calcNerveEaseByTypeRate(al::IUseNerve const*, int, int, int);
calcNervePowerInRate(al::IUseNerve const*, int, float);
calcNervePowerInRate(al::IUseNerve const*, int, int, float);
calcNervePowerOutRate(al::IUseNerve const*, int, float);
calcNervePowerOutRate(al::IUseNerve const*, int, int, float);
calcNerveJumpRate(al::IUseNerve const*, int, int, int);
calcNerveEaseInValue(al::IUseNerve const*, int, int, float, float);
calcNerveStartEndRate(al::IUseNerve const*, int, int, int);
calcNerveEaseInOutValue(al::IUseNerve const*, int, int, float, float);
calcNerveValue(al::IUseNerve const*, int, float, float);
calcNerveValue(al::IUseNerve const*, int, int, float, float);
calcNerveEaseInValue(al::IUseNerve const*, int, float, float);
calcNerveEaseOutValue(al::IUseNerve const*, int, float, float);
calcNerveEaseOutValue(al::IUseNerve const*, int, int, float, float);
calcNerveEaseInOutValue(al::IUseNerve const*, int, float, float);
calcNerveSquareInValue(al::IUseNerve const*, int, float, float);
calcNerveSquareInValue(al::IUseNerve const*, int, int, float, float);
calcNerveSquareOutValue(al::IUseNerve const*, int, float, float);
calcNerveSquareOutValue(al::IUseNerve const*, int, int, float, float);
calcNerveEaseByTypeValue(al::IUseNerve const*, int, float, float, int);
calcNerveEaseByTypeValue(al::IUseNerve const*, int, int, float, float, int);
calcNerveCosCycle(al::IUseNerve const*, int);
calcNerveSinCycle(al::IUseNerve const*, int);
calcNerveRepeatRate(al::IUseNerve const*, int);
calcNerveRepeatDegree(al::IUseNerve const*, int);
calcNerveJumpValue(al::IUseNerve const*, int, int, int, float);
calcNerveStartEndValue(al::IUseNerve const*, int, int, int, float, float);
initNerveState(al::IUseNerve*, al::NerveStateBase*, al::Nerve const*, char const*);
addNerveState(al::IUseNerve*, al::NerveStateBase*, al::Nerve const*, char const*);
updateNerveState(al::IUseNerve*);
updateNerveStateAndNextNerve(al::IUseNerve*, al::Nerve const*);
isStateEnd(al::IUseNerve const*);
isNexConnecting(al::IUseNexNetworkStateHolder const*);
isNexConnected(al::IUseNexNetworkStateHolder const*);
tryNexReconnect(al::IUseNexNetworkStateHolder const*);
tryNexReconnectNoHandleError(al::IUseNexNetworkStateHolder const*);
tryNexLogout(al::IUseNexNetworkStateHolder const*);
isNfpTriggerTouch(al::NfpDirector*, int);
tryGetTriggerTouchNfpInfo(al::NfpDirector*, int);
isNfpError(al::NfpDirector*, int);
isNfpErrorDisableNfcDevice(nn::Result const&);
isNfpErrorBreakTagDisableRestore(nn::Result const&);
isNfpErrorBreakTagEnableRestore(nn::Result const&);
showNfpErrorApplet(nn::Result const&);
isAnyNfcTagDetected(al::NfpInfo const&);
isNormalNfc(al::NfpInfo const&);
isAmiibo(al::NfpInfo const&);
isEqualUniqueNfcId(al::NfpInfo const&, al::NfpInfo const&);
isEqualUniqueNfcId(nn::nfp::TagInfo const&, nn::nfp::TagInfo const&);
isEqualCharacterId(al::NfpInfo const&, al::NfpCharacterId);
isEqualCharacterId(nn::nfp::ModelInfo const&, al::NfpCharacterId const&);
isEqualCharacterIdBase(al::NfpInfo const&, al::NfpCharacterId);
isEqualNumberingId(al::NfpInfo const&, int);
isEqualNumberingId(nn::nfp::ModelInfo const&, int);
tryGetCharacterId(al::NfpCharacterId*, al::NfpInfo const&);
tryGetNumberingId(int*, al::NfpInfo const&);
isCharacterIdBaseMario(al::NfpInfo const&);
isCharacterIdBaseDrMario(al::NfpInfo const&);
isCharacterIdBasePeach(al::NfpInfo const&);
isCharacterIdBaseKoopa(al::NfpInfo const&);
isCharacterIdBaseYoshi(al::NfpInfo const&);
isCharacterIdBaseKinopio(al::NfpInfo const&);
isNeedFormat(al::NfpInfo const&);
isNeedRestore(al::NfpInfo const&);
isNeedRegister(al::NfpInfo const&);
isNeedRegisterNickName(al::NfpInfo const&);
isValidRegisterInfo(al::NfpInfo const&);
getAmiiboOwnerName(sead::BufferedSafeStringBase<char16_t>*, al::NfpInfo const&);
getAmiiboNickName(sead::BufferedSafeStringBase<char16_t>*, al::NfpInfo const&);
isInvalidFormatVersion(al::NfpInfo const&);
isEqualCharacterIdBase(nn::nfp::ModelInfo const&, al::NfpCharacterId const&);
isEqualUniqueNfcId(nn::nfp::TagInfo const&, al::NfpInfo const&);
isEqualUniqueNfcId(nn::nfp::TagId const&, nn::nfp::TagId const&);
createCollisionObj(al::LiveActor const*, al::ActorInitInfo const&, char const*, al::HitSensor*, char const*, char const*);
createCollisionObjMtx(al::LiveActor const*, al::ActorInitInfo const&, char const*, al::HitSensor*, sead::Matrix34<float> const*, char const*);
createPartsModel(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, sead::Matrix34<float> const*);
createPartsModelFile(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*);
createPartsModelFileSuffix(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*, char const*);
createSimplePartsModel(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*);
createSimplePartsModelSuffix(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*, char const*);
createPartsModelSuffix(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*, sead::Matrix34<float> const*);
createPartsModelJoint(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*);
createPartsModelSuffixJoint(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*, char const*);
appearBreakModelRandomRotateY(al::LiveActor*);
updateSyncHostVisible(bool*, al::LiveActor*, al::LiveActor const*, bool);
isTraceModelRandomRotate(al::LiveActor const*);
createBreakModel(al::LiveActor const*, al::ActorInitInfo const&, char const*, char const*, char const*, sead::Matrix34<float> const*, char const*);
createHostSyncTowerCamera(al::LiveActor*, al::ActorInitInfo const&);
activateHostSyncTowerCamera(al::HostSyncTowerCamera*);
deactivateHostSyncTowerCamera(al::HostSyncTowerCamera*);
updateHostSyncTowerCamera(al::HostSyncTowerCamera*);
tryCreateLinksKeyMoveCameraObj(al::ActorInitInfo const&, char const*);
tryCreateLinksKeyMoveCameraObjWithInterpole(al::ActorInitInfo const&, char const*);
isOcclusionCulling(al::OcclusionCullingJudge const*, sead::Vector3<float> const&, sead::Vector2<float> const&, float, float, float, int);
isOcclusionCulling(al::OcclusionCullingJudge const*, sead::Vector3<float> const&, sead::Vector2<float> const&, float, float, float, al::ViewInfo const&);
calcOccludedPointRate(al::OcclusionCullingJudge const*, sead::Vector3<float> const&, sead::Vector2<float> const&, float, float, float);
calcOccludedPointRate(al::OcclusionCullingJudge const*, sead::Vector3<float> const&, sead::Vector2<float> const&, float, float, float, al::ViewInfo const&);
isUsingPrepassTriangleCulling();
isUsingPrepassTriangleCullingWithZprepass();
isIgnoreNoDrawZprepassWhenCulling();
isUsingPrepassCullingModelCtrlClear();
isCullingCategory(char const*);
createBalloonMessage(al::LiveActor const*, al::ActorInitInfo const&, al::BalloonMessageInitParam const&);
createBalloonMessageNoAutoUpdate(al::LiveActor const*, al::ActorInitInfo const&, al::BalloonMessageInitParam const&);
createBalloonMessage(al::LiveActor const*, al::ActorInitInfo const&);
createBalloonMessage(al::LiveActor const*, al::ActorInitInfo const&, char const*);
createSimpleLayoutText(al::ActorInitInfo const&, char const*, char const*, char const*);
isValidInfo(al::PlacementInfo const&);
isPlaced(al::ActorInitInfo const&);
getObjectName(char const**, al::ActorInitInfo const&);
getObjectName(char const**, al::PlacementInfo const&);
tryGetObjectName(char const**, al::PlacementInfo const&);
tryGetObjectName(char const**, al::ActorInitInfo const&);
tryGetStringArg(char const**, al::PlacementInfo const&, char const*);
isObjectName(al::ActorInitInfo const&, char const*);
isObjectName(al::PlacementInfo const&, char const*);
isObjectNameSubStr(al::ActorInitInfo const&, char const*);
isObjectNameSubStr(al::PlacementInfo const&, char const*);
tryGetClassName(char const**, al::ActorInitInfo const&);
tryGetClassName(char const**, al::PlacementInfo const&);
tryGetPlacementInfoByKey(al::PlacementInfo*, al::PlacementInfo const&, char const*);
getClassName(char const**, al::ActorInitInfo const&);
getClassName(char const**, al::PlacementInfo const&);
isClassName(al::ActorInitInfo const&, char const*);
isClassName(al::PlacementInfo const&, char const*);
getDisplayName(char const**, al::ActorInitInfo const&);
tryGetDisplayName(char const**, al::ActorInitInfo const&);
getDisplayName(char const**, al::PlacementInfo const&);
tryGetDisplayName(char const**, al::PlacementInfo const&);
getPlacementTargetFile(char const**, al::PlacementInfo const&);
tryGetTrans(sead::Vector3<float>*, al::ActorInitInfo const&);
tryGetTrans(sead::Vector3<float>*, al::PlacementInfo const&);
multZoneMtx(sead::Vector3<float>*, al::PlacementInfo const&);
getTrans(sead::Vector3<float>*, al::PlacementInfo const&);
getTrans(sead::Vector3<float>*, al::ActorInitInfo const&);
tryGetRotate(sead::Vector3<float>*, al::ActorInitInfo const&);
tryGetRotate(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetZoneMatrixTR(sead::Matrix34<float>*, al::PlacementInfo const&);
getRotate(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetQuat(sead::Quat<float>*, al::ActorInitInfo const&);
tryGetQuat(sead::Quat<float>*, al::PlacementInfo const&);
getQuat(sead::Quat<float>*, al::PlacementInfo const&);
getQuat(sead::Quat<float>*, al::ActorInitInfo const&);
tryGetScale(sead::Vector3<float>*, al::ActorInitInfo const&);
tryGetScale(sead::Vector3<float>*, al::PlacementInfo const&);
getScale(sead::Vector3<float>*, al::PlacementInfo const&);
getScale(float*, float*, float*, al::PlacementInfo const&);
getSide(sead::Vector3<float>*, al::ActorInitInfo const&);
getSide(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetSide(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetSide(sead::Vector3<float>*, al::ActorInitInfo const&);
getUp(sead::Vector3<float>*, al::ActorInitInfo const&);
getUp(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetUp(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetUp(sead::Vector3<float>*, al::ActorInitInfo const&);
getFront(sead::Vector3<float>*, al::ActorInitInfo const&);
getFront(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetFront(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetFront(sead::Vector3<float>*, al::ActorInitInfo const&);
tryGetLocalAxis(sead::Vector3<float>*, al::ActorInitInfo const&, int);
tryGetLocalAxis(sead::Vector3<float>*, al::PlacementInfo const&, int);
tryGetLocalSignAxis(sead::Vector3<float>*, al::ActorInitInfo const&, int);
tryGetLocalSignAxis(sead::Vector3<float>*, al::PlacementInfo const&, int);
tryGetMatrixTR(sead::Matrix34<float>*, al::ActorInitInfo const&);
tryGetMatrixTR(sead::Matrix34<float>*, al::PlacementInfo const&);
tryGetMatrixTRS(sead::Matrix34<float>*, al::ActorInitInfo const&);
tryGetMatrixTRS(sead::Matrix34<float>*, al::PlacementInfo const&);
tryGetInvertMatrixTR(sead::Matrix34<float>*, al::ActorInitInfo const&);
tryGetInvertMatrixTR(sead::Matrix34<float>*, al::PlacementInfo const&);
calcMatrixMultParent(sead::Matrix34<float>*, al::PlacementInfo const&, al::PlacementInfo const&);
calcMatrixMultParent(sead::Matrix34<float>*, al::ActorInitInfo const&, al::ActorInitInfo const&);
tryGetArg(int*, al::ActorInitInfo const&, char const*);
tryGetArg(int*, al::PlacementInfo const&, char const*);
tryGetArg(float*, al::ActorInitInfo const&, char const*);
tryGetArg(float*, al::PlacementInfo const&, char const*);
tryGetArg(bool*, al::ActorInitInfo const&, char const*);
tryGetArg(bool*, al::PlacementInfo const&, char const*);
getArg(int*, al::ActorInitInfo const&, char const*);
getArg(int*, al::PlacementInfo const&, char const*);
getArg(float*, al::ActorInitInfo const&, char const*);
getArg(float*, al::PlacementInfo const&, char const*);
getArg(bool*, al::ActorInitInfo const&, char const*);
getArg(bool*, al::PlacementInfo const&, char const*);
getArgS32(al::ActorInitInfo const&, char const*);
getArgF32(al::ActorInitInfo const&, char const*);
getArgV3f(sead::Vector3<float>*, al::ActorInitInfo const&, char const*);
tryGetArgV3f(sead::Vector3<float>*, al::ActorInitInfo const&, char const*);
getArgV3f(sead::Vector3<float>*, al::PlacementInfo const&, char const*);
tryGetArgV3f(sead::Vector3<float>*, al::PlacementInfo const&, char const*);
isArgBool(al::ActorInitInfo const&, char const*);
isArgBool(al::PlacementInfo const&, char const*);
isArgString(al::ActorInitInfo const&, char const*, char const*);
getStringArg(char const**, al::ActorInitInfo const&, char const*);
isArgString(al::PlacementInfo const&, char const*, char const*);
getStringArg(char const**, al::PlacementInfo const&, char const*);
getStringArg(char const**, al::AreaInitInfo const&, char const*);
getStringArg(al::ActorInitInfo const&, char const*);
getStringArg(al::AreaInitInfo const&, char const*);
getStringArg(al::PlacementInfo const&, char const*);
tryGetStringArg(char const**, al::ActorInitInfo const&, char const*);
tryGetStringArg(char const**, al::AreaInitInfo const&, char const*);
tryGetArgV2f(sead::Vector2<float>*, al::ActorInitInfo const&, char const*);
tryGetArgV2f(sead::Vector2<float>*, al::PlacementInfo const&, char const*);
tryGetArgColor(sead::Color4f*, al::ActorInitInfo const&, char const*);
tryGetArgColor(sead::Color4f*, al::PlacementInfo const&, char const*);
getLayerConfigName(char const**, al::ActorInitInfo const&);
getLayerConfigName(char const**, al::PlacementInfo const&);
tryGetZoneNameIfExist(char const**, al::PlacementInfo const&);
getPlacementId(al::PlacementId*, al::PlacementInfo const&);
tryGetBoolArgOrFalse(al::ActorInitInfo const&, char const*);
getCountPlacementInfo(al::PlacementInfo const&);
getPlacementInfoByKey(al::PlacementInfo*, al::PlacementInfo const&, char const*);
getPlacementInfoByIndex(al::PlacementInfo*, al::PlacementInfo const&, int);
tryGetPlacementInfoByIndex(al::PlacementInfo*, al::PlacementInfo const&, int);
getPlacementInfoAndKeyNameByIndex(al::PlacementInfo*, char const**, al::PlacementInfo const&, int);
tryGetPlacementInfoAndKeyNameByIndex(al::PlacementInfo*, char const**, al::PlacementInfo const&, int);
createPlacementId(al::ActorInitInfo const&);
createPlacementId(al::PlacementInfo const&);
tryGetPlacementId(al::PlacementId*, al::ActorInitInfo const&);
tryGetPlacementId(al::PlacementId*, al::PlacementInfo const&);
getPlacementId(al::PlacementId*, al::ActorInitInfo const&);
isEqualPlacementId(al::PlacementId const&, al::PlacementId const&);
isEqualPlacementId(al::PlacementInfo const&, al::PlacementInfo const&);
isExistRail(al::ActorInitInfo const&, char const*);
tryGetRailIter(al::PlacementInfo*, al::PlacementInfo const&, char const*);
tryGetLinksInfo(al::PlacementInfo*, al::PlacementInfo const&, char const*);
tryGetMoveParameterRailIter(al::PlacementInfo*, al::PlacementInfo const&);
tryGetRailPointPos(sead::Vector3<float>*, al::PlacementInfo const&);
getRailPointHandlePrev(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetRailPointHandlePrev(sead::Vector3<float>*, al::PlacementInfo const&);
getRailPointHandleNext(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetRailPointHandleNext(sead::Vector3<float>*, al::PlacementInfo const&);
isExistGraphRider(al::ActorInitInfo const&);
calcLinkChildNum(al::ActorInitInfo const&, char const*);
calcLinkChildNum(al::PlacementInfo const&, char const*);
isExistLinkChild(al::ActorInitInfo const&, char const*, int);
isExistLinkChild(al::PlacementInfo const&, char const*, int);
isExistLinkChild(al::AreaInitInfo const&, char const*, int);
calcLinkNestNum(al::ActorInitInfo const&, char const*);
calcLinkNestNum(al::PlacementInfo const&, char const*);
getLinksInfo(al::PlacementInfo*, al::PlacementInfo const&, char const*);
getLinksInfoByIndex(al::PlacementInfo*, al::PlacementInfo const&, char const*, int);
getLinksInfo(al::PlacementInfo*, al::ActorInitInfo const&, char const*);
getLinksInfoByIndex(al::PlacementInfo*, al::ActorInitInfo const&, char const*, int);
tryGetLinksInfo(al::PlacementInfo*, al::ActorInitInfo const&, char const*);
getLinksMatrix(sead::Matrix34<float>*, al::ActorInitInfo const&, char const*);
getLinksMatrixByIndex(sead::Matrix34<float>*, al::ActorInitInfo const&, char const*, int);
getLinkTR(sead::Vector3<float>*, sead::Vector3<float>*, al::PlacementInfo const&, char const*);
getLinkTR(sead::Vector3<float>*, sead::Vector3<float>*, al::ActorInitInfo const&, char const*);
getLinkTR(sead::Vector3<float>*, sead::Vector3<float>*, al::AreaInitInfo const&, char const*);
getLinksQT(sead::Quat<float>*, sead::Vector3<float>*, al::ActorInitInfo const&, char const*);
getLinksQT(sead::Quat<float>*, sead::Vector3<float>*, al::PlacementInfo const&, char const*);
tryGetLinksQT(sead::Quat<float>*, sead::Vector3<float>*, al::ActorInitInfo const&, char const*);
tryGetLinksQTS(sead::Quat<float>*, sead::Vector3<float>*, sead::Vector3<float>*, al::ActorInitInfo const&, char const*);
tryGetLinksMatrixTR(sead::Matrix34<float>*, al::ActorInitInfo const&, char const*);
tryGetLinksMatrixTR(sead::Matrix34<float>*, al::AreaInitInfo const&, char const*);
tryGetLinksMatrixTRS(sead::Matrix34<float>*, al::ActorInitInfo const&, char const*);
tryGetLinksTrans(sead::Vector3<float>*, al::ActorInitInfo const&, char const*);
tryGetLinksTrans(sead::Vector3<float>*, al::PlacementInfo const&, char const*);
tryGetLinksQuat(sead::Quat<float>*, al::ActorInitInfo const&, char const*);
tryGetLinksTR(sead::Vector3<float>*, sead::Vector3<float>*, al::ActorInitInfo const&, char const*);
getChildTrans(sead::Vector3<float>*, al::PlacementInfo const&, char const*);
getChildTrans(sead::Vector3<float>*, al::ActorInitInfo const&, char const*);
getChildTrans(sead::Vector3<float>*, al::AreaInitInfo const&, char const*);
getChildLinkT(sead::Vector3<float>*, al::ActorInitInfo const&, char const*, int);
getChildLinkTR(sead::Vector3<float>*, sead::Vector3<float>*, al::ActorInitInfo const&, char const*, int);
calcMatchNameLinkCount(al::PlacementInfo const&, char const*);
calcLinkCountClassName(al::PlacementInfo const&, char const*);
tryGetZoneMatrixTR(sead::Matrix34<float>*, al::ActorInitInfo const&);
tryGetDisplayOffset(sead::Vector3<float>*, al::ActorInitInfo const&);
tryGetDisplayOffset(sead::Vector3<float>*, al::PlacementInfo const&);
tryGetChildDisplayOffset(sead::Vector3<float>*, al::ActorInitInfo const&, char const*);
tryGetDisplayRotate(sead::Vector3<float>*, al::ActorInitInfo const&);
tryGetDisplayScale(sead::Vector3<float>*, al::ActorInitInfo const&);
makeStringPlacementId(al::PlacementId const*);
addPlayerAccelStick(al::LiveActor*, sead::Vector3<float>*, float, int, sead::Matrix34<float> const*);
addPlayerAccelStickGravity(al::LiveActor*, sead::Vector3<float>*, float, sead::Vector3<float> const&, int, sead::Matrix34<float> const*);
addPlayerAccelInputGravity(al::LiveActor*, sead::Vector3<float>*, sead::Vector2<float> const&, float, sead::Vector3<float> const&, sead::Matrix34<float> const*);
tryCalcTouchWorldPosPlane(al::IUseCamera const*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
tryCalcTouchWorldPosPlaneXZ(al::IUseCamera const*, sead::Vector3<float>*, float);
getPlayerNumMax(al::LiveActor const*);
getPlayerNumMax(al::PlayerHolder const*);
getAlivePlayerNum(al::LiveActor const*);
getAlivePlayerNum(al::PlayerHolder const*);
getPlayerActor(al::LiveActor const*, int);
getPlayerActor(al::PlayerHolder const*, int);
getPlayerPos(al::LiveActor const*, int);
getPlayerPos(al::PlayerHolder const*, int);
tryGetPlayerActor(al::LiveActor const*, int);
tryGetPlayerActor(al::PlayerHolder const*, int);
isPlayerDead(al::LiveActor const*, int);
isPlayerDead(al::PlayerHolder const*, int);
isPlayerAreaTarget(al::LiveActor const*, int);
isPlayerAreaTarget(al::PlayerHolder const*, int);
tryFindAlivePlayerActorFirst(al::LiveActor const*);
tryFindAlivePlayerActorFirst(al::PlayerHolder const*);
findAlivePlayerActorFirst(al::LiveActor const*);
findAlivePlayerActorFirst(al::PlayerHolder const*);
getPlayerPadRumbleKeeper(al::LiveActor const*, int);
getPlayerPort(al::PlayerHolder const*, int);
getPlayerPort(al::LiveActor const*, int);
findAlivePlayerActorFromPort(al::PlayerHolder const*, int);
tryFindAlivePlayerActorFromPort(al::PlayerHolder const*, int);
findAlivePlayerActorFromPort(al::LiveActor const*, int);
tryFindAlivePlayerActorFromPort(al::LiveActor const*, int);
findNearestPlayerId(al::LiveActor const*, float);
findNearestPlayerActor(al::LiveActor const*);
tryFindNearestPlayerActor(al::LiveActor const*);
findNearestPlayerPos(al::LiveActor const*);
tryFindNearestPlayerPos(sead::Vector3<float>*, al::LiveActor const*);
tryFindNearestPlayerDisatanceFromTarget(float*, al::LiveActor const*, sead::Vector3<float> const&);
isNearPlayer(al::LiveActor const*, float);
isNearPlayerH(al::LiveActor const*, float);
isNearPlayerHCondition(al::LiveActor const*, float, bool (*)(al::LiveActor const*));
getFarPlayerPosMaxX(al::LiveActor const*);
getFarPlayerPosMinX(al::LiveActor const*);
calcPlayerListOrderByDistance(al::LiveActor const*, al::LiveActor const**, unsigned int);
calcAlivePlayerActor(al::LiveActor const*, al::LiveActor const**, unsigned int);
tryFindNearestPlayerActorCondition(al::LiveActor const*, bool (*)(al::LiveActor const*));
tryFindNearestPlayerPosCondition(sead::Vector3<float>*, al::LiveActor const*, bool (*)(al::LiveActor const*));
isResetablePlayerPos(al::LiveActor const*, sead::Vector3<float> const&, float, float);
isResetablePlayerPos(al::LiveActor const*, float);
faceToPlayer(al::LiveActor*);
emitRadialBlur(al::RadialBlurDirector*, sead::Vector3<float> const&, float, float, float, int, int, bool);
emitRadialBlur(al::RadialBlurDirector*, sead::Vector3<float> const&, float, float, float, float, float, float, int, int, bool);
emitRadialBlur(al::RadialBlurDirector*, sead::Vector3<float> const*, float, float, float, float, float, float, int, int, bool);
emitRadialBlur(al::LiveActor const*, sead::Vector3<float> const&, float, float, float, int, int, bool);
emitRadialBlur(al::LiveActor const*, sead::Vector3<float> const&, float, float, float, float, float, float, int, int, bool);
emitRadialBlur(al::LiveActor const*, sead::Vector3<float> const*, float, float, float, float, float, float, int, int, bool);
isUsingViewportHalfZ();
isProjectionReverse();
isMakeLinearDepthProjReverseInfinite();
setClipControlStd();
setClipControl();
applyViewport(agl::DrawContext*, agl::RenderBuffer const&);
applyViewportProjType(agl::DrawContext*, agl::RenderBuffer const&);
calcPlanesByFrustumPoints(al::ViewFrustumPlanes*, al::ViewFrustumPoints const&);
calcFrustumPointsAtViewSpace(al::ViewFrustumPoints*, sead::Matrix44<float> const&);
calcFrustumNearWidth(sead::Matrix44<float> const&);
calcFrustumPointsAtWorldSpace(al::ViewFrustumPoints*, sead::Matrix34<float> const&, sead::Matrix44<float> const&);
calcFrustumPlanesWorldSpace(al::ViewFrustumPlanes*, sead::Matrix34<float> const&, sead::Matrix44<float> const&, al::ViewFrustumPoints*);
calcFrustumPlanesMerge(al::ViewFrustumPlanes*, al::ViewFrustumPoints*, al::ViewFrustumPoints const&, al::ViewFrustumPoints const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
createRailKeeper(al::PlacementInfo const&, char const*);
tryCreateRailKeeper(al::PlacementInfo const&, char const*);
createRailKeeperIndex(al::PlacementInfo const&, int, char const*);
setRailPosToStart(al::IUseRail*);
setRailPosToEnd(al::IUseRail*);
setRailPosToNearestPos(al::IUseRail*, sead::Vector3<float> const&);
setRailPosToCoord(al::IUseRail*, float);
setRailPosToRailPoint(al::IUseRail*, int);
setSyncRailToStart(al::LiveActor*);
syncRailTrans(al::LiveActor*);
setSyncRailToEnd(al::LiveActor*);
setSyncRailToNearestPos(al::LiveActor*, sead::Vector3<float> const&);
setSyncRailToNearestRailControlPoint(al::LiveActor*);
setSyncRailToNearestPos(al::LiveActor*);
setSyncRailToCoord(al::LiveActor*, float);
setSyncRailToRailPoint(al::LiveActor*, int);
moveRail(al::IUseRail*, float);
isRailReachedGoal(al::IUseRail const*);
moveRailLoop(al::IUseRail*, float);
getRailCoord(al::IUseRail const*);
isRailGoingToEnd(al::IUseRail const*);
getRailTotalLength(al::IUseRail const*);
moveRailTurn(al::IUseRail*, float, float);
reverseRail(al::IUseRail*);
isRailReachedNearGoal(al::IUseRail const*, float);
turnToRailDir(al::LiveActor*, float);
calcRailMoveDir(sead::Vector3<float>*, al::IUseRail const*);
turnToRailDirImmediately(al::LiveActor*);
getRailPos(al::IUseRail const*);
moveSyncRail(al::LiveActor*, float);
moveSyncRailLoop(al::LiveActor*, float);
moveSyncRailTurn(al::LiveActor*, float);
calcNearestRailCoord(al::IUseRail const*, sead::Vector3<float> const&);
calcNearestRailPos(sead::Vector3<float>*, al::IUseRail const*, sead::Vector3<float> const&);
calcNearestRailDir(sead::Vector3<float>*, al::IUseRail const*, sead::Vector3<float> const&);
calcNearestRailPosAndDir(sead::Vector3<float>*, sead::Vector3<float>*, al::IUseRail const*, sead::Vector3<float> const&);
calcRailPosDir(sead::Vector3<float>*, sead::Vector3<float>*, al::IUseRail const*, float);
calcRailPointPos(sead::Vector3<float>*, al::IUseRail const*, int);
calcNearestRailPointNo(al::IUseRail const*, sead::Vector3<float> const&);
calcNearestRailPointNo(al::IUseRail const*);
calcCoordNearestRailPointNo(al::IUseRail const*);
getRailPartIndex(al::IUseRail const*);
calcRailPartRate(al::IUseRail const*);
isLoopRail(al::IUseRail const*);
getRailPointNum(al::IUseRail const*);
calcNearestRailPointPosCoord(al::IUseRail const*, sead::Vector3<float> const&);
calcRailCoordByPoint(al::IUseRail const*, int);
calcRailUp(sead::Vector3<float>*, al::IUseRail const*);
getRailPointInfo(al::IUseRail const*, int);
getRailPointNo(al::IUseRail const*);
getNextRailPointNo(al::IUseRail const*);
calcRailToGoalLength(al::IUseRail const*);
calcRailTotalRate(al::IUseRail const*);
calcRailToNextRailPointLength(al::IUseRail const*);
calcRailToPreviousRailPointLength(al::IUseRail const*);
getRailNum(al::IUseRail const*);
getRailDir(al::IUseRail const*);
isRailReachedEnd(al::IUseRail const*);
getRailPartLength(al::IUseRail const*, int);
tryGetCurrentRailPointArg(float*, al::IUseRail const*, char const*);
tryGetNextRailPointArg(float*, al::IUseRail const*, char const*);
tryGetCurrentRailPointArg(int*, al::IUseRail const*, char const*);
tryGetNextRailPointArg(int*, al::IUseRail const*, char const*);
tryGetCurrentRailPointArg(bool*, al::IUseRail const*, char const*);
tryGetNextRailPointArg(bool*, al::IUseRail const*, char const*);
tryGetCurrentRailPointArg(char const**, al::IUseRail const*, char const*);
tryGetNextRailPointArg(char const**, al::IUseRail const*, char const*);
isExistRail(al::IUseRail const*);
isRailReachedStart(al::IUseRail const*);
isRailReachedNearGoal(al::IUseRail const*, float, float);
isRailReachedEdge(al::IUseRail const*);
isRailReachedNearRailPoint(al::IUseRail const*, float);
isRailIncludeBezierPart(al::IUseRail const*);
isRailBezierPart(al::IUseRail const*, int);
isRailPlusDir(al::IUseRail const*, sead::Vector3<float> const&);
isRailPlusPoseSide(al::LiveActor const*);
isRailPlusPoseUp(al::LiveActor const*);
isRailPlusPoseFront(al::LiveActor const*);
calcRailPosAtCoord(sead::Vector3<float>*, al::IUseRail const*, float);
calcRailDirAtCoord(sead::Vector3<float>*, al::IUseRail const*, float);
calcRailPosFront(sead::Vector3<float>*, al::IUseRail const*, float);
calcRailDirFront(sead::Vector3<float>*, al::IUseRail const*, float);
calcRailPointPose(sead::Quat<float>*, al::IUseRail const*, int);
calcRailPointNum(al::IUseRail const*, float, float);
calcForwardRailPointNo(al::IUseRail const*, int);
calcPreviousRailPointNo(al::IUseRail const*, int);
calcRailClippingInfo(sead::Vector3<float>*, float*, al::IUseRail const*, float, float);
setRailClippingInfo(sead::Vector3<float>*, al::LiveActor*, float, float);
calcAndSyncMoveFitRailDir(al::IUseRail*, sead::Vector3<float>*, float, sead::Vector3<float> const&, sead::Vector3<float> const&, bool);
calcAndSyncMoveFitRailDir(al::LiveActor*, sead::Vector3<float>*, float, bool);
createRailModelGroup(al::IUseRail const*, al::ActorInitInfo const&, char const*, char const*);
calcRailDivideNum(al::IUseRail const*, float, bool);
calcRailDivideForcePointNum(al::IUseRail const*, float);
calcRailDivideEquallyNum(al::IUseRail const*, float);
placementRailDivide(al::IUseRail const*, float, bool, al::RailPlacementCallBack const&);
placementRailDivideForcePoint(al::IUseRail const*, float, al::RailPlacementCallBack const&);
placementRailDivideEqually(al::IUseRail const*, float, al::RailPlacementCallBack const&);
calcShortestPath(sead::ObjArray<al::Graph::VertexInfo>*, al::Graph const*, int, int);
calcDistanceAndNearestPos(sead::Vector3<float>*, al::Graph::PosEdge const*, sead::Vector3<float> const&);
findEdgeMinimumWeight(al::Graph const*);
findEdgeMinimumWeight(al::Graph::Vertex const*);
findEdgeMinimumWeight(al::Graph::Edge const**, sead::ConstPtrArray<al::Graph::Edge> const&);
tryFindEdgeStartVertex(al::Graph::Vertex const*, al::Graph::Vertex const*);
tryFindEdgeEndVertex(al::Graph::Vertex const*, al::Graph::Vertex const*);
findNearestPosVertex(al::Graph const*, sead::Vector3<float> const&, float);
findFarthestPosVertex(al::Graph const*, sead::Vector3<float> const&, float);
findPosEdgeByVertexPosUndirect(al::Graph const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
findPosEdgeByVertexPos(al::Graph const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
isDestinationVertex(al::Graph::PosVertex const*, al::Graph::PosVertex const*);
tryRemoveEdgeFromVertex(al::Graph::Vertex*, al::Graph::Edge*);
isExistVertex(al::Graph const*, al::Graph::Vertex const*);
isSpanningTree(al::Graph const*);
isSpanningTree(sead::ConstPtrArray<al::Graph::Edge> const&);
isWalk(sead::ConstPtrArray<al::Graph::Edge> const&);
isTrail(sead::ConstPtrArray<al::Graph::Edge> const&);
isCircuit(sead::ConstPtrArray<al::Graph::Edge> const&);
isPath(sead::ConstPtrArray<al::Graph::Edge> const&);
isCycle(sead::ConstPtrArray<al::Graph::Edge> const&);
calcMinimumSpanningTree(sead::ConstPtrArray<al::Graph::Edge>*, al::Graph const*);
getPrincipalID(al::IUseRanking const*);
getPrincipalID(al::RankingDirector const*);
createRankingStateUploadCommonData(al::IUseRanking*);
createRankingStateUploadCommonData(al::IUseRanking*, void const*, unsigned char);
setDataRankingStateUploadCommonData(al::RankingStateUploadCommonData*, void const*, unsigned char);
createRankingStateUploadScore(al::IUseRanking*);
createRankingStateGetRanking(al::IUseRanking*);
createRankingStateGetCachedTopRanking(al::IUseRanking*);
createRankingStateDeleteScore(al::IUseRanking*);
createRankingStateGetApproxOrder(al::IUseRanking*);
isRankingLastNetworkErrorCodeShouldHandling(al::RankingDirector const*);
isRankingLastNetworkErrorCodeShouldHandling(al::IUseRanking const*);
addResourceCategory(sead::SafeStringBase<char> const&, int, sead::Heap*);
isEmptyCategoryResource(sead::SafeStringBase<char> const&);
createCategoryResourceAll(sead::SafeStringBase<char> const&);
removeResourceCategory(sead::SafeStringBase<char> const&);
getResourceName(al::Resource const*);
getResourcePath(al::Resource const*);
isExistResGraphicsFile(al::Resource const*);
findResource(sead::SafeStringBase<char> const&);
findOrCreateResource(sead::SafeStringBase<char> const&, char const*);
findOrCreateResourceCategory(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&, char const*);
findOrCreateResourceEventData(char const*, char const*);
findOrCreateResourceSystemData(char const*, char const*);
findOrCreateActorResource(al::ActorResourceHolder*, char const*, char const*);
findOrCreateActorResourceWithAnimResource(al::ActorResourceHolder*, char const*, char const*, char const*, bool);
isExistResourceYaml(al::Resource const*, char const*, char const*);
isExistResourceYaml(al::ActorResource const*, char const*, char const*);
findResourceYaml(al::Resource const*, char const*, char const*);
findResourceYaml(al::ActorResource const*, char const*, char const*);
tryFindStageParameterFileDesign(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&, int);
loadCategoryArchiveAll(sead::SafeStringBase<char> const&);
setCurrentCategoryName(char const*);
resetCurrentCategoryName();
setCurrentCategoryNameDefault();
getBymlFromObjectResource(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&);
tryGetBymlFromObjectResource(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&);
getBymlFromLayoutResource(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&);
tryGetBymlFromLayoutResource(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&);
tryGetBymlFromArcName(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&);
getBymlFromArcName(sead::SafeStringBase<char> const&, sead::SafeStringBase<char> const&);
getByml(al::Resource const*, sead::SafeStringBase<char> const&);
tryGetByml(al::Resource const*, sead::SafeStringBase<char> const&);
setAudioPlayerToResourceSystem(al::SeadAudioPlayer*, al::SeadAudioPlayer*);
getSaveDataWorkBuffer();
isInitializedSaveData();
requestInitSaveDir(char const*, unsigned int, unsigned int);
requestFormatSaveData(int, int);
requestReadSaveData(char const*, unsigned int, unsigned int);
requestWriteSaveData(char const*, unsigned int, unsigned int, bool);
requestFlushSaveData();
initSaveDirSync(char const*, unsigned int, unsigned int);
formatSaveDataSync(int, int);
readSaveDataSync(char const*, unsigned int, unsigned int);
writeSaveDataSync(char const*, unsigned int, unsigned int);
copyReadSaveDataFromBuffer(void*, unsigned int);
copyWriteSaveDataToBuffer(void const*, unsigned int);
updateSaveDataSequence();
isSuccessSaveDataSequence();
isDoneSaveDataSequence();
isCorruptedSaveDataSequenceRead();
isCorruptedSaveDataSequenceResult();
getSaveDataSequenceResult();
getLastSaveDataFSErrorCode();
createSceneObj(al::IUseSceneObjHolder const*, int);
setSceneObj(al::IUseSceneObjHolder const*, al::ISceneObj*, int);
getSceneObj(al::IUseSceneObjHolder const*, int);
tryGetSceneObj(al::IUseSceneObjHolder const*, int);
isExistSceneObj(al::IUseSceneObjHolder const*, int);
deleteSceneObj(al::IUseSceneObjHolder const*, int);
tryDeleteSceneObj(al::IUseSceneObjHolder const*, int);
getStageInfoMapNum(al::Scene const*);
getStageInfoDesignNum(al::Scene const*);
getStageInfoSoundNum(al::Scene const*);
getStageInfoMap(al::Scene const*, int);
getStageInfoDesign(al::Scene const*, int);
getStageInfoSound(al::Scene const*, int);
getStageResourceMap(al::Scene const*, int);
tryGetStageResourceDesign(al::Scene const*, int);
tryGetStageResourceSound(al::Scene const*, int);
getSceneFrameBufferMain(al::Scene const*);
getSceneDrawContext(al::Scene const*);
getSceneFrameBufferConsole(al::Scene const*);
getSceneFrameBufferHandheld(al::Scene const*);
getSceneFrameBufferMainAspect(al::Scene const*);
isChangedGraphicsQualityMode(al::Scene const*);
getSceneAreaObjDirector(al::Scene const*);
getSceneExecuteDirector(al::Scene const*);
getScenePlayerHolder(al::Scene const*);
getSceneItemDirector(al::Scene const*);
initActorInitInfo(al::ActorInitInfo*, al::Scene const*, al::PlacementInfo const*, al::LayoutInitInfo const*, al::ActorFactory const*, al::SceneMsgCtrl*, al::GameDataHolderBase*);
initLayoutInitInfo(al::LayoutInitInfo*, al::Scene const*, al::SceneInitInfo const&);
initPlacementAreaObj(al::Scene*, al::ActorInitInfo const&);
initPlacementGravityObj(al::Scene*);
tryGetPlacementInfoAndCount(al::PlacementInfo*, int*, al::StageInfo const*, char const*);
initPlacementObjectMap(al::Scene*, al::ActorInitInfo const&, char const*);
initPlacementByStageInfo(al::StageInfo const*, char const*, al::ActorInitInfo const&);
initPlacementObjectDesign(al::Scene*, al::ActorInitInfo const&, char const*);
initPlacementObjectSound(al::Scene*, al::ActorInitInfo const&, char const*);
tryInitPlacementSingleObject(al::Scene*, al::ActorInitInfo const&, int, char const*);
tryInitPlacementSingleObject(al::Scene*, al::ActorInitInfo const&, int, char const*, char const*);
tryInitPlacementActorGroup(al::LiveActorGroup*, al::Scene*, al::ActorInitInfo const&, int, char const*, char const*);
initPlacementByStageInfoSingle(al::StageInfo const*, char const*, al::ActorInitInfo const&);
tryGetPlacementInfo(al::PlacementInfo*, al::StageInfo const*, char const*);
getPlacementInfo(al::PlacementInfo*, al::StageInfo const*, char const*);
getPlacementInfoAndCount(al::PlacementInfo*, int*, al::StageInfo const*, char const*);
initAreaObjDirector(al::Scene*, al::AreaObjFactory const*);
initDemoDirector(al::Scene*, al::DemoDirector*);
initHitSensorDirector(al::Scene*);
initGravityHolder(al::Scene*);
initItemDirector(al::Scene*, al::ItemDirectorBase*);
initNatureDirector(al::Scene*);
initSwitchAreaDirector(al::Scene*, int, int);
registerSwitchOnAreaGroup(al::Scene*, al::SwitchOnAreaGroup*);
registerSwitchKeepOnAreaGroup(al::Scene*, al::SwitchKeepOnAreaGroup*);
initGraphicsSystemInfo(al::Scene*, char const*, int);
initCameraDirector(al::Scene*, char const*, int, al::CameraPoserFactory const*);
initCameraDirectorWithoutStageResource(al::Scene*, al::CameraPoserFactory const*);
initCameraDirectorFix(al::Scene*, sead::Vector3<float> const&, sead::Vector3<float> const&, al::CameraPoserFactory const*);
initSceneCameraFovyDegree(al::Scene*, float);
initSnapShotCameraAudioKeeper(al::Scene*, al::IUseAudioKeeper*);
setCameraAspect(al::Scene*, float, float);
resetSceneInitEntranceCamera(al::Scene*);
stopCameraByDeathPlayer(al::Scene*);
restartCameraByDeathPlayer(al::Scene*);
startInvalidCameraStopJudgeByDemo(al::Scene*);
endInvalidCameraStopJudgeByDemo(al::Scene*);
startCameraSnapShotMode(al::Scene*, bool);
endCameraSnapShotMode(al::Scene*);
isCameraReverseInputH(al::Scene const*);
onCameraReverseInputH(al::Scene*);
offCameraReverseInputH(al::Scene*);
isCameraReverseInputV(al::Scene const*);
onCameraReverseInputV(al::Scene*);
offCameraReverseInputV(al::Scene*);
getCameraStickSensitivityLevel(al::Scene const*);
setCameraStickSensitivityLevel(al::Scene*, int);
isValidCameraGyro(al::Scene const*);
validateCameraGyro(al::Scene*);
invalidateCameraGyro(al::Scene*);
getCameraGyroSensitivityLevel(al::Scene const*);
setCameraGyroSensitivityLevel(al::Scene*, int);
initAndCreatePauseCameraCtrl(al::Scene*, float);
startCameraPause(al::PauseCameraCtrl*);
endCameraPause(al::PauseCameraCtrl*);
initAudioDirector2D(al::Scene*, al::SceneInitInfo const&, al::AudioDirectorInitInfo&);
initAudioDirector3D(al::Scene*, al::SceneInitInfo const&, al::AudioDirectorInitInfo&);
initAudioDirector3D(al::Scene*, al::SceneInitInfo const&, al::AudioDirectorInitInfo&, sead::LookAtCamera const*, al::Projection const*, al::AreaObjDirector*);
initSceneAudioKeeper(al::Scene*, al::SceneInitInfo const&, char const*);
setIsSafeFinalizingInParallelThread(al::Scene*, bool);
updateKit(al::Scene*);
updateKitTable(al::Scene*, char const*);
updateKitList(al::Scene*, char const*, char const*);
updateKitList(al::Scene*, char const*);
updateLayoutKit(al::Scene*);
updateEffect(al::Scene*);
updateEffectSystem(al::Scene*);
updateEffectPlayer(al::Scene*);
updateEffectDemo(al::Scene*);
updateEffectDemoWithPause(al::Scene*);
updateEffectLayout(al::Scene*);
updateGraphicsPrev(al::Scene*);
updateKitListPrev(al::Scene*);
updateKitListPost(al::Scene*);
updateKitListPostDemoWithPauseNormalEffect(al::Scene*);
updateKitListPostOnNerveEnd(al::Scene*);
drawKit(al::Scene const*, char const*);
drawKitList(al::Scene const*, char const*, char const*);
drawLayoutKit(al::Scene const*, char const*);
drawEffectDeferred(al::Scene const*, int);
startForwardPlayerScreenFader(al::Scene const*, int, int, float);
endForwardPlayerScreenFader(al::Scene const*, int);
isStopScene(al::Scene const*);
startCheckViewCtrlByCameraPos(al::Scene*);
startCheckViewCtrlByLookAtPos(al::Scene*);
startCheckViewCtrlByPlayerPos(al::Scene*);
isExistScreenCoverCtrl(al::Scene const*);
isRequestCaptureScreenCover(al::Scene const*);
resetRequestCaptureScreenCover(al::Scene const*);
isOffDrawScreenCover(al::Scene const*);
resetCaptureScreenCover(al::Scene const*);
validatePostProcessingFilter(al::Scene const*);
invalidatePostProcessingFilter(al::Scene const*);
incrementPostProcessingFilterPreset(al::Scene const*);
decrementPostProcessingFilterPreset(al::Scene const*);
getPostProcessingFilterPresetId(al::Scene const*);
isActiveDemo(al::Scene const*);
getActiveDemoName(al::Scene const*);
getDemoActorList(al::Scene const*);
getDemoActorNum(al::Scene const*);
updateDemoActor(al::Scene const*);
updateDemoActorForPauseEffect(al::Scene const*);
stopAllSe(al::Scene const*, unsigned int);
initPadRumble(al::Scene const*, al::SceneInitInfo const&);
stopPadRumble(al::Scene const*);
pausePadRumble(al::Scene const*);
endPausePadRumble(al::Scene const*);
validatePadRumble(al::Scene*);
invalidatePadRumble(al::Scene*);
setPadRumblePowerLevel(al::Scene*, int);
getPreLoadFileListArc();
tryRequestPreLoadFile(al::Scene const*, al::SceneInitInfo const&, int, sead::Heap*);
getDisplayWidth();
getDisplayHeight();
getSubDisplayWidth();
getSubDisplayHeight();
getLayoutDisplayWidth();
getLayoutDisplayHeight();
getVirtualDisplayWidth();
getVirtualDisplayHeight();
isInScreen(sead::Vector2<float> const&, float);
calcScreenPosFromLayoutPos(sead::Vector2<float>*, sead::Vector2<float> const&);
calcLayoutPosFromScreenPos(sead::Vector2<float>*, sead::Vector2<float> const&);
calcWorldPosFromScreen(sead::Vector3<float>*, sead::Vector2<float> const&, sead::Matrix34<float> const&, float);
calcWorldPosFromScreenPos(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, float);
calcWorldPosFromLayoutPos(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, float);
calcWorldPosFromScreenPos(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, sead::Vector3<float> const&);
calcWorldPosFromLayoutPos(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, sead::Vector3<float> const&);
calcWorldPosFromScreenPosSub(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, float);
calcWorldPosFromLayoutPosSub(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, float);
calcWorldPosFromScreenPosSub(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, sead::Vector3<float> const&);
calcWorldPosFromLayoutPosSub(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, sead::Vector3<float> const&);
calcScreenPosFromWorldPos(sead::Vector2<float>*, al::IUseCamera const*, sead::Vector3<float> const&);
calcLayoutPosFromWorldPos(sead::Vector2<float>*, al::IUseCamera const*, sead::Vector3<float> const&);
calcScreenPosFromWorldPosSub(sead::Vector2<float>*, al::IUseCamera const*, sead::Vector3<float> const&);
calcLayoutPosFromWorldPosSub(sead::Vector2<float>*, al::IUseCamera const*, sead::Vector3<float> const&);
calcLayoutPosFromWorldPos(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector3<float> const&);
calcLayoutPosFromWorldPosWithClampOutRange(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector3<float> const&, float, int);
calcLayoutPosFromWorldPosWithClampOutRange(sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector3<float> const&, float, int);
calcLayoutPosFromWorldPosWithClampByScreen(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector3<float> const&);
calcLayoutPosFromWorldPos(sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector3<float> const&, int);
calcScreenRadiusFromWorldRadius(sead::Vector3<float> const&, al::IUseCamera const*, float);
calcScreenRadiusFromWorldRadiusSub(sead::Vector3<float> const&, al::IUseCamera const*, float);
calcLayoutRadiusFromWorldRadius(sead::Vector3<float> const&, al::IUseCamera const*, float);
calcCameraPosToWorldPosDirFromScreenPos(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, float);
calcCameraPosToWorldPosDirFromScreenPos(sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector2<float> const&, float, int);
calcCameraPosToWorldPosDirFromScreenPos(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, sead::Vector3<float> const&);
calcCameraPosToWorldPosDirFromScreenPos(sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector2<float> const&, sead::Vector3<float> const&, int);
calcCameraPosToWorldPosDirFromScreenPosSub(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, float);
calcCameraPosToWorldPosDirFromScreenPosSub(sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, sead::Vector3<float> const&);
calcLineCameraToWorldPosFromScreenPos(sead::Vector3<float>*, sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, float, float);
calcLineCameraToWorldPosFromScreenPos(sead::Vector3<float>*, sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&);
calcLineCameraToWorldPosFromScreenPosSub(sead::Vector3<float>*, sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&, float, float);
calcLineCameraToWorldPosFromScreenPosSub(sead::Vector3<float>*, sead::Vector3<float>*, al::IUseCamera const*, sead::Vector2<float> const&);
calcWorldPosFromLayoutPos(sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector2<float> const&, float, int);
calcWorldPosFromLayoutPos(sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector2<float> const&, sead::Vector3<float> const&, int);
calcWorldPosFromScreenPos(sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector2<float> const&, float, int);
calcWorldPosFromScreenPos(sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector2<float> const&, sead::Vector3<float> const&, int);
calcLayoutPosFromWorldPos(sead::Vector2<float>*, al::SceneCameraInfo const*, sead::Vector3<float> const&, int);
calcLineCameraToWorldPosFromScreenPos(sead::Vector3<float>*, sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector2<float> const&, float, float, int);
calcLineCameraToWorldPosFromScreenPos(sead::Vector3<float>*, sead::Vector3<float>*, al::SceneCameraInfo const*, sead::Vector2<float> const&, int);
compareScreenPointTarget(al::ScreenPointTargetHitInfo const*, al::ScreenPointTargetHitInfo const*);
compareScreenPointTargetPriorDirectPoint(al::ScreenPointTargetHitInfo const*, al::ScreenPointTargetHitInfo const*);
isExistScreenPointTargetKeeper(al::LiveActor*);
isScreenPointTargetArrayFull(al::LiveActor*);
isExistScreenPointTarget(al::LiveActor*, char const*);
addScreenPointTarget(al::LiveActor*, al::ActorInitInfo const&, char const*, float, char const*, sead::Vector3<float> const&);
hitCheckSegmentScreenPointTarget(al::ScreenPointer*, sead::Vector3<float> const&, sead::Vector3<float> const&);
hitCheckScreenCircleScreenPointTarget(al::ScreenPointer*, sead::Vector2<float> const&, float, float);
hitCheckLayoutCircleScreenPointTarget(al::ScreenPointer*, sead::Vector2<float> const&, float, float, int (*)(al::ScreenPointTargetHitInfo const*, al::ScreenPointTargetHitInfo const*));
isHitScreenPointTarget(al::ScreenPointer*, al::ScreenPointTarget const*);
sendMsgScreenPointTarget(al::SensorMsg const&, al::ScreenPointer*, al::ScreenPointTarget*);
getHitTargetNum(al::ScreenPointer*);
getHitTargetPos(al::ScreenPointer*, int);
getHitTargetRadius(al::ScreenPointer*, int);
getScreenPointTargetNum(al::LiveActor*);
getScreenPointTarget(al::LiveActor*, int);
getScreenPointTargetName(al::LiveActor*, int);
getScreenPointTarget(al::LiveActor*, char const*);
getScreenPointTarget(al::LiveActor const*, char const*);
getScreenPointTargetRadius(al::LiveActor const*, char const*);
getScreenPointTargetPos(al::LiveActor const*, char const*);
getScreenPointTargetPos(al::ScreenPointTarget const*);
getScreenPointTargetRadius(al::ScreenPointTarget const*);
getScreenPointTargetHost(al::ScreenPointTarget*);
getScreenPointTargetOffset(al::LiveActor*, char const*);
getScreenPointTargetName(al::ScreenPointTarget const*);
getScreenPointTargetHostName(al::ScreenPointTarget const*);
setScreenPointTargetRadius(al::LiveActor*, char const*, float);
setScreenPointTargetOffset(al::LiveActor*, char const*, sead::Vector3<float> const&);
validateScreenPointTargetAll(al::LiveActor*);
invalidateScreenPointTargetAll(al::LiveActor*);
isScreenPointTargetName(al::ScreenPointTarget const*, char const*);
isScreenPointTargetValid(al::ScreenPointTarget const*);
validateScreenPointTarget(al::LiveActor*, char const*);
invalidateScreenPointTarget(al::LiveActor*, char const*);
startSe(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&);
verifySeKeeperNull(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&);
tryStartSe(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&);
holdSe(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&);
tryHoldSe(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&);
startSeWithParam(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, float, char const*);
tryStartSeWithParam(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, float, char const*);
holdSeWithParam(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, float, char const*);
tryHoldSeWithParam(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, float, char const*);
startSeWithMeInfo(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, al::MeInfo const*);
holdSeWithMeInfo(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, al::MeInfo const*);
startSeWithManualControl(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, al::SePlayParamList const*, char const*, sead::Vector3<float> const*);
tryStartSeWithManualControl(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, al::SePlayParamList const*, char const*, sead::Vector3<float> const*);
holdSeWithManualControl(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, al::SePlayParamList const*, char const*, sead::Vector3<float> const*);
tryHoldSeWithManualControl(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, al::SePlayParamList const*, char const*, sead::Vector3<float> const*);
stopSe(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, int, char const*);
stopSeWithoutFreezed(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, int, char const*);
tryStopSe(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, int, char const*);
tryStopAllSeFromUser(al::IUseAudioKeeper const*, int, char const*);
stopAllSeFromUser(al::IUseAudioKeeper const*, int, char const*);
isPlayingAnySe(al::IUseAudioKeeper const*, char const*);
checkIsPlayingSe(al::IUseAudioKeeper const*, sead::SafeStringBase<char> const&, char const*);
setLifeTimeForHoldCall(al::IUseAudioKeeper const*, char const*, int, char const*);
setSeSourceVolume(al::IUseAudioKeeper const*, float);
setSeKeeperPlayNamePrefix(al::IUseAudioKeeper const*, char const*);
resetSeKeeperPlayNamePrefix(al::IUseAudioKeeper const*);
isExistSeKeeper(al::IUseAudioKeeper const*);
forceActivateSeKeeper(al::IUseAudioKeeper*);
validateSeKeeper(al::IUseAudioKeeper*);
invalidateSeKeeper(al::IUseAudioKeeper*);
setSeEmitterPoseMtxPtr(al::IUseAudioKeeper const*, sead::Matrix34<float> const*, char const*);
setSeEmitterPosePosPtr(al::IUseAudioKeeper const*, sead::Vector3<float> const*, char const*);
tryUpdateSeMaterialCode(al::IUseAudioKeeper*, char const*);
updateSeMaterialWater(al::IUseAudioKeeper*, bool);
updateSeMaterialWet(al::IUseAudioKeeper*, bool);
updateSeMaterialBeyondWall(al::IUseAudioKeeper*, bool);
updateSeMaterialPuddle(al::IUseAudioKeeper*, bool);
resetSeMaterialName(al::IUseAudioKeeper const*);
setSeModifier(al::IUseAudioKeeper const*, al::ISeModifier*);
setSeUserSyncParamPtr(al::IUseAudioKeeper const*, float const*, char const*);
setSeUserSyncParamPtrInt(al::IUseAudioKeeper const*, int const*, char const*);
setSeOutputFromController(al::SePlayParamList*, int, bool);
setSeOutputTvDrcRemoteAll(al::SePlayParamList*);
initSceneCreator(al::IUseSceneCreator*, al::SequenceInitInfo const&, al::GameDataHolderBase*, al::AudioDirector*, al::ScreenCaptureExecutor*, alSceneFunction::SceneFactory*);
createSceneAndInit(al::IUseSceneCreator*, char const*, char const*, int, char const*);
createSceneAndUseInitThread(al::IUseSceneCreator*, char const*, int, char const*, int, char const*);
setSceneAndInit(al::IUseSceneCreator*, al::Scene*, char const*, int, char const*);
setSceneAndUseInitThread(al::IUseSceneCreator*, al::Scene*, int, char const*, int, char const*, sead::Heap*);
tryEndSceneInitThread(al::IUseSceneCreator*);
isExistSceneInitThread(al::IUseSceneCreator const*);
initAudioDirector(al::Sequence*, al::AudioSystemInfo*, al::AudioDirectorInitInfo&);
setSequenceAudioKeeperToSceneSeDirector(al::Sequence*, al::Scene*);
setSequenceNameForActorPickTool(al::Sequence*, al::Scene*);
createUniformBlock(al::UniformBlockLayout const*, int, sead::Heap*, int);
declareUniformBlock(agl::UniformBlock*, al::UniformBlockLayout const*, int, sead::Heap*);
createUniformBlockInstanceNum(al::UniformBlockLayout const*, int, int, sead::Heap*, int);
allocUniformBlock(al::UniformBlockLayout const*, int, al::GpuMemAllocator*, int);
setUniformBlockToShader(al::UniformBlock*, agl::DrawContext*, agl::ShaderProgram const&, char const*, int);
activateUniformBlockAssign(agl::DrawContext*, al::UniformBlockAssign const&, int);
activateUniformBlockAssignArray(agl::DrawContext*, al::UniformBlockAssignArray const&, int);
createModelAdditionalInfoUniformBlockAssign(al::ModelCtrl*, al::UniformBlockLayout const*, int, int, al::GpuMemAllocator*);
getUniformBlockLocationMdlAddInfo();
findUniformBlockAssign(al::UniformBlockAssignArray const*, char const*);
swapUniformBlockAssignArray(al::UniformBlockAssignArray const*);
activateShader(agl::DrawContext*, nn::g3d::ResShaderProgram const*);
tryBindShaderAssign(al::ModelShaderAssign*, nn::g3d::MaterialObj const*, nn::g3d::ShapeObj const*, al::ModelShader*, char const*);
initShaderKeyStatic(nn::g3d::ShadingModelObj*, nn::g3d::ResShaderAssign const*, nn::g3d::ModelObj const*, nn::g3d::ShapeObj const*, al::ModelShaderOptionCache*);
initShaderKeyDynamic(nn::g3d::ShaderSelector*, nn::g3d::ResShaderAssign const*, nn::g3d::ModelObj const*, nn::g3d::ShapeObj const*);
searchVariation(nn::g3d::ResShadingModel const*, int, char const* const*, char const* const*);
trySearchVariation(nn::g3d::ResShadingModel const*, int, char const* const*, char const* const*);
searchVariationMacroValue(nn::g3d::ShadingModelObj const*, char const*);
searchVariationMacroValue(nn::g3d::ShaderSelector const*, char const*);
getShaderProgramName(nn::g3d::ShadingModelObj const*);
getUniformBlockLocationMdlEnvView();
getUniformBlockLocationMdlMtx();
getUniformBlockLocationShp();
getUniformBlockLocationRenderSky();
getUniformBlockLocationEchoBlock();
getUniformBlockLocationHdrTranslate();
getUniformBlockLocationLightEnv();
getUniformBlockLocationShadowMap();
getUniformBlockLocationOtherFirst();
getUniformBlockLocationOtherSecond();
getUniformBlockLocationOtherThird();
getSamplerLocationUniform0();
getSamplerLocationUniform1();
getSamplerLocationUniform2();
getSamplerLocationUniform3();
getSamplerLocationLinearDepth();
getSamplerLocationGBufferBaseColor();
getSamplerLocationGBufferNormal();
getSamplerLocationCubeMapRoughness();
getSamplerLocationMirrorTex();
getSamplerLocationIndirectTex();
getSamplerLocationDirLitTex();
getSamplerLocationMaterialLight();
getSamplerLocationShadowBuffer();
getSamplerLocationMaterialLightSphere();
getSamplerLocationShadowMap();
getSamplerLocationCubeMapRoughnessRefract();
getSamplerLocationProgTexture0();
getSamplerLocationExposure();
getSamplerLocationProgTextureCubemapGem0();
getSamplerLocationProgTextureProcedural2D();
getSamplerLocationProgTextureProcedural3D();
getSamplerLocationFootPrintNormal();
getSamplerLocationFootPrintBaseColor();
getSamplerLocationHackStart();
tryChangeShaderMode(agl::DrawContext*, agl::ShaderMode);
forceChangeShaderMode(agl::DrawContext*, agl::ShaderMode);
createMakeHalfTextureUbo();
calcTanFovyHalf(sead::Vector2<float>*, sead::Vector2<float>*, float, float, sead::Vector2<float> const&);
calcMaxMipLevelNum(int);
getWhite2DSampler();
getBlack2DSampler();
getRed2DSampler();
getGreen2DSampler();
getBlue2DSampler();
getBlackCubeSampler();
getWhite2DTexture();
getBlack2DTexture();
getRed2DTexture();
getGreen2DTexture();
getBlue2DTexture();
getBlackCubeTexture();
makeSamplerLoc(agl::ShaderProgram const&, char const*);
loadTextureInfoArray(al::TextureInfoArray*, char const*, char const*, char const*, bool);
tryLoadTextureInfoArray(al::TextureInfoArray*, char const*, char const*, char const*, bool);
createAndConvertOcclusionDummy(al::LiveActor*);
isExistShadow(al::LiveActor*);
isExistShadowMaskCtrl(al::LiveActor*);
isExistShadowMask(al::LiveActor*, char const*);
isExistDepthShadow(al::LiveActor*);
isExistDepthShadowMapCtrl(al::LiveActor*);
isExistAnyShadowCtrl(al::LiveActor*);
isHideShadowMask(al::LiveActor const*);
hideShadow(al::LiveActor*);
showShadow(al::LiveActor*);
showShadowMask(al::LiveActor*);
showShadowMask(al::LiveActor*, al::ShadowMaskBase*);
showShadowMask(al::LiveActor*, char const*);
showShadowMask(al::LiveActor*, al::ShadowMaskDrawCategory);
hideShadowMask(al::LiveActor*);
hideShadowMask(al::LiveActor*, al::ShadowMaskBase*);
hideShadowMask(al::LiveActor*, char const*);
hideShadowMask(al::LiveActor*, al::ShadowMaskDrawCategory);
isHideShadowMask(al::LiveActor*, char const*);
showDepthShadowMap(al::LiveActor*, int);
showDepthShadowMap(al::LiveActor const*, al::DepthShadowMapInfo*);
showDepthShadowMap(al::LiveActor*, char const*);
hideDepthShadowMap(al::LiveActor*, int);
hideDepthShadowMap(al::LiveActor const*, al::DepthShadowMapInfo*);
hideDepthShadowMap(al::LiveActor*, char const*);
isHideDepthShadowMap(al::LiveActor*, char const*);
isHideDepthShadowMap(al::LiveActor*, int);
getDepthShadowMapNum(al::LiveActor*);
validateShadowMask(al::LiveActor*);
validateShadowMask(al::LiveActor*, al::ShadowMaskBase*);
validateShadowMask(al::LiveActor*, char const*);
invalidateShadowMask(al::LiveActor*);
invalidateShadowMask(al::LiveActor*, al::ShadowMaskBase*);
invalidateShadowMask(al::LiveActor*, char const*);
validateDepthShadowMap(al::LiveActor*);
validateDepthShadowMap(al::LiveActor*, al::DepthShadowMapInfo*);
validateDepthShadowMap(al::LiveActor*, char const*);
invalidateDepthShadowMap(al::LiveActor*);
invalidateDepthShadowMap(al::LiveActor*, al::DepthShadowMapInfo*);
invalidateDepthShadowMap(al::LiveActor*, char const*);
invalidateShadowMask(al::LiveActor*, al::ShadowMaskDrawCategory);
invalidateShadowMaskIntensityAll(al::LiveActor*);
setShadowMaskFixed(al::LiveActor*, bool);
setShadowMaskDropDir(al::LiveActor*, sead::Vector3<float> const&);
setShadowMaskDropDir(al::LiveActor*, sead::Vector3<float> const&, char const*);
setShadowMaskDropDirActorDown(al::LiveActor*);
setShadowMaskSize(al::LiveActor*, char const*, sead::Vector3<float> const&);
setShadowMaskSize(al::LiveActor*, char const*, float, float, float);
setShadowTextureOffset(al::LiveActor*, char const*, float, float);
onShadowTextureScroll(al::LiveActor*, char const*);
offShadowTextureScroll(al::LiveActor*, char const*);
calcShadowMaskSize(sead::Vector3<float>*, al::LiveActor*, char const*);
getShadowMaskDropLength(al::LiveActor const*, char const*);
setShadowMaskDropLength(al::LiveActor*, float);
setShadowMaskDropLength(al::LiveActor*, float, char const*);
setShadowMaskDropLengthScaleWithDrawCategory(al::LiveActor*, float, al::ShadowMaskDrawCategory);
setShadowMaskDropLengthWithDrawCategory(al::LiveActor*, float, al::ShadowMaskDrawCategory);
setShadowMaskDropLengthEvenWithTarget(al::ShadowMaskBase*, char const*, sead::Vector3<float> const&);
setShadowMaskDropLengthEvenWithTarget(al::ShadowMaskBase*, al::ShadowMaskBase const*, sead::Vector3<float> const&);
setShadowMaskDropLengthEvenWithDrawCategory(al::LiveActor*, al::ShadowMaskDrawCategory, al::LiveActor const*, char const*);
setShadowMaskDropLengthEvenPlaneNormal(al::LiveActor const*, sead::Vector3<float> const&);
getDepthShadowMapWidth(al::LiveActor const*, char const*);
getDepthShadowMapHeight(al::LiveActor const*, char const*);
setDepthShadowMapSize(al::LiveActor const*, int, int, char const*);
getDepthShadowMapLength(al::LiveActor const*, char const*);
setDepthShadowMapLength(al::LiveActor const*, float, char const*);
setDepthShadowMapLengthFromActorTransFlag(al::LiveActor const*, bool, char const*);
setDepthShadowMapBoundingBox(al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, char const*);
setDepthShadowMapMaskTypeNone(al::LiveActor const*, char const*);
setDepthShadowMapMaskTypeSelf(al::LiveActor const*, char const*);
setEnableDepthShadowMapBottomGradation(al::LiveActor const*, char const*, bool);
isEnableDepthShadowMapBottomGradation(al::LiveActor const*, char const*);
setDepthShadowMapBottomGradationLength(al::LiveActor const*, char const*, float);
getDepthShadowMapBottomGradationLength(al::LiveActor const*, char const*);
isAppendSubActorDepthShadowMap(al::LiveActor const*);
getShadowMaskDropLengthMax(al::LiveActor const*);
setShadowMaskColor(al::LiveActor const*, char const*, sead::Color4f const&);
getShadowMaskColor(al::LiveActor const*, char const*);
setShadowMaskIntensity(al::LiveActor const*, char const*, float);
getShadowMaskIntensity(al::LiveActor const*, char const*);
getShadowMaskTextureFixedScale(al::LiveActor const*, char const*);
setShadowMaskTextureFixedScale(al::LiveActor const*, char const*, float);
getShadowMaskOffset(al::LiveActor const*, char const*);
setShadowMaskOffset(al::LiveActor const*, sead::Vector3<float> const&, char const*);
isExistOcclusionLightPosPtr(al::LiveActor const*, char const*);
setOcclusionLightPosPtr(al::LiveActor const*, char const*, sead::Vector3<float> const*);
setOcclusionAddOffset(al::LiveActor const*, char const*, sead::Vector3<float> const&);
enableOcclusion(al::LiveActor const*, char const*);
disableOcclusion(al::LiveActor const*, char const*);
isEnableOcclusion(al::LiveActor const*, char const*);
calcSphereDoBoundingInfo(sead::Vector3<float>*, sead::Vector3<float>*, float*, float*, al::LiveActor const*, char const*, float);
calcOcclusionSpherePos(sead::Vector3<float>*, al::LiveActor const*, char const*);
changeOcclusionGroup(al::LiveActor const*, char const*, char const*);
getOcclusionSphere(al::LiveActor const*, char const*);
setOcclusionIgnoreHostHide(al::LiveActor const*, bool);
findIsInShade(al::LiveActor const*, sead::Vector3<float> const&);
requestDepthShadowMapLightDir(al::LiveActor const*, sead::Vector3<float> const&, char const*);
resetRequestDepthShadowMapLightDir(al::LiveActor const*, char const*);
isRequestDepthShadowMapLightDir(al::LiveActor const*, char const*);
onDepthShadowModel(al::LiveActor*);
offDepthShadowModel(al::LiveActor*);
updateDepthShadowMapCtrlShapeVisible(al::LiveActor*);
isShadowMaskLbufAdd(int);
isShadowMaskLbufScale(int);
isShadowMaskAO(int);
isShadowMaskShadow(int);
makeStageDataArchivePath(sead::BufferedSafeStringBase<char>*, char const*, char const*);
initStageSwitch(al::IUseStageSwitch*, al::StageSwitchDirector*, al::PlacementInfo const&);
isValidStageSwitch(al::IUseStageSwitch const*, char const*);
isOnStageSwitch(al::IUseStageSwitch const*, char const*);
onStageSwitch(al::IUseStageSwitch*, char const*);
offStageSwitch(al::IUseStageSwitch*, char const*);
tryOnStageSwitch(al::IUseStageSwitch*, char const*);
tryOffStageSwitch(al::IUseStageSwitch*, char const*);
isSameStageSwitch(al::IUseStageSwitch const*, al::IUseStageSwitch const*, char const*);
isValidSwitchAppear(al::IUseStageSwitch const*);
isOnSwitchAppear(al::IUseStageSwitch const*);
isValidSwitchKill(al::IUseStageSwitch const*);
isValidSwitchDeadOn(al::IUseStageSwitch const*);
onSwitchDeadOn(al::IUseStageSwitch*);
offSwitchDeadOn(al::IUseStageSwitch*);
tryOnSwitchDeadOn(al::IUseStageSwitch*);
tryOffSwitchDeadOn(al::IUseStageSwitch*);
isValidSwitchStart(al::IUseStageSwitch const*);
isOnSwitchStart(al::IUseStageSwitch const*);
listenStageSwitchOn(al::IUseStageSwitch*, char const*, al::FunctorBase const&);
listenStageSwitchOff(al::IUseStageSwitch*, char const*, al::FunctorBase const&);
listenStageSwitchOnOff(al::IUseStageSwitch*, char const*, al::FunctorBase const&, al::FunctorBase const&);
listenStageSwitchOnAppear(al::IUseStageSwitch*, al::FunctorBase const&);
listenStageSwitchOnOffAppear(al::IUseStageSwitch*, al::FunctorBase const&, al::FunctorBase const&);
listenStageSwitchOnKill(al::IUseStageSwitch*, al::FunctorBase const&);
listenStageSwitchOnOffKill(al::IUseStageSwitch*, al::FunctorBase const&, al::FunctorBase const&);
trySyncStageSwitchOnOffAppear(al::IUseStageSwitch*, al::FunctorBase const&, al::FunctorBase const&);
trySyncStageSwitchOnOffKill(al::IUseStageSwitch*, al::FunctorBase const&, al::FunctorBase const&);
trySyncStageSwitchOnOffAppearAndKill(al::IUseStageSwitch*, al::FunctorBase const&, al::FunctorBase const&);
listenStageSwitchOnStart(al::IUseStageSwitch*, al::FunctorBase const&);
listenStageSwitchOnOffStart(al::IUseStageSwitch*, al::FunctorBase const&, al::FunctorBase const&);
listenStageSwitchOnStop(al::IUseStageSwitch*, al::FunctorBase const&);
isPerformanceNormal(al::ApplicationMessageReceiver const*);
isPerformanceBoost(al::ApplicationMessageReceiver const*);
getPerformanceConfiguration(nn::oe::PerformanceMode);
getPerformanceConfiguration(al::ApplicationMessageReceiver const*);
getCpuPerformance(nn::oe::PerformanceMode);
getCpuPerformance(al::ApplicationMessageReceiver const*);
getCpuPerformance(al::LiveActor const*);
getGpuPerformance(nn::oe::PerformanceMode);
getGpuPerformance(al::ApplicationMessageReceiver const*);
getGpuPerformance(al::LiveActor const*);
getMemoryPerformance(nn::oe::PerformanceMode);
getMemoryPerformance(al::ApplicationMessageReceiver const*);
getMemoryPerformance(al::LiveActor const*);
setCpuPerformance(al::CpuPerformance, nn::oe::PerformanceMode);
setCpuPerformance(al::CpuPerformance, al::ApplicationMessageReceiver const*);
setGpuPerformance(al::GpuPerformance, nn::oe::PerformanceMode);
setGpuPerformance(al::GpuPerformance, al::ApplicationMessageReceiver const*);
setMemoryPerformance(al::MemoryPerformance, nn::oe::PerformanceMode);
setMemoryPerformance(al::MemoryPerformance, al::ApplicationMessageReceiver const*);
createTexture(int, int, unsigned char**);
calcOrthoProjectedTexCoord(sead::Vector2<float>*, sead::Matrix34<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
isInsideTexture(sead::Vector2<int> const&, agl::TextureData const*);
createAglTextureData(agl::TextureFormat, int, int, int, agl::TextureAttribute);
initAglTextureData(agl::TextureData*, agl::TextureFormat, int, int, int, agl::TextureAttribute);
createAglTextureDataLinear(agl::TextureFormat, int, int, int);
initAglTextureDataLinear(agl::TextureData*, agl::TextureFormat, int, int, int);
destroyAglTextureAndImage(agl::TextureData**);
drawColorCircle(agl::DrawContext*, sead::Color4f const&, sead::Matrix34<float> const&, sead::Matrix44<float> const&);
makeTextureDataFromArchive(agl::TextureData*, char const*, char const*, char const*);
tryMakeTextureDataFromArchive(agl::TextureData*, char const*, char const*, char const*);
getColor(agl::TextureData const*, int, int);
getColorFromLinearTexture(agl::TextureData const*, int, int);
getF32FromLinearTextureF16(agl::TextureData const*, int, int, int, int);
getF32FromLinearTextureF32(agl::TextureData const*, int, int, int, int);
calcNormalFromLinearTexture(sead::Vector3<float>*, agl::TextureData const*, int, int);
activateSampler(agl::DrawContext*, agl::TextureSampler const*, agl::ShaderProgram const*, char const*);
createAndStartInitializeThread(sead::Heap*, int, al::FunctorBase const&);
tryWaitDoneAndDestroyInitializeThread(al::InitializeThread*);
getCurrentCoreId();
tryGetByamlU8(unsigned char*, al::ByamlIter const&, char const*);
tryGetByamlU16(unsigned short*, al::ByamlIter const&, char const*);
tryGetByamlS16(short*, al::ByamlIter const&, char const*);
tryGetByamlS32(int*, al::ByamlIter const&, char const*);
tryGetByamlU32(unsigned int*, al::ByamlIter const&, char const*);
tryGetByamlS64(long*, al::ByamlIter const&, char const*);
tryGetByamlU64(unsigned long*, al::ByamlIter const&, char const*);
tryGetByamlF32(float*, al::ByamlIter const&, char const*);
tryGetByamlV2f(sead::Vector2<float>*, al::ByamlIter const&);
tryGetByamlV3f(sead::Vector3<float>*, al::ByamlIter const&);
tryGetByamlV4f(sead::Vector4<float>*, al::ByamlIter const&);
tryGetByamlScale(sead::Vector3<float>*, al::ByamlIter const&);
tryGetByamlV2s32(sead::Vector2<int>*, al::ByamlIter const&);
tryGetByamlV3s32(sead::Vector3<int>*, al::ByamlIter const&);
tryGetByamlBox3f(sead::BoundBox3<float>*, al::ByamlIter const&);
tryGetByamlV3f(sead::Vector3<float>*, al::ByamlIter const&, char const*);
tryGetByamlV2f(sead::Vector2<float>*, al::ByamlIter const&, char const*);
tryGetByamlV4f(sead::Vector4<float>*, al::ByamlIter const&, char const*);
tryGetByamlScale(sead::Vector3<float>*, al::ByamlIter const&, char const*);
tryGetByamlV2s32(sead::Vector2<int>*, al::ByamlIter const&, char const*);
tryGetByamlV3s32(sead::Vector3<int>*, al::ByamlIter const&, char const*);
tryGetByamlBox3f(sead::BoundBox3<float>*, al::ByamlIter const&, char const*);
tryGetByamlString(char const**, al::ByamlIter const&, char const*);
tryGetByamlColor(sead::Color4f*, al::ByamlIter const&);
tryGetByamlColor(sead::Color4f*, al::ByamlIter const&, char const*);
tryGetByamlBool(bool*, al::ByamlIter const&, char const*);
getByamlKeyString(al::ByamlIter const&, char const*);
getByamlKeyInt(al::ByamlIter const&, char const*);
getByamlKeyFloat(al::ByamlIter const&, char const*);
getByamlKeyBool(al::ByamlIter const&, char const*);
tryGetByamlKeyStringOrNULL(al::ByamlIter const&, char const*);
tryGetByamlKeyIntOrZero(al::ByamlIter const&, char const*);
tryGetByamlKeyU32OrZero(al::ByamlIter const&, char const*);
tryGetByamlKeyFloatOrZero(al::ByamlIter const&, char const*);
tryGetByamlKeyBoolOrFalse(al::ByamlIter const&, char const*);
tryGetByamlIterByKey(al::ByamlIter*, al::ByamlIter const&, char const*);
getByamlIterByKey(al::ByamlIter*, al::ByamlIter const&, char const*);
getByamlIterByIndex(al::ByamlIter*, al::ByamlIter const&, int);
isTypeBoolByIndex(al::ByamlIter const&, int);
isTypeBoolByKey(al::ByamlIter const&, char const*);
isTypeIntByIndex(al::ByamlIter const&, int);
isTypeIntByKey(al::ByamlIter const&, char const*);
isTypeFloatByIndex(al::ByamlIter const&, int);
isTypeFloatByKey(al::ByamlIter const&, char const*);
isTypeStringByIndex(al::ByamlIter const&, int);
isTypeStringByKey(al::ByamlIter const&, char const*);
isTypeArrayByIndex(al::ByamlIter const&, int);
isTypeArrayByKey(al::ByamlIter const&, char const*);
isTypeHashByIndex(al::ByamlIter const&, int);
isTypeHashByKey(al::ByamlIter const&, char const*);
tryGetByamlKeyAndIntByIndex(char const**, int*, al::ByamlIter const&, int);
getByamlIterDataNum(al::ByamlIter const&);
printByamlIter(unsigned char const*);
printByamlIter(al::ByamlIter const&);
calcDecibelToRatio(float);
calcRatioToDecibel(float);
calcDecibelToRatioByTable(float);
calcRatioToDecibelByTable(float);
createRollingCubePoseKeeper(al::LiveActor const*, al::ActorInitInfo const&);
createRollingCubePoseKeeper(sead::BoundBox3<float> const&, al::ActorInitInfo const&);
nextRollingCubeKey(al::RollingCubePoseKeeper*);
setStartRollingCubeKey(al::RollingCubePoseKeeper*);
setRollingCubeKeyIndex(al::RollingCubePoseKeeper*, int);
isMoveTypeLoopRollingCube(al::RollingCubePoseKeeper const*);
fittingToCurrentKeyBoundingBox(sead::Quat<float>*, sead::Vector3<float>*, al::RollingCubePoseKeeper const*);
calcCurrentKeyQT(sead::Quat<float>*, sead::Vector3<float>*, al::RollingCubePoseKeeper const*, sead::Quat<float> const&, sead::Vector3<float> const&, float);
getCurrentKeyQT(sead::Quat<float>*, sead::Vector3<float>*, al::RollingCubePoseKeeper const*);
getCurrentKeyRotateDegree(al::RollingCubePoseKeeper const*);
getCurrentKeySlideVec(al::RollingCubePoseKeeper const*);
getCurrentKeyIndex(al::RollingCubePoseKeeper const*);
getCurrentKeyPlacementInfo(al::RollingCubePoseKeeper const*);
isMovementCurrentKeyRotate(al::RollingCubePoseKeeper const*);
isMovementCurrentKeySlide(al::RollingCubePoseKeeper const*);
calcDistanceCurrentKeyRotateCenterToBoxCenter(al::RollingCubePoseKeeper const*);
calcRollingCubeClippingInfo(sead::Vector3<float>*, float*, al::RollingCubePoseKeeper const*, float);
calcMtxLandEffect(sead::Matrix34<float>*, al::RollingCubePoseKeeper const*, sead::Quat<float> const&, sead::Vector3<float> const&);
makeLayoutArchivePath(sead::BufferedSafeStringBase<char>*, sead::SafeStringBase<char> const&, bool);
makeLayoutResourcePath(sead::BufferedSafeStringBase<char>*, sead::SafeStringBase<char> const&, bool);
initLayoutSceneInfo(al::LayoutActor*, al::LayoutInitInfo const&);
initLayoutEffectKeeper(al::LayoutActor*, al::LayoutInitInfo const&, char const*);
initLayoutSeKeeper(al::LayoutActor*, al::LayoutInitInfo const&, char const*);
initLayoutBgmKeeper(al::LayoutActor*, al::LayoutInitInfo const&, char const*);
initHitReactionKeeper(al::LayoutActor*, al::LayoutInitInfo const&, al::Resource const*, char const*);
initLayoutMessage(al::LayoutKeeper*, al::LayoutInitInfo const&, al::Resource const*);
initDrawInfoDefault(nn::ui2d::DrawInfo*, nn::ui2d::GraphicsResource*);
initDrawInfo(nn::ui2d::DrawInfo*, nn::ui2d::GraphicsResource*, nn::font::Rectangle const&);
initLayoutKeeper(al::LayoutKeeper*, al::LayoutInitInfo const&, al::Resource const*, al::CustomTagProcessor*, bool);
createTagProcessor(al::LayoutInitInfo const&, al::Resource const*);
reallocateTextBoxStringBuffer(al::LayoutActor*, al::Resource const*, char const*);
executeUpdate(al::LiveActorKit*, char const*);
executeUpdateTable(al::LiveActorKit*, char const*);
executeUpdateList(al::LiveActorKit*, char const*, char const*);
executeDraw(al::LiveActorKit const*, char const*);
executeDrawList(al::LiveActorKit const*, char const*, char const*);
isActiveDraw(al::LiveActorKit const*, char const*);
executeUpdateDrawBuffer(al::LiveActorKit const*);
waitUpdateDrawBuffer(al::LiveActorKit const*);
executeUpdateCalcView(al::LiveActorKit const*);
waitUpdateCalcView(al::LiveActorKit const*);
incrementDrawBufferCounter(al::LiveActorKit const*);
sRtpcInputTypeDefault;
sSeFluctuationTypeDefault;
sFileName;
sVoicePlayParamForest;
sVoicePlayParamSnowMan;
sVoicePlayParamSnowManLeader;
sVoicePlayParamLavaMan;
sVoicePlayParamDefault;
sVoicePlayParamCityPeople;
sVoicePlayParamSeaWoman;
sVoicePlayParamSeaMan;
sVoicePlayParamAmiiboNpc;
cSpeakerArrange5Point1ItuR;
cSpeakerArrange5Point1Square;
cSpeakerArrangeStereo;
cSpeakerArrange4ch;

} 
