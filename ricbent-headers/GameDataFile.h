#pragma once

class GameDataFile
{
public:
    GameDataFile(GameDataHolder*);
    initializeData();
    tryReadByamlData(unsigned char const*);
    tryFindCoinCollectInfo(char const*, char const*) const;
    tryFindShineIndexByUniqueId(int) const;
    tryFindCoinCollectIndexByUniqueId(int) const;
    buyDefaultItem();
    unlockAchievementShineName();
    isKidsMode() const;
    updateWorldMapIndex();
    updateWorldWarpIndex();
    getScenarioNo(int) const;
    getMainScenarioNo(int) const;
    isEmpty() const;
    initializeCheckpointTable();
    generateSaveDataIdForPrepo();
    resetMapIcon();
    wearDefault();
    initializeHintList();
    initializeCoinCollectList();
    resetTempData();
    isGameClear() const;
    isUnlockedWorld(int) const;
    isAlreadyGoWorld(int) const;
    addPlayTime(int, al::IUseSceneObjHolder const*);
    getPlayTimeTotal() const;
    updateSaveTime();
    updateSaveTimeForDisp();
    updateSaveInfoForDisp();
    getLastUpdateTime() const;
    generateSaveDataIdForPrepoForWrite();
    resetSaveDataIdForPrepoForWrite();
    startStage(char const*, int);
    isRaceStart() const;
    checkIsHomeStage(char const*) const;
    setGameClear();
    setOriginalHintTrans(int);
    getPlayerHitPointData() const;
    startDemoStage(char const*);
    changeNextStage(ChangeStageInfo const*, int);
    returnPrevStage();
    changeNextStageWithDemoWorldWarp(char const*);
    changeNextStageWithWorldWarpHole(char const*);
    restartStage();
    calcNextScenarioNo() const;
    getStageNameCurrent() const;
    tryGetStageNameCurrent() const;
    getStageNameNext() const;
    changeWipeType(char const*);
    setActivateHome();
    isGoToCeremonyFromInsideHomeShip() const;
    getPlayerStartId() const;
    setCheckpointId(al::PlacementId const*);
    setRestartPointId(al::PlacementId const*);
    clearStartId();
    tryGetRestartPointIdString() const;
    endStage();
    missAndRestartStage();
    setMissRestartInfo(al::PlacementInfo const&);
    isUseMissRestartInfo() const;
    isFirstTimeNextWorld() const;
    getAchievement(char const*);
    isGotShine(ShineInfo const*) const;
    isGotShine(int) const;
    checkGotShine(char const*) const;
    setGotShine(ShineInfo const*);
    getShineNum() const;
    getShineNum(int) const;
    getTotalShineNum() const;
    getTotalShopShineNum() const;
    tryGetNextMainScenarioLabel(sead::BufferedSafeStringBase<char>*, sead::BufferedSafeStringBase<char>*) const;
    tryGetNextMainScenarioPos(sead::Vector3<float>*) const;
    tryFindNextMainScenarioInfo() const;
    addPayShine(int);
    addPayShineCurrentAll();
    getPayShineNum(int) const;
    getTotalPayShineNum() const;
    isPayShineAllInAllWorld() const;
    addKey(int);
    getKeyNum() const;
    addOpenDoorLockNum(int);
    setStartedObj(al::PlacementId const*);
    isStartedObj(al::PlacementId const*, char const*) const;
    isStartedObj(char const*, char const*) const;
    setSaveObjS32(al::PlacementId const*, int);
    tryFindSaveObjS32(al::PlacementId const*);
    isExistSessionMember(SessionMusicianType const&) const;
    addSessionMember(SessionMusicianType const&);
    addCoinCollect(al::PlacementId const*);
    isGotCoinCollect(al::PlacementId const*) const;
    getCoinCollectNum() const;
    getCoinCollectGotNum() const;
    getCoinCollectGotNum(int) const;
    useCoinCollect(int);
    tryFindExistCoinCollectStageName(int) const;
    payCoinToSphinx();
    isPayCoinToSphinx() const;
    answerCorrectSphinxQuiz();
    answerCorrectSphinxQuizAll();
    isAnswerCorrectSphinxQuiz(int) const;
    isAnswerCorrectSphinxQuizAll(int) const;
    isTalkAlreadyLocalLanguage() const;
    talkLocalLanguage();
    isFirstWorldTravelingStatus() const;
    saveWorldTravelingStatus(char const*);
    getWorldTravelingStatus() const;
    isStartWorldTravelingPeach() const;
    startWorldTravelingPeach();
    setGrowFlowerTime(al::PlacementId const*, al::PlacementId const*, unsigned long);
    setGrowFlowerTime(al::PlacementId const*, unsigned long);
    getGrowFlowerTime(al::PlacementId const*) const;
    addGrowFlowerGrowLevel(al::PlacementId const*, unsigned int);
    getGrowFlowerGrowLevel(al::PlacementId const*) const;
    isUsedGrowFlowerSeed(al::PlacementId const*) const;
    findGrowFlowerPotIdFromSeedId(al::PlacementId const*);
    addCoin(int);
    addPlayerJumpCount();
    getPlayerJumpCount() const;
    addPlayerThrowCapCount();
    getPlayerThrowCapCount() const;
    readFromStream(sead::ReadStream*, unsigned char*);
    tryReadByamlDataFromStream(sead::ReadStream*, unsigned char*, int);
    writeToStream(sead::WriteStream*, sead::Heap*) const;
    tryWriteByByaml(sead::WriteStream*, sead::Heap*) const;
    isPlayDemoPlayerDownForBattleKoopaAfter() const;
    getCheckpointNumMaxInWorld() const;
    getCheckpointTransInWorld(char const*) const;
    isGotCheckpointInWorld(int) const;
    calcCheckpointIndexInScenario(int) const;
    getCheckpointObjIdInWorld(int) const;
    isGotCheckpoint(al::PlacementId*) const;
    changeNextSceneByGotCheckpoint(int);
    changeNextSceneByWarp();
    changeNextSceneByHome();
    startYukimaruRace();
    startYukimaruRaceTutorial();
    startRaceManRace();
    registerCheckpointTrans(al::PlacementId const*, sead::Vector3<float> const&);
    calcGetCheckpointNum() const;
    isEnableUnlockHint() const;
    calcRestHintNum() const;
    unlockHint();
    unlockHintImpl(int);
    unlockHintAmiibo();
    unlockHintAddByMoonRock();
    calcHintNum() const;
    calcHintTrans(int) const;
    findHint(int) const;
    calcHintTransMostEasy() const;
    findHintInfoMostEasy() const;
    calcHintMoonRockNum() const;
    calcHintMoonRockTrans(int) const;
    findHintMoonRock(int) const;
    tryUnlockShineName(int, int);
    isOpenMoonRock(int) const;
    calcShineIndexTableNameAvailable(int*, int*, int);
    calcShineIndexTableNameUnlockable(int*, int*, int);
    isUnlockAchievementShineName() const;
    unlockWorld(int);
    noPlayDemoWorldWarp();
    calcWorldWarpHoleThroughNum() const;
    getWorldWarpHoleThroughNumMax() const;
    enteredStage();
    buyItem(ShopItem::ItemInfo const*, bool);
    tryFindItemList(ShopItem::ItemInfo const*) const;
    calcHaveClothNum() const;
    calcHaveCapNum() const;
    calcHaveStickerNum() const;
    calcHaveGiftNum() const;
    isBuyItem(ShopItem::ItemInfo const*) const;
    isBuyItem(char const*, sead::FixedSafeString<64> const*) const;
    buyItemAll();
    wearCostume(char const*);
    wearCap(char const*);
    addHackDictionary(char const*);
    isExistInHackDictionary(char const*) const;
    findShine(int, int) const;
    isGotShine(int, int) const;
    isOpenShineName(int, int) const;
    calcShineNumInOneShine(int, int) const;
    checkAchievementShine(int, int) const;
    getWorldTotalShineNum(int) const;
    getWorldTotalShineNumMax(int) const;
    winRace();
    findRaceRecord(char const*) const;
    incrementRaceLoseCount(int);
    getRaceLoseCount(int) const;
    setJumpingRopeBestCount(int);
    setUpdateJumpingRopeScoreFlag();
    setVolleyballBestCount(int);
    setUpdateVolleyballScoreFlag();
    isExistJango() const;
    setJangoTrans(sead::Vector3<float> const&);
    setAmiiboNpcTrans(sead::Vector3<float> const&);
    setTimeBalloonNpcTrans(sead::Vector3<float> const&);
    setPoetterTrans(sead::Vector3<float> const&);
    setShopNpcTrans(sead::Vector3<float> const&, char const*, int);
    setMoonRockTrans(sead::Vector3<float> const&);
    setMiniGameInfo(sead::Vector3<float> const&, char const*);
    calcMiniGameNum() const;
    getMiniGameNumMax() const;
    getMiniGameTrans(int) const;
    getMiniGameName(int) const;
    isExistTimeBalloonNpc() const;
    getTimeBalloonNpcTrans() const;
    isExistPoetter() const;
    getPoetterTrans() const;
    isAlreadyShowExplainCheckpointFlag() const;
    showExplainCheckpointFlag();
    getShopNpcTrans(int) const;
    isShopSellout(int) const;
    calcShopNum() const;
    getShopNpcIconNumMax() const;
    getScenarioNo() const;
    getScenarioNoPlacement() const;
    isClearWorldMainScenario(int) const;
    isFlagOnTalkMessageInfo(int) const;
    setFlagOnTalkMessageInfo(int);
    isTalkKakku() const;
    talkKakku();
    isTalkWorldTravelingPeach() const;
    talkWorldTravelingPeach();
    isTalkCollectBgmNpc() const;
    talkCollectBgmNpc();
    getTokimekiMayorNpcFavorabilityRating() const;
    setTokimekiMayorNpcFavorabilityRating(int);
    isFirstNetwork() const;
    noFirstNetwork();
    setKidsMode(bool);
    isPlayScenarioCamera(QuestInfo const*) const;
    isNextMainShine(QuestInfo const*) const;
    isNextMainShine(int) const;
    isMainShine(int) const;
    isLatestGetMainShine(ShineInfo const*) const;
    calcIsGetMainShineAll(al::IUseSceneObjHolder const*) const;
    calcIsGetShineAllInWorld(int) const;
    tryFindLinkedShineIndex(al::ActorInitInfo const&, al::IUseSceneObjHolder const*) const;
    tryFindLinkedShineIndex(al::ActorInitInfo const&, int, al::IUseSceneObjHolder const*) const;
    tryFindLinkedShineIndexByLinkName(al::IUseSceneObjHolder const*, al::ActorInitInfo const&, char const*) const;
    calcLinkedShineNum(al::ActorInitInfo const&) const;
    tryFindShineIndex(al::ActorInitInfo const&) const;
    tryFindShineIndex(char const*, char const*) const;
    disableHintById(int);
    enableHintById(int);
    setStartShine(ShineInfo const*);
    getStartShineNextIndex() const;
    setHintTrans(int, sead::Vector3<float> const&);
    resetHintTrans(int);
    registerShineInfo(ShineInfo const*, sead::Vector3<float> const&);
    calcRestShineInStageWithWorldProgress(char const*) const;
    calcGetShineNumByObjectNameOrOptionalId(char const*, GameDataFile::CountType) const;
    calcGetShineNumByObjectNameWithWorldId(char const*, int) const;
    calcAllShineNumByObjectNameOrOptionalId(char const*) const;
    calcGetShineNumByStageName(char const*) const;
    tryFindAndInitShineInfoByOptionalId(ShineInfo*, char const*);
    tryFindUniqueId(ShineInfo const*) const;
    findUnlockShineNumCurrentWorld(bool*) const;
    getMainScenarioNoCurrent() const;
    setMainScenarioNo(int);
    isCollectedBgm(char const*, char const*) const;
    getCollectBgmByIndex(int) const;
    trySetCollectedBgm(char const*, char const*);
    getCollectedBgmNum() const;
    getCollectedBgmMaxNum() const;
    setGotShine(int);
    setGotShine(GameDataFile::HintInfo const*);
    isEnableOpenMoonRock(int) const;
    tryWriteByByaml(al::ByamlWriter*) const;
};
