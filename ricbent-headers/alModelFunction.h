#pragma once

namespace alModelFunction {

updateRenderMaterialUbo(nn::g3d::MaterialObj*);
updateRenderCloudLayerUbo(nn::g3d::MaterialObj*);
setDeferredGraphicsContext(sead::GraphicsContextMRT*, nn::g3d::MaterialObj const*, al::GraphicsContextDrawInfo const&);
isShaderAssignXlu(nn::g3d::MaterialObj const*);
isShaderAssignAlphaMask(nn::g3d::MaterialObj const*);
isDeferredXluTypeBlendLbuf(nn::g3d::ResMaterial const*);
isDeferredXluTypeBlendBcNrmLbuf(nn::g3d::ResMaterial const*);
isDeferredXluTypeBlendBcLbuf(nn::g3d::ResMaterial const*);
isDeferredXluTypeAddBcLbuf(nn::g3d::ResMaterial const*);
isDeferredXluTypeAddLbuf(nn::g3d::ResMaterial const*);
isDeferredXluTypeMulLbuf(nn::g3d::ResMaterial const*);
isDeferredXluTypeMulAddLbuf(nn::g3d::ResMaterial const*);
isDeferredXluTypeMulBc(nn::g3d::ResMaterial const*);
isDeferredXluTypeFootPrint(nn::g3d::ResMaterial const*);
isDeferredXluTypeBlendAll(nn::g3d::ResMaterial const*);
setForwardGraphicsContext(sead::GraphicsContext*, nn::g3d::MaterialObj const*, al::GraphicsContextDrawInfo const&);
prepareModelShapeDrawDeferredGraphicsContext(agl::DrawContext*, al::ModelCtrl const*, int);
prepareModelShapeDrawDeferredXluGraphicsContext(agl::DrawContext*, al::ModelCtrl const*, int, al::DeferredXluType, bool);
drawModelShape(agl::DrawContext*, nn::g3d::SkeletonObj const*, nn::g3d::MaterialObj const*, nn::g3d::ShapeObj const*, nn::g3d::ShadingModelObj const*, al::ModelShaderAssign const*, nn::g3d::ViewVolume const*, int, int);
isExistBoundingNode(nn::g3d::ResShape const*);
createModelShaderAssign(nn::g3d::ShapeObj const*, nn::g3d::MaterialObj const*, nn::g3d::ResShadingModel*, int, char const* const*, char const* const*);
createMeshDrawerTableFromAssignShader(al::GraphicsSystemInfo const*, al::ModelCtrl*, int);
createMeshDrawerDisplayListGraphicsContextInvalidate(al::MeshDrawerTable const*, al::ModelKeeper const*, sead::Heap*);
createMeshDrawerDisplayList(al::MeshDrawerTable const*, al::ModelKeeper const*, sead::Heap*);
createMeshDrawerDisplayListMRT(al::MeshDrawerTable const*, al::ModelKeeper const*, sead::Heap*);
createMeshDrawerDisplayListShadow(al::MeshDrawerTable const*, al::ModelKeeper const*, sead::Heap*);
isShaderAssignAlphaMask(nn::g3d::ModelObj const*, int);
createMeshDrawerDisplayListDepth(al::MeshDrawerTable const*, al::ModelKeeper const*, bool, sead::Heap*);
isShaderAssignDisplacement(nn::g3d::ModelObj const*, int);
createMeshDrawerDisplayListDepthWithCulling(al::MeshDrawerTable const*, al::ModelKeeper const*, bool, sead::Heap*);
createMeshDrawerDisplayListCulling(al::MeshDrawerTable const*, al::ModelKeeper const*, sead::Heap*);
isShaderAssignMaterialShader(nn::g3d::ModelObj const*, int);
isShaderAssignMaterialShader(nn::g3d::MaterialObj const*);
isShaderAssignDisplacement(nn::g3d::MaterialObj const*);
isShaderAssignOpa(nn::g3d::ModelObj const*, int);
isShaderAssignOpa(nn::g3d::MaterialObj const*);
isShaderAssignIndirect(nn::g3d::MaterialObj const*);
isShaderAssignXlu(nn::g3d::ModelObj const*, int);
isShaderAssignDeferred(nn::g3d::ModelObj const*, int);
isShaderAssignDeferred(nn::g3d::MaterialObj const*);
isShaderAssignForward(nn::g3d::ModelObj const*, int);
isShaderAssignForward(nn::g3d::MaterialObj const*);
isShaderAssignCubemap(nn::g3d::ModelObj const*, int);
isShaderAssignCubemap(nn::g3d::MaterialObj const*);
isShaderAssignIndirect(nn::g3d::ModelObj const*, int);
isShaderAssignIndirect(nn::g3d::ResMaterial const*);
isShaderAssignUseRipple(nn::g3d::ModelObj const*, int);
isShaderAssignUseRipple(nn::g3d::MaterialObj const*);
isShaderUseFrameBuffer(nn::g3d::ResMaterial const*);
isShaderUseGBufferBc(nn::g3d::ResMaterial const*);
isShaderUseGBufferNormal(nn::g3d::ResMaterial const*);
isShaderUseGBufferRoughness(nn::g3d::ResMaterial const*);
isShaderUseGBufferMetalness(nn::g3d::ResMaterial const*);
isShaderUseEmission(nn::g3d::MaterialObj const*);
isShaderUseExposure(nn::g3d::ResMaterial const*);
isShaderUseRefractTex(nn::g3d::ResMaterial const*);
isShaderUseMirror(nn::g3d::ResMaterial const*);
isShaderUseRefractTex(nn::g3d::MaterialObj const*);
isShaderUseRefractCubemap(nn::g3d::MaterialObj const*);
isShaderUseRefractCubemap(nn::g3d::ResMaterial const*);
isShaderUseRefractGem(nn::g3d::MaterialObj const*);
isShaderUseSSS(nn::g3d::MaterialObj const*);
isShaderUseIrradianePixel(nn::g3d::MaterialObj const*);
isShaderUseAlphaScale(nn::g3d::MaterialObj const*);
isShaderUseFlowMap(nn::g3d::MaterialObj const*);
isShaderUseTranslucent(nn::g3d::MaterialObj const*);
isShaderUseBaseColorTexSrt(nn::g3d::MaterialObj const*);
isShaderUseBaseColorModelUv1(nn::g3d::MaterialObj const*);
isShaderUseUniform4TexSrt(nn::g3d::MaterialObj const*);
isShaderUseUniform4ModelUv1(nn::g3d::MaterialObj const*);
isShaderUseAlphaBaseColor(nn::g3d::MaterialObj const*);
isShaderUseAlphaUniform4(nn::g3d::MaterialObj const*);
isShaderUseAlphaUniform4AndVertex(nn::g3d::MaterialObj const*);
isShaderUseAlphaVertex(nn::g3d::MaterialObj const*);
isShaderUseMulBaseColorVertexColor(nn::g3d::MaterialObj const*);
isShaderUseAlphaConstant(nn::g3d::MaterialObj const*);
isEnableMaterialLod(nn::g3d::ModelObj const*, int);
isEnableMaterialLod(nn::g3d::MaterialObj const*);
isEnableXluZPrePass(nn::g3d::ModelObj const*, int);
isEnableXluZPrePass(nn::g3d::MaterialObj const*);
isDisableZPrePass(nn::g3d::ModelObj const*, int);
isDisableZPrePass(nn::g3d::MaterialObj const*);
isAlphaMaskUnableZprepass(nn::g3d::MaterialObj const*);
isDisableDepthShadow(nn::g3d::ModelObj const*, int);
isDisableDepthShadow(nn::g3d::MaterialObj const*);
isDisableStaticDepthShadow(nn::g3d::ModelObj const*, int);
isDisableStaticDepthShadow(nn::g3d::MaterialObj const*);
getShaderAssignAlphaComponent(nn::g3d::ModelObj const*, int);
getShaderAssignAlphaComponent(nn::g3d::MaterialObj const*);
getShaderAssignAlphaFunc(nn::g3d::ModelObj const*, int);
getShaderAssignAlphaFunc(nn::g3d::MaterialObj const*);
getShaderUseBlendNum(nn::g3d::MaterialObj const*);
getMaterialDrawPriority(nn::g3d::ResMaterial const*);
bindShaderParamAndConvertParamCallback(nn::g3d::ResModel*, al::ShaderHolder const*);
tryActivateLocalShadowMap(agl::DrawContext*, al::ModelAdditionalInfo*, al::ModelCtrl const*);
getMaxSamplerBias(nn::g3d::ResMaterial const*);
getMaxSamplerAniso(nn::g3d::ResMaterial const*);
getMinSamplerMipMax(nn::g3d::ResMaterial const*);
isAllSamplerFilterBilinear(nn::g3d::ResMaterial const*);
isAllSamplerFilterTrilinear(nn::g3d::ResMaterial const*);
calcBoundingSphere(al::ModelCtrl const*);
calcBoundingRadius(al::ModelCtrl const*);
calcBoundingBox(sead::BoundBox3<float>*, al::ModelCtrl const*);
calcBoundingBoxMtx(sead::Matrix34<float>*, al::ModelCtrl const*);
calcMeshPolygonNum(nn::g3d::ResMesh const*);
calcPolygonNum(nn::g3d::ModelObj const*, int);
getLodModelCount(nn::g3d::ModelObj const*);
getLodShapeObjBaseVertex(nn::g3d::ShapeObj const*, int);
isExistLodModel(nn::g3d::ModelObj const*);
isShapeVertexPosFormat32bit(nn::g3d::ShapeObj const*);
isShapeVertexPosFormat16bit(nn::g3d::ShapeObj const*);
isExistMultiIndexVariation(nn::g3d::ShapeObj const*);
isIndexFormat8bit(nn::g3d::ShapeObj const*, int);
isIndexFormat16bit(nn::g3d::ShapeObj const*, int);
isIndexFormat32bit(nn::g3d::ShapeObj const*, int);
isIndexTopologyAllTriangleList(nn::g3d::ShapeObj const*);
isDisablePrepassCulling(nn::g3d::ModelObj const&);
isEnablePrepassCulling(nn::g3d::ModelObj const&, int);
tryStoreCreateArgPrepassCulling(al::CulledIndexCreateArg*, nn::g3d::ModelObj const&, int);
isEnableCullPrepass(al::CulledIndexCreateArg*, nn::g3d::ModelObj const&, int, int);

} 
