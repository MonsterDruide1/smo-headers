#pragma once

calcRunSpeedRate(al::LiveActor const*);
isInMePlayArea(al::LiveActor const*);
getPlayerActionPoleGrabName();
getPlayerActionClimbPoleName();
getPlayerActionClimbPoleTopName();
MultimediaAllocate(unsigned long, unsigned long, void*);
MultimediaFree(void*, void*);
MultimediaReallocate(void*, unsigned long, void*);
PlayerActorBase* createPlayerFunction<PlayerActorHakoniwa>(char const*);
PlayerActorBase* createPlayerFunction<YukimaruRacePlayer>(char const*);
PrintErrorContentsInfo();
CallContextPreventBlockCallCallback(nn::nex::RootObject*, unsigned int);
SetInternalThreadCoreNo(int);
GetInternalThreadCoreNo();
JobPreventBlockCallCallback(nn::nex::RootObject*, unsigned int);
GetCurrentContext();
WaitForTerminatedStatePreventBlockCallCallback(nn::nex::RootObject*, unsigned int);
WaitForReadyStatePreventBlockCallCallback(nn::nex::RootObject*, unsigned int);
ClientRequestCallback(nn::nex::CallContext*, nn::nex::UserContext const*);
operator new(unsigned long);
operator new[](unsigned long);
operator new(unsigned long, std::nothrow_t const&);
operator new[](unsigned long, std::nothrow_t const&);
operator new(unsigned long, int);
operator new[](unsigned long, int);
operator new(unsigned long, int, std::nothrow_t const&);
operator new[](unsigned long, int, std::nothrow_t const&);
operator new(unsigned long, sead::Heap*, int);
operator new[](unsigned long, sead::Heap*, int);
operator new(unsigned long, sead::Heap*, std::nothrow_t const&);
operator new[](unsigned long, sead::Heap*, std::nothrow_t const&);
operator new(unsigned long, sead::Heap*, int, std::nothrow_t const&);
operator new[](unsigned long, sead::Heap*, int, std::nothrow_t const&);
operator delete(void*);
operator delete[](void*);
operator delete(void*, std::nothrow_t const&);
operator delete[](void*, std::nothrow_t const&);
operator delete(void*, int);
operator delete[](void*, int);
operator delete(void*, int, std::nothrow_t const&);
operator delete[](void*, int, std::nothrow_t const&);
operator delete(void*, sead::Heap*, int);
operator delete[](void*, sead::Heap*, int);
operator delete(void*, sead::Heap*, std::nothrow_t const&);
operator delete[](void*, sead::Heap*, std::nothrow_t const&);
operator delete(void*, sead::Heap*, int, std::nothrow_t const&);
operator delete[](void*, sead::Heap*, int, std::nothrow_t const&);
validateFixPointCameraUsePreCameraPos(al::CameraTicket*);
operator==(al::Triangle const&, al::Triangle const&);
operator!=(al::Triangle const&, al::Triangle const&);
decodeSZSNxAsm64_(void*, void const*);
