#pragma once

class GameDataHolder
{
public:
    GameDataHolder(al::MessageSystem const*);
    setPlayingFileId(int);
    initializeData();
    GameDataHolder();
    initializeDataCommon();
    resetTempSaveData(bool);
    initializeDataId(int);
    readByamlData(int, char const*);
    tryFindEmptyFileId() const;
    createSaveDataAccessSequence(al::LayoutInitInfo const&);
    createSaveDataAccessSequenceDevelop(al::LayoutInitInfo const&);
    isRequireSave() const;
    setRequireSave();
    setRequireSaveFalse();
    setRequireSaveFrame();
    updateRequireSaveFrame();
    isInvalidSaveForMoonGet() const;
    invalidateSaveForMoonGet();
    validateSaveForMoonGet();
    setLanguage(char const*);
    getLanguage() const;
    changeNextStage(ChangeStageInfo const*, int);
    resetLocationName();
    changeNextStageWithDemoWorldWarp(char const*);
    tryChangeNextStageWithWorldWarpHole(char const*);
    returnPrevStage();
    getNextStageName() const;
    getNextStageName(int) const;
    getGameDataFile(int) const;
    getNextPlayerStartId() const;
    getCurrentStageName() const;
    tryGetCurrentStageName() const;
    getCurrentStageName(int) const;
    setCheckpointId(al::PlacementId const*);
    tryGetRestartPointIdString() const;
    endStage();
    startStage(char const*, int);
    onObjNoWriteSaveData(al::PlacementId const*);
    offObjNoWriteSaveData(al::PlacementId const*);
    isOnObjNoWriteSaveData(al::PlacementId const*) const;
    onObjNoWriteSaveDataResetMiniGame(al::PlacementId const*);
    offObjNoWriteSaveDataResetMiniGame(al::PlacementId const*);
    isOnObjNoWriteSaveDataResetMiniGame(al::PlacementId const*) const;
    onObjNoWriteSaveDataInSameScenario(al::PlacementId const*);
    isOnObjNoWriteSaveDataInSameScenario(al::PlacementId const*) const;
    writeTempSaveDataToHash(char const*, bool);
    findValueFromTempSaveDataHash(char const*);
    resetMiniGameData();
    getPlayingFileId() const;
    getPlayingOrNextFileId() const;
    requestSetPlayingFileId(int);
    receiveSetPlayingFileIdMsg();
    findGameDataFile(char const*) const;
    findFileByName(char const*) const;
    resetScenarioStartCamera();
    resetTempSaveDataInSameScenario();
    readFromSaveDataBuffer(char const*);
    tryReadByamlDataCommon(unsigned char const*);
    readFromSaveDataBufferCommonFileOnlyLanguage();
    writeToSaveDataBuffer(char const*);
    updateSaveInfoForDisp(char const*);
    updateSaveTimeForDisp(char const*);
    findUnlockShineNum(bool*, int) const;
    calcBeforePhaseWorldNumMax(int) const;
    isFindKoopaNext(int) const;
    isBossAttackedHomeNext(int) const;
    playScenarioStartCamera(int);
    isPlayAlreadyScenarioStartCamera(int) const;
    getShopItemInfoList() const;
    checkNeedTreasureMessageStage(char const*) const;
    tryFindLinkDestStageInfo(char const**, char const**, char const*, char const*) const;
    isShowHackTutorial(char const*, char const*) const;
    setShowHackTutorial(char const*, char const*);
    isShowBindTutorial(char const*) const;
    getCoinCollectArchiveName(int) const;
    getCoinCollectEmptyArchiveName(int) const;
    getCoinCollect2DArchiveName(int) const;
    getCoinCollect2DEmptyArchiveName(int) const;
    getShineAnimFrame(int) const;
    getCoinCollectNumMax(int) const;
    isInvalidOpenMapStage(char const*, int) const;
    setShowBindTutorial(char const*);
    tryCalcWorldWarpHoleSrcId(int) const;
    calcWorldWarpHoleDestId(int) const;
    calcWorldWarpHoleIdFromWorldId(int) const;
    calcWorldIdFromWorldWarpHoleId(int) const;
    calcWorldWarpHoleLabelAndStageName(sead::BufferedSafeStringBase<char>*, sead::BufferedSafeStringBase<char>*, char const*, int) const;
    findWorldWarpHoleInfo(int, int, char const*) const;
    checkIsOpenWorldWarpHoleInScenario(int, int) const;
    setLocationName(al::PlacementInfo const*);
    isPrevLocation(al::PlacementInfo const*) const;
    setCoinTransForDeadPlayer(sead::PtrArray<Coin> const&, int);
    getCoinTransForDeadPlayer(int);
    setSeparatePlay(bool);
    getCapMessageBossData() const;
    findUseScenarioNo(char const*) const;
    getSceneObjName() const;
    ~GameDataHolder();
    getMessageSystem() const;
};
