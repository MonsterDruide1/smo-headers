#pragma once

class TimeBalloonDataAccessor
{
public:
    TimeBalloonDataAccessor(FriendsProfileDataHolder*, GameDataHolderAccessor, al::NetworkSystem*);
    update();
    reset();
    exeWait();
    exeErrorConnection();
    exeDownloadOne();
    exeDownloadAllOwnBufferQueue();
    tryGetBalloonOwn(int) const;
    exeUpdateGotProtectBonusAll();
    exeUpdateOne();
    exeDeleteOne();
    exeCreateOne();
    exeUpdateRateUp();
    exeUpdateGotBalloon();
    exeUpdateGotBalloonTutorial();
    exeCreateAndSaveAchievement();
    exeDownloadAchievementOther();
    exeGetAndSaveAchievementIfExist();
    requestCreateProfileDataOwn();
    tryGetGotPlayerProfileData() const;
    tryGetBalloonOwnCurrentWorld() const;
    getNoticeData(unsigned long) const;
    tryGetGotPlayerAchievementData();
    tryGetAchievementData(unsigned long);
    isExistAchievementData() const;
    exeNoConnect();
    exeCreateOneNotice();
    exeDeleteOneNotice();
    exeSearchBalloon();
    applyAchievementDataList();
    exeSearchOwnAll();
    exeUpdateNoticePlayed();
    exeUpdateNoticeGot();
    exeUpdateBufferQueuePlayed();
    exeUpdateBufferQueueGot();
    tryConnect();
    requestNetworkInitialize();
    isNetworkAvailable() const;
    isAvailableServer() const;
    isConnected() const;
    tryRateUpBalloonRating(unsigned long, unsigned long, bool);
    tryGotBalloon(unsigned long, unsigned long, int, int);
    tryGotBalloonTutorial();
    tryGotProtectBonusAll();
    tryDownloadBalloonDataOwnAllBufferQueue();
    tryUpdateNoticeGot(unsigned long);
    tryUpdateNoticePlayed(unsigned long);
    tryDeleteNoticeDataOne(unsigned long);
    tryCreateNoticeDataOne();
    tryUpdateBalloonPlayed(unsigned long);
    trySearchBalloon();
    tryCreateBalloonDataOne(TimeBalloon::BalloonDataServer const*);
    tryGetAndSaveAchievementIfExist();
    tryCreateAndSaveAchievement();
    tryDownloadAchievementOther();
    isEnd() const;
    trySearchOwnAll();
    tryCreateBalloonData(TimeBalloon::BalloonData*, unsigned long);
    isEnableFindBalloonCurrentWorld() const;
    getBalloonDataOne() const;
    getCreateNoticeDataOneLast() const;
    registerNewNotice(unsigned long, int);
    deleteNotice(int);
    getBalloonDataIdLast() const;
    getDataStoreDirector() const;
    getNexUtilityDirector() const;
    ~TimeBalloonDataAccessor();
};
