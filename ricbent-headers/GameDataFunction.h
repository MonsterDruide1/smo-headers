#pragma once

namespace GameDataFunction {

getGameDataHolder(al::IUseSceneObjHolder const*);
getGameDataHolder(al::SceneObjHolder const*);
getGameDataHolder(al::GameDataHolderBase*);
getGameDataFile(GameDataHolderWriter);
setPlayingFileId(GameDataHolderWriter, int);
initializeData(GameDataHolderWriter, int);
isPlayDemoOpening(GameDataHolderAccessor);
isGameClear(GameDataHolderAccessor);
setRequireSave(GameDataHolderWriter);
setRequireSaveFrame(GameDataHolderWriter);
getPlayTimeTotal(GameDataHolderAccessor);
getPlayTimeAcrossFile(GameDataHolderAccessor);
getSaveDataIdForPrepo(GameDataHolderAccessor);
startDemoStage(GameDataHolderWriter, char const*);
tryChangeNextStage(GameDataHolderWriter, ChangeStageInfo const*);
tryChangeNextStageWithStartRaceFlag(GameDataHolderWriter, ChangeStageInfo const*);
tryChangeNextStageWithStartRaceYukimaru(GameDataHolderWriter, ChangeStageInfo const*);
tryChangeNextStageWithDemoWorldWarp(GameDataHolderWriter, char const*);
tryChangeNextStageWithWorldWarpHole(GameDataHolderWriter, char const*);
changeNextStageWithStartTimeBalloon(GameDataHolderWriter, int);
getCurrentStageName(GameDataHolderAccessor);
changeNextStageWithEndTimeBalloon(GameDataHolderWriter);
changeNextStageWithCloset(GameDataHolderWriter);
findAreaAndChangeNextStage(GameDataHolderWriter, al::LiveActor const*, sead::Vector3<float> const*);
returnPrevStage(GameDataHolderWriter);
isTimeBalloonSequence(GameDataHolderAccessor);
getNextStageName(GameDataHolderAccessor);
getCurrentStageName(GameDataHolderAccessor, int);
isSeaOfTreeStage(GameDataHolderAccessor);
getNextStageName(GameDataHolderAccessor, int);
calcNextScenarioNo(GameDataHolderAccessor);
restartStage(GameDataHolderWriter);
missAndRestartStage(GameDataHolderWriter);
isMissEndPrevStageForInit(GameDataHolderAccessor);
isMissEndPrevStageForSceneDead(GameDataHolderAccessor);
reenterStage(GameDataHolderWriter);
getNextWorldId(GameDataHolderAccessor);
getPrevWorldId(GameDataHolderAccessor);
getWorldNumForNewReleaseShop(GameDataHolderAccessor);
isAlreadyGoWorld(GameDataHolderAccessor, int);
getWorldDevelopName(GameDataHolderAccessor, int);
getWorldIdForNewReleaseShop(GameDataHolderAccessor, int);
isForwardWorldWarpDemo(GameDataHolderAccessor);
getWorldNum(GameDataHolderAccessor);
isFirstTimeNextWorld(GameDataHolderAccessor);
checkIsNewWorldInAlreadyGoWorld(GameDataHolderAccessor);
getCurrentWorldIdNoDevelop(GameDataHolderAccessor);
getScenarioNo(al::LiveActor const*);
getScenarioNo(al::LayoutActor const*);
getScenarioNoPlacement(GameDataHolderAccessor);
isEqualScenario(RiseMapPartsHolder const*, int);
getMainQuestMin(al::LiveActor const*);
getCurrentWorldId(GameDataHolderAccessor);
clearStartId(GameDataHolderWriter);
setCheckpointId(GameDataHolderWriter, al::PlacementId const*);
setRestartPointId(GameDataHolderWriter, al::PlacementId const*);
tryGetRestartPointIdString(GameDataHolderAccessor);
tryGetPlayerStartId(GameDataHolderAccessor);
isPlayerStartObj(al::LiveActor const*, al::ActorInitInfo const&);
isPlayerStartObj(al::LiveActor const*, al::PlacementInfo const&);
isPlayerStartObj(al::LiveActor const*, char const*);
isPlayerStartLinkedObj(al::LiveActor const*, al::ActorInitInfo const&, char const*);
setStartShine(al::LiveActor const*, ShineInfo const*);
getStartShineNextIndex(GameDataHolderAccessor);
isAlreadyShowExplainCheckpointFlag(GameDataHolderAccessor);
isEnableShowExplainCheckpointFlag(GameDataHolderAccessor);
showExplainCheckpointFlag(GameDataHolderAccessor);
getLifeMaxUpItem(al::LiveActor const*);
getPlayerHitPoint(GameDataHolderAccessor);
getPlayerHitPointMaxCurrent(GameDataHolderAccessor);
getPlayerHitPointMaxNormal(GameDataHolderAccessor);
isPlayerHitPointMax(GameDataHolderAccessor);
isPlayerHitPointMaxWithItem(GameDataHolderAccessor);
recoveryPlayer(al::LiveActor const*);
recoveryPlayerForDebug(al::LiveActor const*);
recoveryPlayerMax(al::LiveActor const*);
recoveryPlayerForSystem(GameDataHolder const*);
recoveryPlayerMaxForSystem(GameDataHolder const*);
initPlayerHitPointForSystem(GameDataHolder const*);
damagePlayer(GameDataHolderWriter);
killPlayer(GameDataHolderWriter);
isPlayerLifeZero(GameDataHolderAccessor);
isGotShine(GameDataHolderAccessor, ShineInfo const*);
isGotShine(GameDataHolderAccessor, al::PlacementId const*);
isGotShine(GameDataHolderAccessor, char const*, char const*);
isGotShine(GameDataHolderAccessor, int);
isGotShine(Shine const*);
setGotShine(GameDataHolderWriter, ShineInfo const*);
getGotShineNum(GameDataHolderAccessor, int);
getLatestGetShineInfo(GameDataHolderAccessor);
getCurrentShineNum(GameDataHolderAccessor);
getTotalShineNum(GameDataHolderAccessor, int);
getTotalShopShineNum(GameDataHolderAccessor, int);
tryGetNextMainScenarioLabel(sead::BufferedSafeStringBase<char>*, sead::BufferedSafeStringBase<char>*, al::IUseSceneObjHolder const*);
getMainScenarioNumMax(GameDataHolderAccessor);
setMainScenarioNo(GameDataHolderWriter, int);
tryGetNextMainScenarioPos(sead::Vector3<float>*, GameDataHolderAccessor);
isPlayScenarioCamera(GameDataHolderAccessor, QuestInfo const*);
isPlayAlreadyScenarioStartCamera(GameDataHolderAccessor, int);
isEnterStageFirst(GameDataHolderAccessor);
isNextMainShine(GameDataHolderAccessor, int);
isMainShine(GameDataHolderAccessor, int);
isLatestGetMainShine(GameDataHolderAccessor, ShineInfo const*);
tryFindLinkedShineIndex(al::LiveActor const*, al::ActorInitInfo const&);
tryFindLinkedShineIndex(al::LiveActor const*, al::ActorInitInfo const&, int);
tryFindLinkedShineIndexByLinkName(al::LiveActor const*, al::ActorInitInfo const&, char const*);
calcLinkedShineNum(al::LiveActor const*, al::ActorInitInfo const&);
tryFindShineIndex(al::LiveActor const*, al::ActorInitInfo const&);
tryFindShineIndex(al::LiveActor const*, char const*, char const*);
tryFindShineUniqueId(al::Scene const*, ShineInfo const*);
disableHintByShineIndex(al::LiveActor const*, int);
enableHintByShineIndex(al::LiveActor const*, int);
calcIsGetMainShineAll(al::IUseSceneObjHolder const*);
calcIsGetShineAllInWorld(GameDataHolderAccessor, int);
calcIsGetShineAllInAllWorld(GameDataHolderAccessor);
tryFindAndInitShineInfoByOptionalId(ShineInfo*, GameDataHolderAccessor, char const*);
isGotLinkedShineBeforeInitActor(al::ActorInitInfo const&, char const*);
checkIsComplete(al::IUseSceneObjHolder const*, int);
isExistInHackDictionary(GameDataHolderAccessor, char const*, int);
getCollectedBgmNum(GameDataHolderAccessor, int);
getCollectedBgmMaxNum(GameDataHolderWriter);
isEnableOpenMoonRock(al::LiveActor const*);
openMoonRock(al::LiveActor const*, al::PlacementId const*);
isOpenMoonRock(GameDataHolderAccessor);
isEnableShowDemoOpenMoonRockFirst(GameDataHolderAccessor);
isEnableShowDemoOpenMoonRockWorld(GameDataHolderAccessor);
showDemoOpenMoonRockFirst(GameDataHolderAccessor);
showDemoOpenMoonRockWorld(GameDataHolderAccessor);
calcMoonRockTalkMessageIndex(GameDataHolderAccessor);
addMoonRockTalkMessageIndex(GameDataHolderWriter);
isAppearedMoonRockTalkMessage(GameDataHolderAccessor);
addPayShine(GameDataHolderWriter, int);
addPayShineCurrentAll(GameDataHolderWriter);
getPayShineNum(GameDataHolderAccessor);
getPayShineNum(GameDataHolderAccessor, int);
getTotalPayShineNum(GameDataHolderAccessor);
getTotalPayShineNumClamp(GameDataHolderAccessor);
isPayShineAllInAllWorld(GameDataHolderAccessor);
addKey(GameDataHolderWriter, int);
getKeyNum(GameDataHolderAccessor);
getCurrentKeyNum(GameDataHolderAccessor);
getOpenDoorLockNum(GameDataHolderAccessor);
openDoorLock(GameDataHolderWriter, al::PlacementId const*);
isOpenDoorLock(GameDataHolderAccessor, al::PlacementId const*);
setObjStarted(GameDataHolder*, al::PlacementId const*);
isObjStarted(GameDataHolder const*, al::PlacementId const*);
isObjStarted(GameDataHolderAccessor, char const*, char const*);
saveObjS32(GameDataHolderWriter, al::PlacementId const*, int);
tryFindSaveObjS32Value(int*, GameDataHolderAccessor, al::PlacementId const*);
onObjNoWriteSaveData(GameDataHolderWriter, al::PlacementId const*);
offObjNoWriteSaveData(GameDataHolderWriter, al::PlacementId const*);
isOnObjNoWriteSaveData(GameDataHolderAccessor, al::PlacementId const*);
onObjNoWriteSaveDataResetMiniGame(GameDataHolderWriter, al::PlacementId const*);
offObjNoWriteSaveDataResetMiniGame(GameDataHolderWriter, al::PlacementId const*);
isOnObjNoWriteSaveDataResetMiniGame(GameDataHolderAccessor, al::PlacementId const*);
onObjNoWriteSaveDataInSameScenario(GameDataHolder*, al::PlacementId const*);
isOnObjNoWriteSaveDataInSameScenario(GameDataHolder const*, al::PlacementId const*);
setSessionEventProgress(GameDataHolderWriter, SessionEventProgress const&);
getSessionEventProgress(GameDataHolderAccessor);
isPayCoinToSphinx(al::LiveActor const*);
payCoinToSphinx(al::LiveActor const*);
isRemovedCapByJango(al::LiveActor const*);
isMainStage(GameDataHolderAccessor);
isGetCapFromJango(al::LiveActor const*);
removeCapByJango(al::LiveActor const*);
getCapFromJango(al::LiveActor const*);
addJangoCount(al::LiveActor const*);
getJangoCount(al::LiveActor const*);
isFirstWorldTravelingStatus(WorldTravelingNpc const*);
saveWorldTravelingStatus(WorldTravelingNpc const*, char const*);
getWorldTravelingStatus(WorldTravelingNpc const*);
isRaceStart(GameDataHolderAccessor);
isRaceStartFlag(GameDataHolderAccessor);
isRaceStartYukimaru(GameDataHolderAccessor);
isRaceStartYukimaruTutorial(GameDataHolderAccessor);
isRaceWin(GameDataHolderAccessor);
isRaceWin(GameDataHolderAccessor, int);
isRaceResultSecond(GameDataHolderAccessor);
isRaceResultThird(GameDataHolderAccessor);
isRaceLose(GameDataHolderAccessor);
isRaceCancel(GameDataHolderAccessor);
winRace(GameDataHolderWriter);
endRaceResultSecond(GameDataHolderWriter);
endRaceResultThird(GameDataHolderWriter);
loseRace(GameDataHolderWriter);
getRaceRivalLevel(al::LiveActor const*);
getRaceRivalLevel(al::Scene const*);
setRaceRivalLevel(al::LiveActor const*, int);
setLastRaceRanking(GameDataHolderAccessor, int);
getLastRaceRanking(GameDataHolderWriter);
incrementRaceLoseCount(al::Scene const*, int);
getRaceLoseCount(al::LiveActor const*, int);
addCoinCollect(GameDataHolderWriter, al::PlacementId const*);
useCoinCollect(GameDataHolderWriter, int);
isGotCoinCollect(GameDataHolderAccessor, al::ActorInitInfo const&);
getCoinCollectNum(GameDataHolderAccessor);
getCoinCollectGotNum(GameDataHolderAccessor);
getCoinCollectGotNum(GameDataHolderAccessor, int);
getCoinCollectNumMax(GameDataHolderAccessor);
getCoinCollectNumMax(GameDataHolderAccessor, int);
tryFindExistCoinCollectStagePosExcludeHomeStageInCurrentWorld(sead::Vector3<float>*, char const**, GameDataHolderAccessor);
getWorldScenarioNo(GameDataHolderAccessor, int);
addCoin(GameDataHolderWriter, int);
subCoin(GameDataHolderWriter, int);
getCoinNum(GameDataHolderAccessor);
getTotalCoinNum(GameDataHolderAccessor);
isAppearCourseName(GameDataHolderAccessor);
setStageHakoniwa(GameDataHolderWriter);
isEnableCheckpointWarp(GameDataHolderAccessor);
validateCheckpointWarp(GameDataHolderWriter);
invalidateCheckpointWarp(GameDataHolderWriter);
getCheckpointNumMaxInWorld(GameDataHolderAccessor);
getCheckpointTransInWorld(GameDataHolderAccessor, int);
getCheckpointObjIdInWorld(GameDataHolderAccessor, int);
getCheckpointTransInWorld(GameDataHolderAccessor, char const*);
isGotCheckpointInWorld(GameDataHolderAccessor, int);
isGotCheckpoint(GameDataHolderAccessor, al::PlacementId*);
calcGotCheckpointNumInWorld(GameDataHolderAccessor);
changeNextSceneByGotCheckpoint(GameDataHolderWriter, int);
changeNextSceneByHome(GameDataHolderWriter);
isWarpCheckpoint(GameDataHolderAccessor);
getCheckpointWarpObjId(GameDataHolderAccessor);
registerCheckpointTrans(GameDataHolderWriter, al::PlacementId const*, sead::Vector3<float> const&);
isEnableUnlockHint(GameDataHolderAccessor);
unlockHint(GameDataHolderWriter);
unlockHintAmiibo(GameDataHolderWriter);
calcHintNum(GameDataHolderAccessor);
calcRestHintNum(GameDataHolderAccessor);
checkExistHint(GameDataHolderAccessor);
getHintNumMax(GameDataHolderAccessor);
calcHintTrans(GameDataHolderAccessor, int);
getLatestHintTrans(GameDataHolderAccessor);
checkLatestHintSeaOfTree(GameDataHolderAccessor);
calcHintMoonRockNum(GameDataHolderAccessor);
getHintMoonRockNumMax(GameDataHolderAccessor);
calcHintMoonRockTrans(GameDataHolderAccessor, int);
initializeHintList(GameDataHolderWriter);
calcHintTransMostEasy(GameDataHolderAccessor);
calcHintTransMostNear(sead::Vector3<float>*, GameDataHolderAccessor, sead::Vector3<float> const&);
checkHintSeaOfTree(GameDataHolderAccessor, int);
checkHintSeaOfTreeMoonRock(GameDataHolderAccessor, int);
findUnlockShineNum(bool*, GameDataHolderAccessor);
findUnlockShineNumByWorldId(bool*, GameDataHolderAccessor, int);
isUnlockedWorld(GameDataHolderAccessor, int);
isUnlockedNextWorld(GameDataHolderAccessor);
isUnlockedAllWorld(GameDataHolderAccessor);
getWorldIndexSpecial2();
isUnlockedCurrentWorld(GameDataHolderAccessor);
isCollectShineForNextWorldAndNotUnlockNextWorld(al::LiveActor const*);
getMainStageName(GameDataHolderAccessor, int);
tryGetCurrentMainStageName(GameDataHolderAccessor);
tryGetWorldName(al::LayoutActor const*, int);
tryGetWorldNameCurrent(al::LayoutActor const*);
tryGetRegionNameCurrent(al::LayoutActor const*);
getWorldDevelopNameCurrent(GameDataHolderAccessor);
getWorldScenarioNum(GameDataHolderAccessor, int);
findMainStageNameByDevelopName(GameDataHolderAccessor, char const*);
findWorldIdByDevelopName(GameDataHolderAccessor, char const*);
tryFindWorldIdByMainStageName(al::Scene const*, char const*);
tryFindWorldIdByMainStageName(al::IUseSceneObjHolder const*, char const*);
checkEnableUnlockWorldSpecial1(al::LiveActor const*);
getWorldIndexSpecial1();
checkEnableUnlockWorldSpecial2(al::LiveActor const*);
tryGetWorldNameByFileId(al::LayoutActor const*, int);
isNewSaveDataByFileId(al::LayoutActor const*, int);
getLastUpdateFileTime(al::LayoutActor const*, int);
makeTextureSaveDataFileName(sead::BufferedSafeStringBase<char>*, nn::g3d::ResFile const*, GameDataHolder const*, int);
getWorldIndexPeach();
getWorldIndexCity();
isCityWorldCeremonyAll(int, int);
getWorldIndexSea();
unlockWorld(GameDataHolderWriter, int);
getUnlockWorldIdForWorldMap(al::LayoutActor const*, int);
getUnlockWorldIdForWorldMap(al::LiveActor const*, int);
getUnlockWorldIdForWorldMap(al::Scene const*, int);
getUnlockWorldIdForWorldMap(GameDataHolder const*, int);
getUnlockWorldNumForWorldMap(al::Scene const*);
getUnlockWorldNumForWorldMap(al::LiveActor const*);
getUnlockWorldNumForWorldMap(al::LayoutActor const*);
calcNextLockedWorldIdForWorldMap(al::LayoutActor const*, int);
calcNextLockedWorldIdForWorldMap(al::Scene const*, int);
calcNextLockedWorldNumForWorldMap(al::Scene const*);
calcNextLockedWorldNumForWorldMap(al::LayoutActor const*);
getWorldIdForShineList(al::LayoutActor const*, int);
calcWorldNumForShineList(al::LayoutActor const*);
getLatestUnlockWorldIdForShineTowerMeter(al::LiveActor const*);
isClearSandWorldScenario1(al::Scene const*);
isClearCityWorldScenario1(al::Scene const*);
isClearSkyWorldScenario1(al::Scene const*);
isCityWorldScenario2(al::IUseSceneObjHolder const*);
isWorldCity(GameDataHolderAccessor);
calcNextWorldId(GameDataHolderAccessor);
isPlayDemoWorldWarp(GameDataHolderAccessor);
isPlayDemoWorldWarpHole(GameDataHolderAccessor);
noPlayDemoWorldWarp(GameDataHolderWriter);
isPlayDemoReturnToHome(GameDataHolderAccessor);
requestPlayDemoReturnToHome(GameDataHolderWriter);
isPlayDemoAwardSpecial(GameDataHolderAccessor);
requestPlayDemoAwardSpecial(GameDataHolderWriter);
isPlayDemoLavaErupt(GameDataHolderAccessor);
isPlayDemoPlayerDownForBattleKoopaAfter(GameDataHolderAccessor);
disablePlayDemoPlayerDownForBattleKoopaAfter(GameDataHolderWriter);
enteredStage(GameDataHolderWriter);
getCurrentCostumeTypeName(GameDataHolderAccessor);
getCurrentCapTypeName(GameDataHolderAccessor);
wearCostume(GameDataHolderWriter, char const*);
wearCap(GameDataHolderWriter, char const*);
wearCostumeRandom(al::IUseSceneObjHolder*);
wearCapRandom(al::IUseSceneObjHolder*);
tryWearCostumeRandomIfEnable(al::IUseSceneObjHolder*);
isCostumeRandomMode(al::IUseSceneObjHolder*);
tryWearCapRandomIfEnable(al::IUseSceneObjHolder*);
isCapRandomMode(al::IUseSceneObjHolder*);
setCostumeRandomMode(al::IUseSceneObjHolder*);
setCapRandomMode(al::IUseSceneObjHolder*);
resetCostumeRandomMode(al::IUseSceneObjHolder*);
resetCapRandomMode(al::IUseSceneObjHolder*);
getShopItemInfoList(GameDataHolderAccessor);
isExistHackObjInfo(GameDataHolderAccessor, char const*);
getHackObjInfo(GameDataHolderAccessor, char const*);
addHackDictionary(GameDataHolderWriter, char const*);
isExistInHackDictionary(GameDataHolderAccessor, char const*);
isShowHackTutorial(GameDataHolderAccessor, char const*, char const*);
setShowHackTutorial(GameDataHolderWriter, char const*, char const*);
isShowBindTutorial(GameDataHolderAccessor, BindInfo const&);
setShowBindTutorial(GameDataHolderWriter, BindInfo const&);
isGotShine(GameDataHolderAccessor, int, int);
isOpenShineName(al::LayoutActor const*, int, int);
checkAchievementShine(al::LayoutActor const*, int, int);
calcShineNumInOneShine(al::LayoutActor const*, int, int);
tryFindShineMessage(al::LayoutActor const*, int, int);
tryFindShineMessage(al::LiveActor const*, al::IUseMessageSystem const*, int, int);
findShineGetTime(al::LayoutActor const*, int, int);
checkMoonRockShineForShineList(al::LayoutActor const*, int, int);
checkUnlockHintByHintNpcForShineList(al::LayoutActor const*, int, int);
checkUnlockHintByAmiiboForShineList(al::LayoutActor const*, int, int);
checkShineSeaOfTreeForShineList(al::LayoutActor const*, int, int);
getWorldTotalShineNum(GameDataHolderAccessor, int);
getWorldTotalShineNumMax(GameDataHolderAccessor, int);
findShineTrans(sead::Vector3<float>*, GameDataHolderAccessor, int, int);
getHomeTrans(GameDataHolderAccessor);
isExistHome(GameDataHolderAccessor);
isActivateHome(GameDataHolderAccessor);
getMiniGameNum(GameDataHolderAccessor);
getMiniGameNumMax(GameDataHolderAccessor);
getMiniGameTrans(GameDataHolderAccessor, int);
getMiniGameName(GameDataHolderAccessor, int);
getRaceStartTrans(GameDataHolderAccessor);
getRaceGoalTrans(GameDataHolderAccessor);
getHintNpcTrans(GameDataHolderAccessor);
getShopNpcTrans(GameDataHolderAccessor, int);
isShopSellout(GameDataHolderAccessor, int);
calcShopNum(GameDataHolderAccessor);
getShopNpcIconNumMax(GameDataHolderAccessor);
isExistRaceStartNpc(GameDataHolderAccessor);
isExistHintNpc(GameDataHolderAccessor);
getCurrentMapView(GameDataHolderAccessor);
isExistJango(GameDataHolderAccessor);
getJangoTrans(GameDataHolderAccessor);
isExistAmiiboNpc(GameDataHolderAccessor);
getAmiiboNpcTrans(GameDataHolderAccessor);
isInInvalidOpenMapStage(GameDataHolderAccessor);
getStageMapPlayerPos(GameDataHolderAccessor);
isExistTimeBalloonNpc(GameDataHolderAccessor);
getTimeBalloonNpcTrans(GameDataHolderAccessor);
isExistPoetter(GameDataHolderAccessor);
getPoetterTrans(GameDataHolderAccessor);
getMoonRockTrans(GameDataHolderAccessor);
setHomeTrans(al::LiveActor const*, sead::Vector3<float> const&);
setRaceStartNpcTrans(al::LiveActor const*);
setRaceStartTrans(al::LiveActor const*);
setRaceGoalTrans(al::LiveActor const*);
setHintNpcTrans(al::LiveActor const*);
setJangoTrans(al::LiveActor const*);
disableJangoTrans(al::LiveActor const*);
setAmiiboNpcTrans(al::LiveActor const*);
setShopNpcTrans(al::LiveActor const*, char const*, int);
setShopNpcTrans(GameDataHolderAccessor, al::PlacementInfo const&);
setMiniGameInfo(GameDataHolderAccessor, al::PlacementInfo const&);
setTimeBalloonTrans(GameDataHolderAccessor, sead::Vector3<float> const&);
setPoetterTrans(GameDataHolderAccessor, sead::Vector3<float> const&);
setStageMapPlayerPos(GameDataHolderWriter, sead::Vector3<float> const&);
setMoonRockTrans(GameDataHolderWriter, sead::Vector3<float> const&);
getHomeLevel(GameDataHolderAccessor);
upHomeLevel(GameDataHolderWriter);
activateHome(GameDataHolderWriter);
isLaunchHome(GameDataHolderAccessor);
launchHome(GameDataHolderWriter);
isCrashHome(GameDataHolderAccessor);
crashHome(GameDataHolderWriter);
isRepairHome(GameDataHolderAccessor);
repairHome(GameDataHolderWriter);
isBossAttackedHome(GameDataHolderAccessor);
bossAttackHome(GameDataHolderWriter);
isRepairHomeByCrashedBoss(GameDataHolderAccessor);
repairHomeByCrashedBoss(GameDataHolderWriter);
isFindKoopaNext(GameDataHolderAccessor, int);
isBossAttackedHomeNext(GameDataHolderAccessor, int);
isFindKoopa(GameDataHolderAccessor);
findKoopa(GameDataHolderWriter);
isEnableCap(GameDataHolderAccessor);
isMeetCap(GameDataHolderAccessor);
enableCap(GameDataHolderWriter);
disableCapByPlacement(al::LiveActor const*);
isTalkedCapNearHomeInWaterfall(al::LiveActor const*);
talkCapNearHomeInWaterfall(al::LiveActor const*);
isFlagOnTalkMessageInfo(al::IUseSceneObjHolder const*, int);
onFlagTalkMessageInfo(al::IUseSceneObjHolder const*, int);
getWorldIndexHat();
getWorldIndexWaterfall();
getWorldIndexSand();
getWorldIndexForest();
getWorldIndexLake();
getWorldIndexCloud();
getWorldIndexClash();
getWorldIndexSnow();
getWorldIndexLava();
getWorldIndexBoss();
getWorldIndexSky();
getWorldIndexMoon();
isWorldCap(GameDataHolderAccessor);
isWorldWaterfall(GameDataHolderAccessor);
isWorldSand(GameDataHolderAccessor);
isWorldForest(GameDataHolderAccessor);
isWorldLake(GameDataHolderAccessor);
isWorldCloud(GameDataHolderAccessor);
isWorldClash(GameDataHolderAccessor);
isWorldSnow(GameDataHolderAccessor);
isWorldSea(GameDataHolderAccessor);
isWorldBoss(GameDataHolderAccessor);
isWorldSky(GameDataHolderAccessor);
isWorldMoon(GameDataHolderAccessor);
isWorldPeach(GameDataHolderAccessor);
isWorldSpecial1(GameDataHolderAccessor);
isWorldSpecial2(GameDataHolderAccessor);
isWorldTypeMoon(GameDataHolderAccessor, int);
isSnowMainScenario1(al::IUseSceneObjHolder const*);
isSnowMainScenario2(al::IUseSceneObjHolder const*);
isHomeShipStage(GameDataHolder const*);
getHomeShipStageName();
isCityWorldCeremonyAgain(int, int);
isGoToCeremonyFromInsideHomeShip(GameDataHolderAccessor);
registerScenarioStartCameraInfo(ScenarioStartCamera const*, int, al::CameraTicket*);
isEnableExplainAmiibo(GameDataHolderAccessor);
endExplainAmiibo(GameDataHolderWriter);
startSearchHintByAmiibo(GameDataHolderWriter);
endSearchHintByAmiibo(GameDataHolderWriter);
setKidsModeOn(al::Scene const*);
setKidsModeOff(al::Scene const*);
isCollectedBgm(GameDataHolderAccessor, char const*, char const*);
getCollectBgmByIndex(GameDataHolderAccessor, int);
trySetCollectedBgm(GameDataHolderWriter, char const*, char const*);
getCollectedBgmNum(GameDataHolderWriter);
registerShineInfo(GameDataHolderAccessor, ShineInfo const*, sead::Vector3<float> const&);
setHintTrans(GameDataHolderAccessor, int, sead::Vector3<float> const&);
resetHintTrans(GameDataHolderAccessor, int);
isKoopaLv3(GameDataHolderAccessor);

} 
