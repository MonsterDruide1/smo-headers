#pragma once

namespace nn { namespace atk { namespace SoundSystem {

GetRequiredMemSize(nn::atk::SoundSystem::SoundSystemParam const&);
GetRequiredMemSizeForCircularBufferSink(nn::atk::SoundSystem::SoundSystemParam const&);
GetRequiredMemSizeForMemoryPool(nn::atk::SoundSystem::SoundSystemParam const&);
detail_InitializeSoundSystem(nn::Result*, nn::atk::SoundSystem::SoundSystemParam const&, nn::atk::SoundSystem::InitializeBufferSet&);
detail_InitializeDriverCommandManager(nn::atk::SoundSystem::SoundSystemParam const&, unsigned long, unsigned long, unsigned long, unsigned long);
Initialize(nn::atk::SoundSystem::SoundSystemParam const&, unsigned long, unsigned long);
Initialize(nn::Result*, nn::atk::SoundSystem::SoundSystemParam const&, unsigned long, unsigned long);
SetupInitializeBufferSet(nn::atk::SoundSystem::InitializeBufferSet*, nn::atk::SoundSystem::SoundSystemParam const&, nn::atk::SoundSystem::InitializeBufferSet const&);
Initialize(nn::atk::SoundSystem::SoundSystemParam const&, unsigned long, unsigned long, unsigned long, unsigned long);
Initialize(nn::Result*, nn::atk::SoundSystem::SoundSystemParam const&, unsigned long, unsigned long, unsigned long, unsigned long);
Initialize(nn::atk::SoundSystem::SoundSystemParam const&, nn::atk::SoundSystem::InitializeBufferSet&);
Initialize(nn::Result*, nn::atk::SoundSystem::SoundSystemParam const&, nn::atk::SoundSystem::InitializeBufferSet&);
Finalize();
SetSoundThreadBeginUserCallback(void (*)(unsigned long), unsigned long);
ClearSoundThreadBeginUserCallback();
SetSoundThreadEndUserCallback(void (*)(unsigned long), unsigned long);
ClearSoundThreadEndUserCallback();
IsInitialized();
SuspendAudioRenderer(nn::TimeSpan);
ResumeAudioRenderer(nn::TimeSpan);
ExecuteRendering();
AttachMemoryPool(nn::audio::MemoryPoolType*, void*, unsigned long);
DetachMemoryPool(nn::audio::MemoryPoolType*);
DumpMemory();
GetAudioRendererBufferSize();
SetupHardwareManagerParameterFromCurrentSetting(nn::atk::detail::driver::HardwareManager::HardwareManagerParameter*);
GetRecorderBufferSize();
GetUserCircularBufferSinkBufferSize();
GetLowLevelVoiceAllocatorBufferSize();
GetMultiVoiceManagerBufferSize();
GetChannelManagerBufferSize();
GetDriverCommandBufferSize();
GetAllocatableDriverCommandSize();
GetAllocatedDriverCommandBufferSize();
GetAllocatedDriverCommandCount();
RegisterAudioRendererPerformanceReader(nn::atk::AudioRendererPerformanceReader&);
AppendEffect(nn::atk::AuxBus, nn::atk::EffectBase*, void*, unsigned long);
AppendEffect(nn::atk::AuxBus, nn::atk::EffectBase*, void*, unsigned long, nn::atk::OutputDevice);
AppendEffect(nn::atk::AuxBus, nn::atk::EffectBase*, void*, unsigned long, nn::atk::OutputDevice, int);
AppendEffect(nn::atk::AuxBus, nn::atk::EffectAux*, void*, unsigned long);
AppendEffect(nn::atk::AuxBus, nn::atk::EffectAux*, void*, unsigned long, nn::atk::OutputDevice);
AppendEffect(nn::atk::AuxBus, nn::atk::EffectAux*, void*, unsigned long, nn::atk::OutputDevice, int);
AppendEffectToFinalMix(nn::atk::EffectAux*, void*, unsigned long);
AppendEffectToAdditionalSubMix(nn::atk::EffectAux*, void*, unsigned long);
GetRequiredEffectAuxBufferSize(nn::atk::EffectAux const*);
RemoveEffect(nn::atk::AuxBus, nn::atk::EffectBase*);
RemoveEffect(nn::atk::AuxBus, nn::atk::EffectBase*, nn::atk::OutputDevice);
RemoveEffect(nn::atk::AuxBus, nn::atk::EffectBase*, nn::atk::OutputDevice, int);
RemoveEffect(nn::atk::AuxBus, nn::atk::EffectAux*);
RemoveEffect(nn::atk::AuxBus, nn::atk::EffectAux*, nn::atk::OutputDevice);
RemoveEffect(nn::atk::AuxBus, nn::atk::EffectAux*, nn::atk::OutputDevice, int);
RemoveEffectFromFinalMix(nn::atk::EffectAux*);
RemoveEffectFromAdditionalSubMix(nn::atk::EffectAux*);
ClearEffect(nn::atk::AuxBus);
ClearEffect(nn::atk::AuxBus, nn::atk::OutputDevice);
ClearEffect(nn::atk::AuxBus, nn::atk::OutputDevice, int);
ClearEffectFromFinalMix();
ClearEffectFromAdditionalSubMix();
IsClearEffectFinished(nn::atk::AuxBus);
IsClearEffectFinished(nn::atk::AuxBus, nn::atk::OutputDevice);
IsClearEffectFinished(nn::atk::AuxBus, nn::atk::OutputDevice, int);
IsClearEffectFromFinalMixFinished();
IsClearEffectFromAdditionalSubMixFinished();
SetAuxBusVolume(nn::atk::AuxBus, float, nn::TimeSpan);
SetAuxBusVolume(nn::atk::AuxBus, float, nn::TimeSpan, int);
GetAuxBusVolume(nn::atk::AuxBus);
GetAuxBusVolume(nn::atk::AuxBus, int);
SetMainBusChannelVolumeForAdditionalEffect(float, int, int);
GetMainBusChannelVolumeForAdditionalEffect(int, int);
SetAuxBusChannelVolumeForAdditionalEffect(nn::atk::AuxBus, float, int, int);
GetAuxBusChannelVolumeForAdditionalEffect(nn::atk::AuxBus, int, int);
SetAllAuxBusChannelVolumeForAdditionalEffect(float, int, int);
SetAllBusChannelVolumeForAdditionalEffect(float, int, int);
VoiceCommandProcess(nn::atk::UpdateType, unsigned int);
VoiceCommandProcess(unsigned int);
VoiceCommandUpdate();
GetPerformanceFrameBufferSize();
GetDroppedLowLevelVoiceCount();
RegisterSoundThreadUpdateProfileReader(nn::atk::AtkProfileReader<nn::atk::SoundThreadUpdateProfile>&);
UnregisterSoundThreadUpdateProfileReader(nn::atk::AtkProfileReader<nn::atk::SoundThreadUpdateProfile>&);
RegisterSoundThreadInfoRecorder(nn::atk::detail::ThreadInfoRecorder&);
UnregisterSoundThreadInfoRecorder(nn::atk::detail::ThreadInfoRecorder&);
ReadCircularBufferSink(void*, unsigned long);
GetCircularBufferSinkBufferSize();
GetRendererSampleCount();
GetRendererChannelCountMax();
StopCircularBufferSink();
StartCircularBufferSink();
GetCircularBufferSinkState();
VoiceCountMax;
WorkMemoryAlignSize;
VoiceCommandManagerCountMax;
SoundThreadIntervalUsec;
g_IsStreamOpenFailureHalt;
g_IsTaskThreadEnabled;
g_IsManagingMemoryPool;
g_VoiceCountMax;
g_UserEffectCount;
g_IsSoundThreadEnabled;
g_IsInitialized;
g_IsStreamLoadWait;
g_IsEnterSleep;
g_IsInitializedDriverCommandManager;
g_LoadThreadStackPtr;
g_LoadThreadStackSize;
g_SoundThreadStackPtr;
g_SoundThreadStackSize;
g_PerformanceFrameBuffer;
g_PerformanceFrameBufferSize;
g_SoundThreadCommandBufferSize;
g_TaskThreadCommandBufferSize;
g_VoiceCommandBufferSize;
g_MemoryPoolForSoundSystem;
g_RendererSampleRate;
g_IsProfilerEnabled;
g_IsAdditionalEffectBusEnabled;
g_IsAdditionalSubMixEnabled;
g_IsEffectEnabled;
g_IsRecordingEnabled;
g_IsCircularBufferSinkEnabled;
g_IsCircularBufferSinkWarningDisplayed;
g_IsVoiceDropEnabled;
g_IsPreviousSdkVersionLowPassFilterCompatible;
g_IsUnusedEffectChannelMutingEnabled;
g_IsUserThreadRenderingEnabled;

} } } 
