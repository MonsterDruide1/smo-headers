#pragma once

namespace nn { namespace atk { namespace detail { namespace driver { 

class HardwareManager
{
public:
    ~HardwareManager();
    LockEffectAuxList();
    UnlockEffectAuxList();
    LockEffectAuxListForFinalMix();
    UnlockEffectAuxListForFinalMix();
    LockEffectAuxListForAdditionalSubMix();
    UnlockEffectAuxListForAdditionalSubMix();
    HardwareManager();
    ResetParameters();
    SetupMixBufferIndices(int);
    SetupAudioRendererParameter(nn::audio::AudioRendererParameter*, nn::atk::detail::driver::HardwareManager::HardwareManagerParameter const&) const;
    GetRequiredMemSize(nn::atk::detail::driver::HardwareManager::HardwareManagerParameter const&) const;
    GetRequiredMemSizeForMemoryPool(int) const;
    GetRequiredRecorderWorkBufferSize(nn::atk::detail::driver::HardwareManager::HardwareManagerParameter const&) const;
    GetRequiredCircularBufferSinkWithMemoryPoolBufferSize(nn::atk::detail::driver::HardwareManager::HardwareManagerParameter const&) const;
    GetRequiredCircularBufferSinkBufferSize(nn::atk::detail::driver::HardwareManager::HardwareManagerParameter const&) const;
    GetChannelCountMax() const;
    RegisterRecorder(nn::atk::DeviceOutRecorder*);
    UnregisterRecorder(nn::atk::DeviceOutRecorder*);
    UpdateRecorder();
    ReadRecordingCircularBufferSink(void*, unsigned long);
    AllocateRecordingCircularBufferSink();
    FreeRecordingCircularBufferSink(nn::audio::CircularBufferSinkType*);
    StartRecordingCircularBufferSink();
    StopUserCircularBufferSink();
    StartUserCircularBufferSink(bool);
    ReadUserCircularBufferSink(void*, unsigned long);
    AttachMemoryPool(nn::audio::MemoryPoolType*, void*, unsigned long, bool);
    RequestUpdateAudioRenderer();
    DetachMemoryPool(nn::audio::MemoryPoolType*, bool);
    ExecuteAudioRendererRendering();
    WaitAudioRendererEvent();
    GetDroppedLowLevelVoiceCount() const;
    GetRequiredPerformanceFramesBufferSize(nn::atk::detail::driver::HardwareManager::HardwareManagerParameter const&) const;
    Initialize(void*, unsigned long, void*, unsigned long, void*, unsigned long, nn::atk::detail::driver::HardwareManager::HardwareManagerParameter const&);
    SetBiquadFilterCallback(int, nn::atk::BiquadFilterCallback const*);
    SetOutputMode(nn::atk::OutputMode, nn::atk::OutputDevice);
    UpdateEndUserOutputMode();
    Finalize();
    FinalizeEffect(nn::atk::AuxBus, nn::atk::OutputDevice, int);
    FinalizeAuxEffect(nn::atk::AuxBus, nn::atk::OutputDevice, int);
    FinalizeAuxEffectForFinalMix();
    FinalizeAuxEffectForAdditionalSubMix();
    Update();
    GetEffectList(nn::atk::AuxBus, nn::atk::OutputDevice, int);
    GetEffectAuxList(nn::atk::AuxBus, nn::atk::OutputDevice, int);
    UpdateAuxBusMixVolume(nn::atk::AuxBus, int, bool);
    UpdateAuxBusMixVolume(nn::atk::AuxBus, int);
    UpdateEffect();
    GetEffectAuxListForFinalMix();
    GetEffectAuxListForAdditionalSubMix();
    SuspendAudioRenderer();
    ResumeAudioRenderer();
    TimedWaitAudioRendererEvent(nn::TimeSpan);
    SetAudioRendererRenderingTimeLimit(int);
    GetAudioRendererRenderingTimeLimit();
    PrepareReset();
    IsResetReady() const;
    GetChannelCount() const;
    GetOutputVolume() const;
    SetOutputDeviceFlag(unsigned int, unsigned char);
    SetMasterVolume(float, int);
    SetSrcType(nn::atk::SampleRateConverterType);
    AppendEffect(nn::atk::AuxBus, nn::atk::EffectBase*, void*, unsigned long, nn::atk::OutputDevice, int);
    AppendEffect(nn::atk::AuxBus, nn::atk::EffectAux*, void*, unsigned long, nn::atk::OutputDevice, int);
    AppendEffectToFinalMix(nn::atk::EffectAux*, void*, unsigned long);
    AppendEffectToAdditionalSubMix(nn::atk::EffectAux*, void*, unsigned long);
    RemoveEffect(nn::atk::AuxBus, nn::atk::EffectBase*, nn::atk::OutputDevice, int);
    RemoveEffect(nn::atk::AuxBus, nn::atk::EffectAux*, nn::atk::OutputDevice, int);
    RemoveEffectFromFinalMix(nn::atk::EffectAux*);
    RemoveEffectFromAdditionalSubMix(nn::atk::EffectAux*);
    ClearEffect(nn::atk::AuxBus, nn::atk::OutputDevice, int);
    ClearEffectFromFinalMix();
    ClearEffectFromAdditionalSubMix();
    IsFinishedClearEffect(nn::atk::AuxBus, nn::atk::OutputDevice, int) const;
    GetEffectList(nn::atk::AuxBus, nn::atk::OutputDevice, int) const;
    GetEffectAuxList(nn::atk::AuxBus, nn::atk::OutputDevice, int) const;
    IsFinishedClearEffectFromFinalMix() const;
    GetEffectAuxListForFinalMix() const;
    IsFinishedClearEffectFromAdditionalSubMix() const;
    GetEffectAuxListForAdditionalSubMix() const;
    GetRequiredEffectAuxBufferSize(nn::atk::EffectAux const*) const;
    SetAuxBusVolume(nn::atk::AuxBus, float, int, int);
    GetAuxBusVolume(nn::atk::AuxBus, int) const;
    SetMainBusChannelVolumeForAdditionalEffect(float, int, int);
    GetMainBusChannelVolumeForAdditionalEffect(int, int) const;
    SetAuxBusChannelVolumeForAdditionalEffect(nn::atk::AuxBus, float, int, int);
    GetAuxBusChannelVolumeForAdditionalEffect(nn::atk::AuxBus, int, int) const;
    FlushDataCache(void*, unsigned long);
    ChannelIndexSettings;
    SoundFrameIntervalMsec;
    SoundFrameIntervalUsec;
    DefaultRendererSampleRate;
    DefaultRendererUserEffectCount;
    DefaultRendererVoiceCountMax;
    DefaultRecordingAudioFrameCount;
    MixerCount;
    ChannelCountMax;
    BusCount;
    DefaultRendererSampleCount;
    DefaultRendererMixBufferCount;
    DefaultRendererSubMixCount;
    DefaultRendererSinkCount;
    DefaultRendererPerformanceFrameCount;
    DefaultRendererSystemEffectCount;
    SubMixCountMax;
    SubMixCountForAdditionalEffect;
    ChannelCountForAdditionalEffect;
    AuxBusCountForAdditionalEffect;
    MixBufferCountForAdditionalEffect;
    DefaultRendererIsVoiceDropEnabled;
};

} } } } 
