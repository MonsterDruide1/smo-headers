#pragma once

class Shine
{
public:
    Shine(char const*);
    init(al::ActorInitInfo const&);
    getCurrentModel();
    tryExpandShadowAndClipping();
    initAppearDemo(al::ActorInitInfo const&);
    onAppear();
    offAppear();
    hideAllModel();
    invalidateKillSensor();
    initAfterPlacement();
    getDirect();
    updateHintTrans(sead::Vector3<float> const&) const;
    appear();
    makeActorAlive();
    makeActorDead();
    control();
    updateModelActorPose();
    attackSensor(al::HitSensor*, al::HitSensor*);
    receiveMsg(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    showCurrentModel();
    appearPopup();
    addDemoActorWithModel();
    get();
    endClipped();
    initAppearDemoFromHost(al::ActorInitInfo const&, sead::Vector3<float> const&);
    initAppearDemoFromHost(al::ActorInitInfo const&);
    initAppearDemoActorCamera(al::ActorInitInfo const&);
    createShineEffectInsideObject(al::ActorInitInfo const&, sead::Vector3<float> const&, char const*);
    isGot() const;
    isEmptyShineForDemoGetGrand() const;
    setShopShine();
    isEndAppear() const;
    isEndAppearGK() const;
    onSwitchGet();
    getColorFrame() const;
    setHintPhotoShine(al::ActorInitInfo const&);
    appearCommon();
    tryChangeCoin();
    tryAppearOrDemoAppear();
    appearPopup(sead::Vector3<float> const&);
    appearPopupDelay(int);
    appearPopupSlot(sead::Vector3<float> const&);
    appearWarp(sead::Vector3<float> const&, sead::Vector3<float> const&);
    appearStatic();
    appearPopupWithoutDemo();
    appearPopupGrandByBoss(int);
    appearPopupWithoutWarp();
    appearAndJoinBossDemo(char const*, sead::Quat<float> const&, sead::Vector3<float> const&);
    endBossDemo();
    endBossDemoAndStartFall(float);
    appearWait();
    appearWait(sead::Vector3<float> const&);
    startHold();
    startFall();
    getDirectWithDemo();
    addDemoModelActor();
    setGrandShine();
    exeWaitRequestDemo();
    exeWaitKill();
    exeDemoAppear();
    tryWaitCameraInterpole() const;
    tryStartAppearDemo();
    calcCameraAt();
    exeDemoMove();
    updateIgnoreFrame();
    exeDemoWait();
    exeDemoGet();
    exeDemoGetMain();
    exeDemoGetGrand();
    exeBossDemo();
    exeBossDemoAfterFall();
    exeBossDemoAfterLanding();
    exeBossDemoFall();
    exeBossDemoFallSlowdown();
    exeBossDemoRise();
    exeBossDemoRiseDamp();
    exeAppearSlot();
    exeAppearSlotDown();
    exeAppear();
    exeAppearWait();
    exeAppearDown();
    exeAppearStatic();
    exeAppearEnd();
    exeAppearWaitCameraInterpole();
    exeWait();
    exeGot();
    exeHold();
    exeFall();
    exeDelay();
    exeHide();
    exeReaction();
    exeCoin();
    updateModelActorResetPosition();
    getActorDimensionKeeper() const;
};
