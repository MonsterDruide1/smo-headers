#pragma once

class BreedaWanwan
{
public:
    BreedaWanwan(char const*, int);
    init(al::ActorInitInfo const&);
    makeActorDead();
    killCap();
    calcAnim();
    control();
    attackSensor(al::HitSensor*, al::HitSensor*);
    isEnableEnemyAttack() const;
    isReflectCapAttack() const;
    isEnablePush() const;
    receiveMsg(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    isEnableHack() const;
    isEnableTrampleAttack() const;
    isEnableCapAttack() const;
    tryBlowCap(al::HitSensor*);
    exeWander();
    exeDemo();
    exeWait();
    updateVelocityPull(bool);
    updateVelocityGround(bool);
    exeTurn();
    exeAttackSign();
    exeAttack();
    exeAttackSuccess();
    exeAttackEnd();
    exeSpinAttackStart();
    exeSpinAttack();
    exeSpinAttackEnd();
    exeHitBreeda();
    exeTrampled();
    exeSorry();
    exeSanity();
    exeSwoon();
    exeHack();
    endHack();
    exeBack();
    exeStop();
    isNoCap() const;
    appearCapAll();
    appearCap(int);
    setEnableCapCount(int);
    isBack() const;
    isHacked() const;
    isSorry() const;
    isSanity() const;
    isSwoon() const;
    isAttackSuccess() const;
    isWanderMove() const;
    startWander();
    startDemo();
    startBattle();
    requestAttackSuccess();
    endHitBreeda();
    startSpinAttack(sead::Vector3<float> const&);
    isEndSpinAttack() const;
    stop();
    setBreedaPosPtr(sead::Vector3<float> const*);
    setBreedaHandPosPtr(sead::Vector3<float> const*);
    setThrowEndPosPtr(sead::Vector3<float> const*);
    setBreedaHeadMtxPtr(sead::Matrix34<float> const*);
    isPullAnimStart() const;
    validatePull();
    invalidatePull();
};
