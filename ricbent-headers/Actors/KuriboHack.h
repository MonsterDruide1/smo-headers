#pragma once

class KuriboHack
{
public:
    KuriboHack(char const*);
    init(al::ActorInitInfo const&);
    tryCreateEnemyCap(al::ActorInitInfo const&);
    setNerveRideOnCommon();
    resetRideOnPosBottomWithDefaultParam();
    onSnapShotMode();
    offSnapShotMode();
    initAfterPlacement();
    makeActorAlive();
    onDynamics();
    makeActorDead();
    appear();
    kill();
    movement();
    detach(KuriboHack*);
    control();
    checkSandSinkPrecisely() const;
    updateCollider();
    solveCollisionInHacking(sead::Vector3<float> const&);
    pushFrom(KuriboHack*, sead::Vector3<float> const&);
    calcAnim();
    updateCapLockOnMtx();
    startClipped();
    forceStartClipped();
    endClipped();
    appearFall();
    noRevive();
    exeWait();
    setShiftTypeOnGround(int);
    offDynamics();
    syncRideOnPosBottomWithDefaultParam();
    exeWander();
    tryShiftDrown();
    exeTurn();
    exeFind();
    exeChase();
    exeStop();
    exeAttack();
    exePressDown();
    exeBlowDown();
    exeDamageCap();
    exeFall();
    exeLand();
    tryShiftChaseOrWander();
    exeSink();
    updateSink();
    exeSlide();
    exeReset();
    exeSandGeyser();
    clearSink();
    exeWaitHack();
    exeTowerHackEnd();
    exeHack();
    invalidateHackDamage();
    shiftWaitHack();
    endHack();
    exeRideOn();
    endRideOn();
    exeDrown();
    exeEatBind();
    attackSensor(al::HitSensor*, al::HitSensor*);
    receiveMsg(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    prepareKillByShineGet();
    tryReceiveMsgHack(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    tryReceiveMsgWaitHack(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    tryReceiveMsgRideOn(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    tryReceiveMsgEatBind(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    tryReceiveMsgNormal(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    transferGroup(sead::OffsetList<KuriboHack>*);
    eraseFromHost();
    notifyJumpSink(float);
    isSinking() const;
    syncRideOnPosBottom(float, float);
    resetRideOnPosBottom(float);
    validateSpecialPush(unsigned int);
    startRideOnRotation();
    applyRideOnQuat(sead::Quat<float> const&);
    isInvalidHackDamage() const;
    validateHipDropProbe(al::HitSensor*);
    indexInHostList() const;
    getRideOnRowSize();
    isCapWorn() const;
    isEnableHack() const;
    trySetHipDropActor(al::SensorMsg const*, al::HitSensor*);
    addCapToHackDemo();
    tryReceiveMsgPush(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    tryRideOnHack(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    notifyKillByShineGetToGroup(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
};
