#pragma once

class HackCap
{
public:
    HackCap(al::LiveActor const*, char const*, PlayerInput const*, PlayerAreaChecker const*, PlayerWallActionHistory const*, PlayerCapActionHistory const*, PlayerEyeSensorHitHolder const*, PlayerSeparateCapFlag const*, IUsePlayerCollision const*, IUsePlayerHeightCheck const*, PlayerWetControl const*, PlayerJointControlKeeper const*, HackCapJudgePreInputSeparateThrow*, HackCapJudgePreInputSeparateJump*);
    init(al::ActorInitInfo const&);
    hide(bool);
    movement();
    updateShadowMaskOffset();
    control();
    isFlying() const;
    updateTargetLayout();
    updateCollider();
    updateFrameOutLayout();
    attackSpin(al::HitSensor*, al::HitSensor*, float);
    prepareLockOn(al::HitSensor*);
    sendMsgStartHack(al::HitSensor*);
    receiveRequestTransferHack(al::HitSensor*, al::HitSensor*);
    startThrowSeparatePlayHack(al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
    startHack();
    emitHackStartEffect();
    noticeHackMarioEnter();
    noticeHackDemoPuppetableEnd();
    recordHack();
    addHackStartDemo();
    addLockOnKeepDemo();
    syncHackDamageVisibility(bool);
    endHack();
    startSpinAttack(char const*);
    startThrow(bool, sead::Vector3<float> const&, sead::Vector3<float> const&, float, sead::Vector2<float> const&, sead::Vector2<float> const&, sead::Vector3<float> const&, bool, sead::Vector3<float> const&, HackCap::SwingHandType, bool, float, int);
    startThrowSeparatePlay(sead::Vector3<float> const&, sead::Vector3<float> const&, float, bool);
    startThrowSeparatePlayJump(sead::Vector3<float> const&, sead::Vector3<float> const&, float);
    startCatch(char const*, bool, sead::Vector3<float> const&);
    isNoPutOnHide() const;
    forcePutOn();
    forceHack(al::HitSensor*, CapTargetInfo const*);
    resetLockOnParam();
    setupStartLockOn();
    cancelCapState();
    isEnableThrow() const;
    isEnableSpinAttack() const;
    isSpinAttack() const;
    requestReturn(bool*);
    tryReturn(bool, bool*);
    updateCapPose();
    followTarget();
    syncPuppetSilhouette();
    recordCapJump(PlayerWallActionHistory*);
    getFlyingSpeedMax() const;
    getThrowSpeed() const;
    requestLockOnHitReaction(CapTargetInfo const*, char const*);
    startPuppet();
    endPuppet();
    hidePuppetCap();
    showPuppetCap();
    hidePuppetCapSilhouette();
    showPuppetCapSilhouette();
    startPuppetCheckpointWarp();
    startHackShineGetDemo();
    endHackThrowAndReturnHack();
    endHackShineGetDemo();
    calcHackFollowTrans(sead::Vector3<float>*, bool) const;
    makeFollowMtx(sead::Matrix34<float>*) const;
    updateCapEyeShowHide(bool, int);
    activateInvincibleEffect();
    syncInvincibleEffect(bool);
    updateSeparateMode(PlayerSeparateCapFlag const*);
    isEnableRescuePlayer() const;
    isRescuePlayer() const;
    isEnableHackThrow(bool*) const;
    isSeparateHipDropLand() const;
    isSeparateHide() const;
    isSeparateThrowFlying() const;
    startRescuePlayer();
    prepareCooperateThrow();
    requestForceFollowSeparateHide();
    calcSeparateHideSpeedH(sead::Vector3<float> const&) const;
    updateModelAlphaForSnapShot();
    getPadRumblePort() const;
    isEnableThrowSeparate() const;
    isHoldInputKeepLockOn() const;
    isRequestableReturn() const;
    isLockOnEnableHackTarget() const;
    isWaitHackLockOn() const;
    isCatched() const;
    isHide() const;
    isPutOn() const;
    isLockOnInterpolate() const;
    isEnablePreInput() const;
    isForceCapTouchJump() const;
    isHackInvalidSeparatePlay() const;
    exeLockOn();
    updateThrowJoint();
    exeHack();
    exeSpinAttack();
    exeCatch();
    exeTrample();
    isHoldSpinCapStay() const;
    exeTrampleLockOn();
    exeRescue();
    exeHide();
    exeThrowStart();
    isThrowTypeSpiral() const;
    isThrowTypeRolling() const;
    setupThrowStart();
    getThrowHeight() const;
    checkEnableThrowStartSpace(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, float, float, bool, sead::Vector3<float> const&);
    updateWaterArea();
    getThrowRange() const;
    getThrowBrakeTime() const;
    startThrowCapEyeThrowAction();
    exeThrow();
    tryCollideReflectReaction();
    tryCollideWallReaction();
    changeThrowParamInWater(int, bool);
    addCurveOffset();
    exeThrowBrake();
    tryAppendAttack();
    exeThrowSpiral();
    tryCollideWallReactionSpiral();
    endThrowSpiral();
    exeThrowTornado();
    tryCollideWallReactionReflect();
    exeThrowRolling();
    tryCollideWallReactionRollingGround();
    rollingGround();
    exeThrowRollingBrake();
    exeThrowStay();
    tryChangeSeparateThrow();
    getThrowBackSpeed() const;
    updateLavaSurfaceMove();
    tryCollideWallReactionStay();
    isEnableHackThrowAutoCatch() const;
    getThrowStayTime() const;
    getThrowStayTimeMax() const;
    exeThrowAppend();
    getThrowSpeedAppend() const;
    getThrowRangeAppend() const;
    exeBlow();
    tryCollideWallLockOn();
    endHackThrowAndReturnHackOrHide();
    clearThrowType();
    exeRebound();
    exeReturn();
    calcReturnTargetPos(sead::Vector3<float>*) const;
    attackSensor(al::HitSensor*, al::HitSensor*);
    stayRollingOrReflect();
    receiveMsg(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    endMove();
    isEnableCapTouchJumpInput() const;
    prepareTransferLockOn(al::HitSensor*);
    collideThrowStartArrow(al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
    trySendAttackCollideAndReaction(bool*);
    stayWallHit();
    endHackThrow();
};
