#pragma once

class MofumofuBody
{
public:
    MofumofuBody(char const*, MofumofuBulletHolder const*, MofumofuJudgeDamage const*, bool);
    init(al::ActorInitInfo const&);
    revivalWarpWait(int, char const*);
    kill();
    attackSensor(al::HitSensor*, al::HitSensor*);
    receiveMsg(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    isLightDown() const;
    calcAnim();
    getAttackSensorRadius() const;
    getBodySensorRadius() const;
    startInvincibleWithCharge();
    startInvincibleNoCharge();
    endInvincible();
    startDemoOpeningWait(int);
    startDemoOpening1(int);
    startDemoOpening2(bool, bool);
    startActionWait(float);
    startActionMove(float, int);
    startActionMoveWarp(int);
    startActionMoveWarpEnd(int);
    startActionDash(float, int);
    startActionStop();
    startActionPanic();
    startAttack(MofumofuBulletShootInfo const&, int);
    startChainExplode(int);
    startStopStart();
    startStop();
    startStopMove();
    startStopMoveEnd();
    startAllLightDownDamage(int);
    startPanicDamage(int);
    startDamage(int);
    startDamageAfter(int);
    startDamageLast(int);
    startDemoBattleEnd(int);
    startWarpIn();
    startWarpOut();
    startDashSink();
    playResetLv1();
    endDashSink();
    isEnableAttack() const;
    isAttackSign() const;
    isAttackAll() const;
    isAllLightDownDamage() const;
    isReceivePanicDamage() const;
    isReceiveAllLightDownDamage() const;
    isWarpIn() const;
    isWarpWait() const;
    isWarpOut() const;
    exeDemoOpeningWaitDelay();
    exeDemoOpeningWait();
    exeDemoOpeningDelay();
    exeDemoOpening1();
    exeDemoOpening2();
    exeDelay();
    exeWait();
    exeMoveDelay();
    exeMove();
    exeMoveWarpStart();
    exeMoveWarp();
    exeMoveWarpEnd();
    exeDash();
    exeAttackDelay();
    exeAttackSign();
    exeAttack();
    exeLightDown();
    exeLightDownReaction();
    exeLightDownChainDelay();
    exeAllLightDownPrepare();
    exeAllLightDownDelay();
    exeAllLightDown();
    exeWarpIn();
    exeWarpWait();
    endWarpWait();
    exeWarpOut();
    exeStopStart();
    exeStop();
    exeStopMove();
    exeStopMoveEnd();
    exePanicMove();
    exePanic();
    exePanicDamagePrepare();
    exePanicDamageDelay();
    exePanicDamage();
    exeDamageDelay();
    exeDamage();
    exeDamageAfterDelay();
    exeDamageAfter();
    exeDamageLastDelay();
    exeDamageLast();
    exeDemoBattleEnd();
    exeDemoBattleEndDieSign();
    exeDemoBattleEndDie();
};
