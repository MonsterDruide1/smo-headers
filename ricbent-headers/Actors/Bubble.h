#pragma once

class Bubble
{
public:
    Bubble(char const*);
    init(al::ActorInitInfo const&);
    recalcClippingInfo();
    start();
    killAll();
    isIgnoreTriangle(al::Triangle const&) const;
    initAfterPlacement();
    checkEffectPos();
    isValidCollisionOrWaveCheck() const;
    appear();
    control();
    isHack() const;
    revive();
    updateLavaWave();
    updateScrollAnimRate();
    isOnGround() const;
    calcAnim();
    updateCollider();
    attackSensor(al::HitSensor*, al::HitSensor*);
    receiveMsg(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    setupHack();
    isCurrentNerveEnableLockOnAndStartHack() const;
    offGroupClipping();
    startHackLocal(al::HitSensor*, al::HitSensor*);
    isInvalidHackEscape() const;
    prepareEndHack();
    endHackByCancel();
    forceEndHack();
    exeStandBy();
    exeDelay();
    exeRailMove();
    updatePosOnWave();
    exeReady();
    updateVelocityIfValidCollision();
    isOnDamageFire() const;
    exeUp();
    tryStartHitReactionUp();
    updateShadowMaskLength();
    exeTurn();
    exeDown();
    tryStartHitReactionDown();
    shiftSink();
    exeSink();
    headUp();
    exeWait();
    shiftReadyOrMove();
    exeDie();
    exeWaitHack();
    exeWaitHackStart();
    endWaitHackStart();
    exeWaitHackFall();
    trySendMsgStartInSaucePan();
    exeHackFall();
    tryHitReactionThroughFence();
    tryShiftLand();
    exeHackMove();
    isHoldHackAction() const;
    tryBoundMoveWall();
    updateHackOnGround();
    constrainLavaDomain();
    tryShiftFall();
    isTriggerHackSwing() const;
    faceToMoveVec();
    isTriggerHackJump() const;
    endHackMove();
    exeHackJump();
    revertTargetQuatInHackJump(sead::Quat<float>*, sead::Quat<float>*);
    calcHackerMoveVec(sead::Vector3<float>*, sead::Vector3<float> const&) const;
    makeDisplayQuatInHackJump(sead::Quat<float> const&, sead::Quat<float> const&, sead::Quat<float> const&, bool);
    isDropAttackCollision() const;
    isRiseAttackCollision() const;
    isHoldHackJump() const;
    tryShiftContinuousJump();
    endHackJump();
    exeHackLand();
    calcHackerMoveDir(sead::Vector3<float>*, sead::Vector3<float> const&) const;
    exeHackInLauncher();
    endHackInLauncher();
    exeHackResetPos();
    exeHackDemo();
    exeRevive();
    isWaitingLaunch() const;
    launch(sead::Vector3<float> const&, float, al::CameraTicket*);
    launchCancel(sead::Vector3<float> const&);
    showHackCap();
    hideHackCap();
    isTriggerJump() const;
    isTriggerAction() const;
    isTriggerHackAction() const;
    isTriggerCancel() const;
    startJumpAnim(float);
    resetAndAppear(sead::Vector3<float> const&, sead::Quat<float> const&, float);
    endHackCommon();
    calcLaunchPos(sead::Vector3<float>*, sead::Vector3<float> const&, float, float) const;
    onGroupClipping();
    isOnGroundNoVelocity() const;
    updateCollisionPartsMove();
    accelStick();
    addHackActorAccelStick(sead::Vector3<float>*, float, sead::Vector3<float> const&);
    isGroundOverTheWave(bool, sead::Vector3<float> const&) const;
    isEnableSnapWaveSurface() const;
};
