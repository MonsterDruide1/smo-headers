#pragma once

class ShineTowerRocket
{
public:
    ShineTowerRocket(char const*);
    init(al::ActorInitInfo const&);
    onSwitchDither();
    offSwitchDither();
    makeActorDead();
    makeActorAlive();
    initAfterPlacement();
    startClipped();
    control();
    isActiveDirtyModel() const;
    calcAnim();
    receiveMsg(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
    attackSensor(al::HitSensor*, al::HitSensor*);
    receiveEvent(al::EventFlowEventData const*);
    tryStartEntranceCamera(int);
    isFirstDemo() const;
    isEnableSkipDemo() const;
    skipDemo();
    exeWait();
    updateParts();
    isNearPlayerEntrance() const;
    exeReaction();
    exeDemoPrepare();
    tryStartDemo();
    tryEndEntranceCamera();
    exeDemoWalkPlayerToPoint();
    calcPlayerPoseForPayDemo();
    tryStartHitReactionDemoStart();
    exeDemoAppearShine();
    exeDemoWaitAfterAppearShine();
    tryLevelUp();
    exeDemoWaitBeforeScaleUpDirect();
    calcCameraMtxMeterUpPrev();
    exeDemoScaleUp();
    exeDemoMeterRotate();
    calcCameraMtx();
    setupRotateMeter();
    exeDemoMeterUpPrev();
    exeDemoMeterUp();
    exeDemoMeterUpPost();
    exeDemoTutorialShine();
    exeDemoSelectGoOtherWorld();
    exeDemoAwardMoon();
    exeDemoUpLevelCamera();
    calcCameraMtxLevelUp();
    exeDemoUpLevel();
    exeDemoInformPowerUp();
    exeDemoInformPowerUpMessage();
    exeDemoKoopaShip();
    exeDemoKoopaShipFade();
    exeDemoUpLevelCloseFade();
    exeDemoUpLevelWaitFade();
    exeDemoUpLevelOpenFade();
    exeDemoInformNewHome();
    exeDemoInformNewHomeMessage();
    exeDemoInformPeachCastleCap();
    exeDemoInformRepairHome();
    exeDemoInformNewItem();
    exeDemoInformCompleteShineFadeIn();
    exeDemoInformCompleteShineFadeWait();
    exeDemoInformCompleteShineFadeOut();
    exeDemoInformCompleteShine();
    exeDemoWarpWorld();
    exeWaitDemo();
    exeDemoAppearPlayerFromHome();
    isActiveDamageModel() const;
    exeDemoAppearPlayerFromHomeAfter();
    exeDemoReturnToHome();
    isActiveDirtyOrClashModel() const;
    exeDemoWorldTakeoff();
    exeDemoWorldTakeoffNext();
    setupWorldTakeoffPose(bool);
    exeDemoAppearFromEntrance();
    exeDemoWorldTakeoffForDebug();
    exeNoStart();
    exeNoStartEarth();
    exeNoStartEnter();
    exeBackDoor();
    exeNoStartAndCoin();
    exeGoToWorldMapWithCamera();
    setupWorldMapCameraParam();
    exeGoToWorldMapWithFade();
    exeWorldMap();
    cancelWorldMap();
    decideWorldMap(int);
    isWorldMap() const;
    startDemoAppearPlayerFromHome();
    startDemoReturnToHome();
    updatePartsByDamage();
    isActiveClashModel() const;
};
