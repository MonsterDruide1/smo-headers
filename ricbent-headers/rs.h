#pragma once

namespace rs {

resetHelpAmiiboState(al::IUseSceneObjHolder const*);
isHelpAmiiboMode(al::IUseSceneObjHolder const*);
procForRestart(al::AudioDirector const*, al::AudioDirector const*, bool);
endBgmSituationForSceneTransition(al::IUseAudioKeeper const*);
tryRegistBgmResourceNameToBgmRhythmSyncDirector(al::IUseAudioKeeper const*);
stopCollectBgm(al::Scene*, int);
stopCollectBgm(al::LiveActor*, int);
tryCreateBarrierField(al::ActorInitInfo const&);
updateEyeMove(al::LiveActor*, sead::Vector3<float> const&, float, char const*);
resetEyeMove(al::LiveActor*, char const*);
startBossBattle(al::LiveActor const*, int);
endBossBattle(al::LiveActor const*, int);
getBossBattleDeadCount(al::LiveActor const*, int);
isAlreadyShowDemoBossBattleStart(al::LiveActor const*, int, int);
saveShowDemoBossBattleStart(al::LiveActor const*, int, int);
isAlreadyShowDemoBossBattleEndKoopaLv2(al::LiveActor const*);
saveShowDemoBossBattleEndKoopaLv2(al::LiveActor const*);
isAlreadyShowDemoMoonBasementCollapse(al::LiveActor const*);
saveShowDemoMoonBasementCollapse(al::LiveActor const*);
isAlreadyDeadGK(al::LiveActor const*, int, int);
onAlreadyDeadGK(al::LiveActor const*, int, int);
isActiveBattleGiantWanderBoss(al::IUseSceneObjHolder const*);
isScareByGiantWanderBoss(al::LiveActor const*);
tryStartKoopaPuppet(al::HitSensor*, al::HitSensor*);
endKoopaPuppet(KoopaPuppet**);
endKoopaPuppetAndPopUp(KoopaPuppet**, sead::Vector3<float> const&);
tryCreateDemoStateHackFirst(al::LiveActor*, al::ActorInitInfo const&);
tryCreateEnemyCap(al::LiveActor*, al::ActorInitInfo const&);
tryCreateEnemyCap(al::LiveActor*, al::ActorInitInfo const&, char const*);
tryCreateEnemyCapSuffix(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*);
tryStartEnemyCapBlowDown(EnemyCap*, al::HitSensor const*);
tryStartEnemyCapBlowDown(EnemyCap*);
tryAppearEnemyCap(EnemyCap*);
isOnEnemyCap(EnemyCap*);
getTsukkunTraceHolder(al::IUseSceneObjHolder const*);
createCoinCollectHolder(al::IUseSceneObjHolder const*);
createCoinCollectWatcher(al::IUseSceneObjHolder const*);
tryCreateLifeUpItemGenerateWatcher(al::LiveActor const*, al::ActorInitInfo const&);
tryGenerateLifeUpItem(al::LiveActor const*);
createRandomItemSelector(al::IUseSceneObjHolder const*);
isExistShineChipWatcher(al::IUseSceneObjHolder const*);
isCompleteShineChip(al::IUseSceneObjHolder const*);
getShineChipCount(al::IUseSceneObjHolder const*);
getCurrentShineChipWatcherIndex(al::IUseSceneObjHolder const*);
isCurrentShineChipWatcherTypeEmpty(al::IUseSceneObjHolder const*);
isAppearedShineChipShine(al::IUseSceneObjHolder const*);
addDemoActorShineChipWatcher(al::IUseSceneObjHolder const*);
isEnableStartShineChipCompleteDemo(al::IUseSceneObjHolder const*);
tryStartAppearShineChipShine(al::IUseSceneObjHolder const*);
isInAreaCurrentShineChipWatcher(al::IUseSceneObjHolder const*);
registerFruit(al::LiveActor*, SaveObjInfo*);
registerFruitShineHolder(YoshiFruitShineHolder*);
noticeCurrentHackYoshi(Yoshi*);
noticeGetFruit(al::LiveActor*, SaveObjInfo*);
createNormalBalloonEmote(al::LayoutInitInfo const&, sead::Matrix34<float> const*, sead::Vector3<float> const&);
createMeatBalloon(al::LayoutInitInfo const&, sead::Matrix34<float> const*, sead::Vector3<float> const&);
createShopBalloon(al::LayoutInitInfo const&, sead::Matrix34<float> const*, sead::Vector3<float> const&);
createCheckpointFlagBalloon(al::LayoutInitInfo const&, sead::Matrix34<float> const*, sead::Vector3<float> const&);
createHelpBalloon(al::LayoutInitInfo const&, sead::Matrix34<float> const*, sead::Vector3<float> const&);
createActionBalloon(al::LayoutInitInfo const&, sead::Matrix34<float> const*, sead::Vector3<float> const&);
createMainScenarioBalloon(al::LayoutInitInfo const&, sead::Matrix34<float> const*, sead::Vector3<float> const&);
setMainScenarioText(BalloonIcon*, char16_t const*);
setKidsModeLayoutDisable(al::IUseSceneObjHolder const*);
setKidsModeLayoutEnable(al::IUseSceneObjHolder const*);
isKidsModeLayoutDisable(al::IUseSceneObjHolder const*);
calcTransOnMap(sead::Vector2<float>*, sead::Vector3<float> const&, sead::Matrix44<float> const&, sead::Vector2<float> const&, float, float);
tryCalcMapNorthDir(sead::Vector3<float>*, al::IUseSceneObjHolder const*);
getMapViewProjMtx(al::IUseSceneObjHolder const*);
getMapProjMtx(al::IUseSceneObjHolder const*);
appearMapWithHint(al::IUseSceneObjHolder const*);
addAmiiboHintToMap(al::IUseSceneObjHolder const*);
appearMapWithAmiiboHint(al::IUseSceneObjHolder const*);
appearMapMoonRockDemo(al::IUseSceneObjHolder const*, int);
endMap(al::IUseSceneObjHolder const*);
isEndMap(al::IUseSceneObjHolder const*);
isEnableCheckpointWarp(al::IUseSceneObjHolder const*);
setCounterAndDenominator(al::LayoutActor*, int, int);
setCounter(al::LayoutActor*, int);
tryUpdateShineChipLayoutCount(ShineChipLayoutParts*);
getGrafittiColor(GrafittiColor);
getGrafittiColorId(sead::Color4u8 const&);
tryCancelCapMessage(al::IUseSceneObjHolder const*, char const*);
showCapMessage(al::IUseSceneObjHolder const*, char const*, int, int);
showCapMessageDemo(al::IUseSceneObjHolder const*, char const*, int, int);
showCapMessageBossHint(al::IUseSceneObjHolder const*, char const*, int, int);
showCapMessageBossDamage(al::IUseSceneObjHolder const*, char const*, int, int);
showCapMessageMinigame(al::IUseSceneObjHolder const*, char const*, int, int);
showCapMessageJango(al::IUseSceneObjHolder const*, char const*, int, int);
showCapMessageWanderBossBattle(al::IUseSceneObjHolder const*, char const*, int, int);
showCapMessageEnterExStage(al::IUseSceneObjHolder const*, char const*, int, int);
tryShowCapMessagePriorityLow(al::IUseSceneObjHolder const*, char const*, int, int);
tryShowCapMessage(al::IUseSceneObjHolder const*, char const*, int, int);
isActiveCapMessage(al::IUseSceneObjHolder const*);
tryShowCapMessageFromStageMsg(al::IUseSceneObjHolder const*, char const*, char const*, int, int);
tryShowCapMessageFromCurrentStageMsg(al::IUseSceneObjHolder const*, char const*, int, int);
isActiveCapMessageLabel(al::IUseSceneObjHolder const*, char const*);
isDelayCapMessage(al::IUseSceneObjHolder const*);
isDelayCapMessageLabel(al::IUseSceneObjHolder const*, char const*);
showCapMessageGetMoonSpecial(al::IUseSceneObjHolder const*, char const*, int);
requestShowCapMessageGetMoon(al::IUseSceneObjHolder const*);
validateAppearCapMessage(al::IUseSceneObjHolder const*);
invalidateAppearCapMessage(al::IUseSceneObjHolder const*);
endForceCapMessage(al::IUseSceneObjHolder const*);
tryStartCapMessageContinue(al::IUseSceneObjHolder const*, char const*);
endCapMessageContinue(al::IUseSceneObjHolder const*);
createCapMessageEnableChecker(CapMessageEnableChecker**, al::LiveActor*, al::ActorInitInfo const&);
isShowCapMsgGrowFlowerPotLookFirst(al::IUseSceneObjHolder const*);
isShowCapMsgPlayerInIceWaterFirst(al::IUseSceneObjHolder const*);
isShowCapMsgPackunFireChokeCap(al::IUseSceneObjHolder const*);
tryShowCapMsgPlayerInIceWaterFirst(al::IUseSceneObjHolder const*);
tryShowCapMsgPlayerSinkSandFirst(al::IUseSceneObjHolder const*);
tryShowCapMsgPackunFireChokeCap(al::IUseSceneObjHolder const*);
tryShowCapMsgPackunFireRescueCap(al::IUseSceneObjHolder const*);
tryShowCapMsgCatchBombCatchFirst(al::IUseSceneObjHolder const*);
tryShowCapMsgCollectCoinGetFirst(al::IUseSceneObjHolder const*);
tryShowCapMsgCorkNearFirst(al::IUseSceneObjHolder const*);
tryShowCapMsgCorkNearLaunchedFirst(al::IUseSceneObjHolder const*);
tryShowCapMsgCorkNearSecond(al::IUseSceneObjHolder const*);
tryCheckShowCapMsgWorldWarpCloseLookFirst(al::IUseSceneObjHolder const*, CapMessageEnableChecker*);
tryCheckShowCapMsgWorldWarpLook(al::IUseSceneObjHolder const*, CapMessageEnableChecker*);
tryCheckShowCapMsgGrowFlowerPotLookFirst(al::IUseSceneObjHolder const*, CapMessageEnableChecker*);
tryCheckShowCapMsgGrowFlowerPotAfterImplant(al::IUseSceneObjHolder const*, CapMessageEnableChecker*);
tryShowCapMsgWorldWarpOut(al::IUseSceneObjHolder const*);
tryShowCapMsgShineChipGetFirst(al::IUseSceneObjHolder const*);
tryShowCapMsgKakkuHideFirst(al::IUseSceneObjHolder const*);
tryCheckShowCapMsgMoonRockLook(al::IUseSceneObjHolder const*, CapMessageEnableChecker*);
tryCheckShowCapMsgMoonRockLookLongTime(al::IUseSceneObjHolder const*, CapMessageEnableChecker*);
tryCheckShowCapMsgCapCatapultLookFirst(al::IUseSceneObjHolder const*, CapMessageEnableChecker*);
tryShowCapMsgCapCatapultAfterShootFirst(al::IUseSceneObjHolder const*);
tryCheckShowCapMsgGrowFlowerSeedLookFirst(al::IUseSceneObjHolder const*, CapMessageEnableChecker*);
tryShowCapMsgMoonGetSpecial1(al::IUseSceneObjHolder const*);
tryShowCapMsgMoonGetSpecial2(al::IUseSceneObjHolder const*);
tryShowCapMsgIntroducePowerStar(al::IUseSceneObjHolder const*, StageSceneStateGetShine const*);
tryShowCapMsgWarpDisableInMiniGameDokan(al::IUseSceneObjHolder const*);
tryShowCapMsgWarpDisableInMiniGameDoor(al::IUseSceneObjHolder const*);
tryShowCapMsgWarpDisableInMiniGameDoorCap(al::IUseSceneObjHolder const*);
tryShowCapMsgWarpDisableInMiniGameArea(al::IUseSceneObjHolder const*);
onShowCapMsgGrowFlowerPotLookFirst(al::IUseSceneObjHolder const*);
onShowCapMsgWorldWarpEnterAlready(al::IUseSceneObjHolder const*);
tryShowCapMsgWarningBikeOn(al::IUseSceneObjHolder const*);
tryShowCapMsgWarningBikeSideWalkIn(al::IUseSceneObjHolder const*);
tryShowCapMsgWarningBikeReverseRun(al::IUseSceneObjHolder const*);
tryShowCapMsgWarningPrankNpc(al::IUseSceneObjHolder const*);
showCapMsgPlayerFallDead(al::IUseSceneObjHolder const*, int);
showCapMsgPlayerLife1(al::IUseSceneObjHolder const*, int);
isShowCapMsgPlayerFallDead(al::IUseSceneObjHolder const*);
saveCapMsgCapThrow(al::IUseSceneObjHolder const*);
saveCapMsgWorldWarpCloseLookFirst(al::IUseSceneObjHolder const*);
saveCapMsgWorldWarpLookFirst(al::IUseSceneObjHolder const*);
isEnableShowCapMsgCapThrow(al::IUseSceneObjHolder const*);
isShowCapMsgPlayerLife1(al::IUseSceneObjHolder const*);
tryEndBindCapThrowOnChair(IUsePlayerPuppet**);
tryBindJumpOnChair(IUsePlayerPuppet*);
tryBindStandUpOnChair(IUsePlayerPuppet*);
createChangeStageInfo(al::LiveActor const*, al::PlacementInfo const&);
createChangeStageInfo(al::LiveActor const*, al::PlacementInfo const&, char const*, char const*, bool, int, ChangeStageInfo::SubScenarioType);
createChangeStageInfo(al::LiveActor const*, char const*, char const*, bool, int, ChangeStageInfo::SubScenarioType);
registerCheckpointFlagToWatcher(CheckpointFlag*);
setTouchCheckpointFlagToWatcher(CheckpointFlag*);
setTouchAfterCheckpointFlagToWatcher(al::IUseSceneObjHolder const*, char const*);
tryFindCheckpointFlagPlayerRestartInfo(al::IUseSceneObjHolder const*, char const*);
tryFindCheckpointFlag(al::IUseSceneObjHolder const*, char const*);
tryFindCheckpointFlagTrans(sead::Vector3<float>*, al::IUseSceneObjHolder const*, char const*);
requestShowCheckpointFlagNameLayout(CheckpointFlag const*, char16_t const*);
requestShowCheckpointFlagBalloon(CheckpointFlag const*, sead::Vector3<float> const&);
requestHideCheckpointFlagBalloon(CheckpointFlag const*);
requestCancelCheckpointFlagNameLayoutByShineGetDemo(al::Scene const*);
hideCheckpointFlagBalloonAllAtBossSequence(al::LiveActor const*);
showCheckpointFlagBalloonAllAfterBossSequence(al::LiveActor const*);
tryGetEmitterHolder(al::IUseSceneObjHolder const*);
initEchoEmitterHolder(al::LiveActor const*);
emitEcho(al::LiveActor const*, sead::Vector3<float> const&, float, int);
emitKeepEcho(al::LiveActor const*, sead::Vector3<float> const&, float, int);
registerElectricWireCameraTicketToHolder(al::IUseSceneObjHolder const*, al::CameraTicket*);
endElectricWireCameraAll(al::LiveActor const*);
registerGrowPlantPlace(GrowPlantGrowPlace*, float);
registerRouteGuidePointForPlace(GrowPlantGrowPlace*);
registerGrowPlantSeed(GrowPlantSeed*);
isPlantEnd(al::PlacementId const&, al::IUseSceneObjHolder const*);
isPlantEndAll(al::IUseSceneObjHolder const*);
updateRouteGuideGrowPlant(al::IUseSceneObjHolder const*);
createAndRegistKoopaShipDemoRequester(KoopaShip*);
tryStartKoopaShipDemoHomeFlyAway(ShineTowerRocket*);
isEnableStartWipeKoopaShipDemoHomeFlyAway(ShineTowerRocket const*);
isEnableEndKoopaShipDemoHomeFlyAway(ShineTowerRocket const*);
endKoopaShipDemoHomeFlyAway(ShineTowerRocket*);
getKoopaShipWipeDemoHomeFlyAwayStep();
registerPaintObjToHolder(PaintObj*);
registerLinkedPlayerStartInfoToHolder(al::IUseSceneObjHolder const*, al::ActorInitInfo const&, al::PlacementInfo const&, char const*, sead::Vector3<float> const*, sead::Quat<float> const*);
registerLinkedPlayerStartInfoToHolder(al::IUseSceneObjHolder const*, al::ActorInitInfo const&, char const*, sead::Vector3<float> const*, sead::Quat<float> const*);
registerPlayerStartInfoToHolder(al::IUseSceneObjHolder const*, al::PlacementInfo const&, char const*, PlayerStartObj*, sead::Vector3<float> const*, sead::Quat<float> const*);
registerPlayerStartInfoToHolder(al::IUseSceneObjHolder const*, al::ActorInitInfo const&, char const*, PlayerStartObj*, sead::Vector3<float> const*, sead::Quat<float> const*);
registerPlayerStartInfoToHolderWithCamera(al::CameraTicket*, al::IUseSceneObjHolder const*, al::ActorInitInfo const&, char const*, PlayerStartObj*, sead::Vector3<float> const*, sead::Quat<float> const*);
registerPlayerStartInfoToHolderForTimeBalloon(al::IUseSceneObjHolder const*, al::ActorInitInfo const&);
registerPlayerStartInfoToHolderForCloset(al::IUseSceneObjHolder const*, al::ActorInitInfo const&, sead::Vector3<float> const&, sead::Quat<float> const&);
tryStartEntranceCamera(al::Scene const*, char const*);
isPlayerStartCloset(al::LiveActor const*);
tryGetRaceCheckPoint(al::IUseSceneObjHolder const*);
isExistRadiConRaceWatcher(al::IUseSceneObjHolder const*);
getRadiConRaceWatcher(al::IUseSceneObjHolder const*);
tryRegisterRadiConNpcToRadiConRaceWatcher(RadiconNpc*);
getInstance(al::IUseSceneObjHolder*);
registerRhyhtmInfoListener(al::IUseSceneObjHolder*);
getCurrentBeat(al::IUseSceneObjHolder*);
getBeatDelta(al::IUseSceneObjHolder*);
isLooping(al::IUseSceneObjHolder*);
offRouteGuideByActor(al::LiveActor*);
onRouteGuideByActor(al::LiveActor*);
offRouteGuideSystem(al::IUseSceneObjHolder const*);
onRouteGuideSystem(al::IUseSceneObjHolder const*);
createRouteGuideDirector(al::IUseSceneObjHolder const*);
addRouteGuidePointBufferCount(al::IUseSceneObjHolder const*, int);
registerRouteGuidePoint(al::IUseSceneObjHolder const*, RouteGuidePoint*);
addRouteGuideArrowBufferCount(al::IUseSceneObjHolder const*, int);
registerRouteGuideArrow(al::IUseSceneObjHolder const*, RouteGuideArrowBase*);
setupHomeMeter(al::LiveActor*);
setupHomeMeterDitherParam(al::LiveActor*, ShineTowerCommonKeeper*);
setupHomeSticker(al::LiveActor*);
setupHomeCompLight(al::LiveActor*);
getHomeArchiveName(al::LiveActor const*);
getColor(TalkMessageInfoParam const*);
createStageTimeDirector(al::IUseSceneObjHolder const*);
setStageTime(al::IUseSceneObjHolder const*, int, int, unsigned int);
addStageTime(al::IUseSceneObjHolder const*, int, int, unsigned int);
isStageTimeDaytime(al::IUseSceneObjHolder const*);
isStageTimeNighttime(al::IUseSceneObjHolder const*);
isTimeHandled(al::LiveActor const*);
getTimeHandleRotateSpeedDegree(al::LiveActor const*);
tryGetTouchActionMoveVec(sead::Vector2<float>*, al::LiveActor const*);
tryGetTouchActionSlideDir(sead::Vector2<float>*, al::LiveActor const*);
tryCreateFriendsProfileDownloader(al::IUseSceneObjHolder const*);
tryGetFriendsProfileDownloader(al::IUseSceneObjHolder const*);
requestDownloadFriendsProfile(void*, al::IUseSceneObjHolder const*, unsigned long, nn::friends::ImageSize);
requestDownloadFriendsProfile(void*, al::FriendsProfileDownloader*, unsigned long, nn::friends::ImageSize);
isDoneDownloadFriendsProfile(al::IUseSceneObjHolder const*);
isDoneDownloadFriendsProfile(al::FriendsProfileDownloader const*);
getFriendsProfileNickname(al::IUseSceneObjHolder const*);
getFriendsProfileNickname(al::FriendsProfileDownloader const*);
getFriendsProfileImageDataSize(nn::friends::ImageSize);
restorePrincipalId(unsigned long*, nn::nex::qBuffer const*);
startUploadTimeBalloonNoticeData(al::IUseDataStore*, TimeBalloon::NoticeDataServer const&);
tryEndUploadTimeBalloonNoticeData(bool*, unsigned long*, al::IUseDataStore const*);
tryStartAddTimeBalloonHistory(al::IUseDataStore*, unsigned long, unsigned int, unsigned long);
tryStartAddTimeBalloonHistoryList(al::IUseDataStore*, nn::nex::qVector<nn::nex::BufferQueueParam> const&, nn::nex::qVector<nn::nex::qBuffer> const&);
tryEndAddTimeBalloonHistory(bool*, al::IUseDataStore*);
tryStartGetTimeBalloonHistory(al::IUseDataStore*, nn::nex::qVector<nn::nex::qBuffer>*, unsigned long, unsigned int);
tryStartGetTimeBalloonHistoryList(al::IUseDataStore*, nn::nex::qVector<nn::nex::BufferQueueParam> const&, nn::nex::qVector<nn::nex::qVector<nn::nex::qBuffer> >*);
tryEndGetTimeBalloonHistory(bool*, al::IUseDataStore const*);
startUploadTimeBalloonBalloonData(al::IUseDataStore*, TimeBalloon::BalloonDataServer const&, nn::nex::qMap<signed char, nn::nex::DataStoreRatingInitParam>*);
tryEndUploadTimeBalloonBalloonData(bool*, unsigned long*, al::IUseDataStore const*);
tryStartUploadBalloonFindBalloonData(al::IUseDataStore*, unsigned short, void const*, int, nn::nex::qMap<signed char, nn::nex::DataStoreRatingInitParam> const*);
tryStartUpdateRatingPlayedBalloon(al::IUseDataStore*, unsigned long, unsigned long, bool);
tryStartUpdateRatingBrokeBalloon(al::IUseDataStore*, unsigned long, unsigned long, unsigned long, int, int);
tryEndUpdateRating(bool*, al::IUseDataStore*);
tryCreateNexRankingUploader(al::IUseSceneObjHolder const*, al::ActorInitInfo const&, char const*);
tryUploadRankingScoreJumpingRope(NexRankingUploader*, unsigned int);
tryUploadRankingScoreVolleyball(NexRankingUploader*, unsigned int);
tryUploadRankingScoreRaceType(NexRankingUploader*, unsigned int, RankingCategory);
isRankingOpened(RankingCategory, al::Scene const*);
isRankingOpened(RankingCategory, al::LiveActor const*);
isNeedUploadScore(RankingCategory, al::IUseSceneObjHolder const*);
saveUploadFlag(RankingCategory, al::IUseSceneObjHolder const*);
forceOnNeedUploadAllCategories(al::Scene const*);
validateGlideBirdOnPlayerNose(al::LiveActor const*);
invalidateGlideBirdOnPlayerNose(al::LiveActor const*);
validateGlideBirdOnSitDownPlayerHead(al::LiveActor const*);
invalidateGlideBirdOnSitDownPlayerHead(al::LiveActor const*);
isPlayerSitDownChair(Bird const*);
initCapWorldNpcTailJointController(al::LiveActor*);
initPeachOnKoopaAnimRequester(al::IUseSceneObjHolder const*);
requestStartPeachOnKoopaAnimSuccess(al::IUseSceneObjHolder const*);
requestStartPeachOnKoopaHitReaction2DIn(al::IUseSceneObjHolder const*);
requestStartPeachOnKoopaHitReaction2DOut(al::IUseSceneObjHolder const*);
requestStartPeachOnKoopaHitReactionBreakPillarBridge(al::IUseSceneObjHolder const*);
requestStartPeachOnKoopaHitReactionCrackGateHard(al::IUseSceneObjHolder const*);
requestStartPeachOnKoopaHitReactionBreakGateHard(al::IUseSceneObjHolder const*);
requestStartPeachOnKoopaHitReactionBreakPillar(al::IUseSceneObjHolder const*);
requestStartPeachOnKoopaHitReactionBreakGateFinal(al::IUseSceneObjHolder const*);
createRankingNameHolder(al::IUseSceneObjHolder const*);
tryGetRankingNameHolder(al::IUseSceneObjHolder const*);
tryCreateSphinxQuizRouteKillExecutor(SphinxQuiz*);
sendMsgSphinxQuizRouteKill(al::HitSensor*, al::AreaObjGroup const*);
tryRegisterSphinxQuizRouteKillSensorAfterPlacement(al::HitSensor*);
registerTrafficRailWatcher(al::LiveActor const*, al::ActorInitInfo const&);
stopTrafficRailByTraffic(al::LiveActor const*);
restartTrafficRailByTraffic(al::LiveActor const*);
tryStopTrafficRailByOtherNpc(al::LiveActor const*);
tryRestartTrafficRailByOtherNpc(al::LiveActor const*);
calcGuidePos(sead::Vector3<float>*, al::LiveActor const*);
setRouteHeadGuidePosPtr(al::IUseSceneObjHolder const*, sead::Vector3<float> const*);
resetRouteHeadGuidePosPtr(al::IUseSceneObjHolder const*);
isExistRequestShowHtmlViewer(al::IUseSceneObjHolder const*);
clearRequestHtmlViewerRequester(al::IUseSceneObjHolder const*);
requestShowHtmlViewer(al::IUseSceneObjHolder const*);
getQuestInfoHolder(al::IUseSceneObjHolder const*);
tryCreateAndRegisterQuestInfoToHolder(al::LiveActor const*, al::ActorInitInfo const&);
createAndRegisterQuestInfoToHolderFromLinkedObj(al::LiveActor const*, al::PlacementInfo const&, bool);
invalidateQuest(QuestInfo const*);
tryCreateAndRegisterQuestInfoToHolderFromLinkedObj(al::LiveActor const*, al::ActorInitInfo const&);
validateQuest(QuestInfo const*);
getActiveQuestList(al::IUseSceneObjHolder const*);
getActiveQuestNum(al::IUseSceneObjHolder const*);
getActiveQuestNumForMap(al::IUseSceneObjHolder const*);
isActiveQuestAllEqualNo(al::IUseSceneObjHolder const*);
getActiveQuestLabel(al::IUseSceneObjHolder const*);
getActiveQuestStageName(al::IUseSceneObjHolder const*);
isActiveQuest(QuestInfo const*);
isActiveQuest(sead::PtrArray<QuestInfo> const*);
getActiveQuestNo(al::IUseSceneObjHolder const*);
notifySceneEvent(al::IUseSceneObjHolder const*, char const*);
listenSceneEvent(al::IUseSceneObjHolder const*, char const*, SceneEventListener*);
listenSnapShotModeOnOff(al::IUseSceneObjHolder const*, al::FunctorBase const&, al::FunctorBase const&);
tryStartRaceStage(al::Scene*, GameDataHolder*);
updateNormalState(al::Scene*);
updateEffectSystemEnv(al::Scene*);
updateNormalStateExcludeGraphics(al::Scene*);
updateBirdCarryMeat(al::Scene*);
updateKitListExcludePlayer(al::Scene*);
updateKitListExcludeCamera(al::Scene*);
updateKitListExcludeCameraDemoChangeWorld(al::Scene*);
updateKitListPlayerGroupNormal(al::Scene*);
updateKitListDemoPlayerNoPauseEffect(al::Scene*);
updateKitListDemoPlayerWithPauseEffect(al::Scene*);
updateKitListDemoPlayerWithPauseEffectAndCalcAtEndClip(al::Scene*);
updateKitListDemoNormalNoPauseEffect(al::Scene*);
updateKitListDemoNormalWithPauseEffect(al::Scene*);
updateKitListDemoCapWorldOpeninglWithPauseEffect(al::Scene*);
updateKitListLayout(al::Scene*);
updateKitListPostNoViewRenderer(al::Scene*);
updateKitListLayoutIgnorePause(al::Scene*);
updateKitListLayoutOnlyLayoutScene(al::Scene*);
updateKitListPostWithPauseNormalEffectAndPlayerEffect(al::Scene*);
updateKitListPostSnapShot(al::Scene*);
setScenarioName(al::LayoutActor*, al::Scene const*);
startTalkMsgTimeBalloonLayout(al::Scene const*);
endPlayTalkMsgTimeBalloonLayout(al::Scene const*);
endForceTalkMsgTimeBalloonLayout(al::Scene const*);
changeDemoCommonProc(al::Scene*, ProjectItemDirector*);
endDemoCommonProc(al::Scene*, ProjectItemDirector*);
endDemoNormalShineGet(al::Scene*, ProjectItemDirector*);
tryOpenMap(al::IUseNerve*, al::Scene const*, MapLayout const*, al::Nerve const*);
tryChangeNextStage(GameDataHolder*, al::Scene*);
getPlayerActor(al::Scene const*);
registerGraphicsPreset(al::Scene const*, char const*, char const*, char const*, bool);
requestGraphicsPreset(al::Scene const*, char const*, sead::Vector3<float> const&);
requestGraphicsCubeMap(al::Scene const*, char const*, char const*);
requestGraphicsPresetAndCubeMap(al::Scene const*, char const*, char const*, char const*);
requestGraphicsPresetAndCubeMap(al::Scene const*, char const*, char const*, char const*, sead::Vector3<float> const&);
requestGraphicsPresetAndCubeMapFixedAngle(al::Scene const*, char const*, char const*, char const*);
registerGraphicsPresetWorldMap(al::Scene const*);
registerGraphicsPresetShop(al::Scene const*);
registerGraphicsPresetMoonGet(al::Scene const*);
registerGraphicsPresetCloset(al::Scene const*);
registerGraphicsPresetPause(al::Scene const*);
requestGraphicsPresetAndCubeMapWorldMap(al::Scene const*);
requestGraphicsPresetAndCubeMapShop(al::Scene const*);
requestGraphicsPresetAndCubeMapShopNoFixedAngle(al::Scene const*);
requestGraphicsPresetAndCubeMapMoonGet(al::Scene const*);
requestGraphicsPresetAndCubeMapMoonGetNoFixedAngle(al::Scene const*);
requestGraphicsPresetAndCubeMapCloset(al::Scene const*);
requestGraphicsPresetAndCubeMapClosetNoFixedAngle(al::Scene const*);
requestGraphicsPresetAndCubeMapPause(al::Scene const*);
requestGraphicsPresetAndCubeMapPauseNoFixedAngle(al::Scene const*);
calcQuatPoseCheckpointWarpCap(sead::Quat<float>*, sead::Vector3<float> const&, al::IUseCamera const*);
getDemoDirector(al::Scene const*);
getDemoShineActor(al::Scene const*);
isExistDemoShine(al::Scene const*);
disableOpenWipeForSkipDemo(al::IUseSceneObjHolder const*);
isDisableOpenWipeForSkipDemo(al::IUseSceneObjHolder const*);
requestWipeClose(al::IUseSceneObjHolder const*, char const*);
getRequestWipeCloseInfoName(al::IUseSceneObjHolder const*);
requestWipeOpenImmidiate(al::IUseSceneObjHolder const*);
tryReceiveRequestWipeOpenImmidiate(al::IUseSceneObjHolder const*);
setSceneStatusBossBattle(al::LiveActor const*);
setSceneStatusBossBattleEnd(al::LiveActor const*);
setSceneStatusBossBattleEndForPlayerAnim(al::LiveActor const*);
isSceneStatusBossBattle(GameDataHolderAccessor);
isSceneStatusBossBattleForPlayerAnim(al::LiveActor const*);
isSceneStatusInvalidSave(GameDataHolderAccessor);
setSceneStatusInvalidSave(GameDataHolderAccessor);
isInvalidSaveStage(char const*);
isWipeOpenEnd(al::LiveActor const*);
endWipeOpen(GameDataHolder const*);
startWipeOpen(GameDataHolder const*);
isShopStatusBuyItem(al::LiveActor const*);
isShopStatusBuyShine(al::LiveActor const*);
isShopStatusBuyShineMany(al::LiveActor const*);
isShopStatusBuyMaxLifeUpItem(al::LiveActor const*);
setShopStatusBuyShine(al::LiveActor const*);
setShopStatusBuyShineMany(al::LiveActor const*);
setShopStatusBuyMaxLifeUpItem(al::LiveActor const*);
setShopStatusNone(al::LiveActor const*);
getGameConfigData(al::LayoutActor const*);
saveGameConfigData(al::LayoutActor const*);
applyGameConfigData(al::Scene*, GameConfigData const*);
isUseOpenListAdditionalButton(al::IUseSceneObjHolder const*);
createSaveObjInfoWriteSaveData(al::ActorInitInfo const&);
createSaveObjInfoWriteSaveData(al::ActorInitInfo const&, al::PlacementInfo const&);
createSaveObjInfoNoWriteSaveDataInSameWorld(al::ActorInitInfo const&);
createSaveObjInfoNoWriteSaveDataInSameWorld(al::ActorInitInfo const&, al::PlacementInfo const&);
createSaveObjInfoNoWriteSaveDataInSameWorldResetMiniGame(al::ActorInitInfo const&);
createSaveObjInfoNoWriteSaveDataInSameWorldResetMiniGame(al::ActorInitInfo const&, al::PlacementInfo const&);
createSaveObjInfoNoWriteSaveDataInSameScenario(al::ActorInitInfo const&);
createSaveObjInfoNoWriteSaveDataInSameScenario(al::ActorInitInfo const&, al::PlacementInfo const&);
createSaveObjInfoWriteSaveData(al::ActorInitInfo const&, al::PlacementId const*);
createSaveObjInfoNoWriteSaveDataInSameWorld(al::ActorInitInfo const&, al::PlacementId const*);
createSaveObjInfoNoWriteSaveDataInSameWorldResetMiniGame(al::ActorInitInfo const&, al::PlacementId const*);
createSaveObjInfoNoWriteSaveDataInSameScenario(al::ActorInitInfo const&, al::PlacementId const*);
onSaveObjInfo(SaveObjInfo*);
offSaveObjInfo(SaveObjInfo*);
isOnSaveObjInfo(SaveObjInfo const*);
setGrowFlowerTime(al::LiveActor const*, al::PlacementId const*, al::PlacementId const*, unsigned long);
setGrowFlowerTime(al::LiveActor const*, al::PlacementId const*, unsigned long);
getGrowFlowerTime(al::LiveActor const*, al::PlacementId const*);
isUsedGrowFlowerSeed(al::LiveActor const*, al::PlacementId const*);
addGrowFlowerGrowLevel(al::LiveActor const*, al::PlacementId const*, unsigned int);
getGrowFlowerGrowLevel(al::LiveActor const*, al::PlacementId const*);
findGrowFlowerPotIdFromSeedId(al::LiveActor const*, al::PlacementId const*);
isPlayFirstTimeBalloon(al::LiveActor const*);
playTimeBalloonFirst(al::LiveActor const*);
onShortExplainGet(al::LiveActor const*);
onShortExplainSet(al::LiveActor const*);
isShortExplainGet(al::LiveActor const*);
isShortExplainSet(al::LiveActor const*);
onReactedLuigiCostume(al::LiveActor const*);
isReactedLuigiCostume(al::LiveActor const*);
getPlayerRank(al::LiveActor const*);
getPlayerRank(GameDataHolderAccessor);
setPlayerRank(al::LiveActor const*, int);
setPlayerRank(GameDataHolderAccessor, int);
getPrincipalId(al::LiveActor const*);
setPrincipalId(al::LiveActor const*, unsigned long);
isAnswerCorrectSphinxQuiz(GameDataHolderAccessor, char const*);
answerCorrectSphinxQuiz(al::LiveActor const*);
isAnswerCorrectSphinxQuizAll(GameDataHolderAccessor, char const*);
answerCorrectSphinxQuizAll(al::LiveActor const*);
isTalkAlreadyLocalLanguage(NpcEventDirector const*);
talkLocalLanguage(al::LiveActor const*);
getLocalLanguageName(al::LiveActor const*);
getLocalLanguageName(NpcEventDirector const*);
isOnFlagKinopioBrigadeNpcFirstTalk(al::LiveActor const*);
onFlagKinopioBrigadeNpcFirstTalk(al::LiveActor const*);
isOnFlagHintNpcFirstTalk(al::LiveActor const*);
onFlagHintNpcFirstTalk(al::LiveActor const*);
playScenarioStartCamera(al::LiveActor const*, QuestInfo const*);
playScenarioStartCamera(al::LiveActor const*, int);
setExistKoopaShip(KoopaShip const*);
resetExistKoopaShip(KoopaShip const*);
isExistKoopaShip(ShineTowerRocket const*);
isExistKoopaShipInSky(ShineTowerRocket const*);
tryUnlockShineName(al::LiveActor const*, int);
calcShineIndexTableNameAvailable(int*, int*, al::LiveActor const*);
calcShineIndexTableNameUnlockable(int*, int*, al::LiveActor const*);
calcWorldIdByWorldWarpHole(WorldWarpHole const*, char const*);
checkIsOpenWorldWarpHoleCurrentScenario(WorldWarpHole const*);
isKidsMode(al::LiveActor const*);
isKidsMode(al::LayoutActor const*);
isKidsMode(al::Scene const*);
isKidsMode(al::IUseSceneObjHolder const*);
isKidsMode(GameDataHolder const*);
isEnableCapMessageLifeOneKidsMode(al::LiveActor const*);
disableCapMessageLifeOneKidsMode(al::LiveActor const*);
isInvalidChangeStage(al::LiveActor const*);
isSequenceTimeBalloonOrRace(al::LiveActor const*);
isSequenceTimeBalloonOrRace(GameDataHolder const*);
isTreasureBoxDeadStage(al::LiveActor const*);
findRaceRecord(bool*, bool*, int*, int*, int*, al::LiveActor const*, char const*);
findRaceRecord(bool*, bool*, int*, int*, int*, al::Scene const*, char const*);
findRaceRecordRaceManRace(bool*, bool*, int*, int*, int*, al::Scene const*);
findRaceRecordRaceManRace(bool*, bool*, int*, int*, int*, al::LiveActor const*);
findRaceRecordRaceManRaceWithWorldId(bool*, bool*, int*, int*, int*, al::Scene const*, int);
findRaceRecordRaceManRaceWithWorldId(bool*, bool*, int*, int*, int*, al::LiveActor const*, int);
findRaceRecordRadicon(bool*, bool*, int*, int*, int*, al::Scene const*);
findRaceRecordRadicon(bool*, bool*, int*, int*, int*, al::LiveActor const*);
findRaceRecordYukimaru(bool*, bool*, int*, int*, int*, al::Scene const*, int);
findRaceRecordYukimaru(bool*, bool*, int*, int*, int*, al::LiveActor const*, int);
writeRaceRecord(al::LiveActor const*, char const*, int, int, int);
writeRaceRecord(al::Scene const*, char const*, int, int, int);
getJumpingRopeBestCount(al::LiveActor const*);
getJumpingRopeBestCount(al::Scene const*);
setJumpingRopeBestCount(al::LiveActor const*, int);
setJumpingRopeBestCount(al::Scene const*, int);
getJumpingRopeDayCount(al::LiveActor const*);
setJumpingRopeDayCount(al::LiveActor const*, int);
setJumpingRopeUpdateScoreFlag(al::LiveActor const*);
isExistRecordJumpingRope(al::LiveActor const*);
isExistRecordJumpingRope(al::Scene const*);
isExistRecordInDayJumpingRope(al::LayoutActor const*);
getVolleyballBestCount(al::LiveActor const*);
getVolleyballBestCount(al::Scene const*);
setVolleyballBestCount(al::LiveActor const*, int);
setVolleyballBestCount(al::Scene const*, int);
getVolleyballDayCount(al::LiveActor const*);
setVolleyballDayCount(al::LiveActor const*, int);
setVolleyballUpdateScoreFlag(al::LiveActor const*);
isExistRecordVolleyball(al::LiveActor const*);
isExistRecordVolleyball(al::Scene const*);
isExistRecordInDayVolleyball(al::LayoutActor const*);
writeRaceRecordRaceManRace(al::LiveActor const*, int);
isTalkFirstAmiiboNpc(al::LiveActor const*);
offFlagTalkFirstAmiiboNpc(al::LiveActor const*);
checkGetShineForWorldTravelingPeach(GameDataHolderAccessor, char const*);
checkEnableAppearMoonWorldTravelingPeach(al::LiveActor const*);
isStartWorldTravelingPeach(al::LiveActor const*);
startWorldTravelingPeach(al::LiveActor const*);
checkGetEnoughShine(al::LiveActor const*, int);
checkGetEnoughShineInCurrentWorld(al::LiveActor const*);
setFlagOnStartKoopaCapture(al::LiveActor const*);
isStartKoopaCapture(al::LiveActor const*);
isAlreadyTalkPrevWorldInWorldWarp(al::LiveActor const*, int);
isAlreadyTalkNextWorldInWorldWarp(al::LiveActor const*, int);
setAlreadyTalkPrevWorldInWorldWarp(al::LiveActor const*, int);
setAlreadyTalkNextWorldInWorldWarp(al::LiveActor const*, int);
checkNeedTalkPrevWorld(al::LiveActor const*);
getTipsIdInWorldWarp(al::LiveActor const*);
addTipsIdInWorldWarp(al::LiveActor const*);
setTalkSpecialInWorldWarp(al::LiveActor const*, bool, bool);
isTalkFindKoopaInWorldWarp(al::LiveActor const*);
isTalkBossRaidInWorldWarp(al::LiveActor const*);
isClearMainScenario(al::LiveActor const*, int);
checkAlreadyVisitStage(GameDataHolder const*, char const*);
visitStage(GameDataHolder const*, char const*);
isSequenceGoToNextWorld(al::IUseSceneObjHolder const*);
isSequenceCollectShineBeforeGameClear(al::IUseSceneObjHolder const*);
isSequenceCollectShineForRepairHome(al::IUseSceneObjHolder const*);
isSequenceCollectShine(al::IUseSceneObjHolder const*);
isSequenceGoToMoonRock(al::IUseSceneObjHolder const*);
isEnableExplainShopCoin(al::LiveActor const*);
explainShopCoin(al::LiveActor const*);
checkShowNewItemAndPrepareSave(al::LiveActor const*);
isInNormalCoinShopFirst(al::LiveActor const*);
offInNormalCoinShopFirst(al::LiveActor const*);
checkExistNewShopItem(al::LiveActor const*, int, int, bool);
getCapMessageBossData(al::LiveActor const*);
getYoshiFruit(SaveObjInfo*);
isGetYoshiFruit(SaveObjInfo const*);
isTalkKakku(al::LiveActor const*);
talkKakku(al::LiveActor const*);
isTalkWorldTravelingPeach(al::LiveActor const*);
talkWorldTravelingPeach(al::LiveActor const*);
isTalkCollectBgmNpc(al::LiveActor const*);
talkCollectBgmNpc(al::LiveActor const*);
getTokimekiMayorNpcFavorabilityRating(al::LiveActor const*);
setTokimekiMayorNpcFavorabilityRating(al::LiveActor const*, int);
tryFindCoinStackSave(int*, al::LiveActor const*, al::PlacementId const*);
saveCoinStack(al::LiveActor const*, al::PlacementId const*, int);
isCollectedBgmCityWorldCelemony(al::LiveActor const*);
isCollectedBgmCityWorldCelemony2D(al::LiveActor const*);
calcGetShineNumCollectedBgm(GameDataHolderAccessor);
checkGetShineCollectedBgmAll(al::LiveActor const*);
checkSavedHintPhoto(al::LiveActor const*, char const*);
saveHintPhoto(al::LiveActor const*, char const*);
isRideSphinx(GameDataHolderAccessor);
rideSphinx(al::LiveActor const*);
isRideMotorcycle(GameDataHolderAccessor);
rideMotorcycle(al::LiveActor const*);
setShowInformationPoleGrab(al::IUseSceneObjHolder const*);
isNeedShowInformationPoleGrab(al::IUseSceneObjHolder const*);
setShowInformationPoleClimb(al::IUseSceneObjHolder const*);
isNeedShowInformationPoleClimb(al::IUseSceneObjHolder const*);
setShowInformationPoleClimbTop(al::IUseSceneObjHolder const*);
isNeedShowInformationPoleClimbTop(al::IUseSceneObjHolder const*);
isNeedConfirmNetworkFirst(al::IUseSceneObjHolder const*);
saveConfirmNetworkFirst(al::IUseSceneObjHolder const*);
findMapData(al::IUseSceneObjHolder*, int);
getAchievementName(al::IUseMessageSystem const*, char const*);
getAchievementName(al::LayoutActor const*, int);
getAchievementHint(al::IUseMessageSystem const*, char const*);
getAchievementHint(al::LayoutActor const*, int);
getAchievementHolder(al::LayoutActor const*);
unlockAchievementShineName(GameDataHolderAccessor);
isUnlockAchievementShineName(GameDataHolderAccessor);
checkGetAchievement(GameDataHolderAccessor, char const*);
checkGetAchievement(al::LayoutActor const*, int);
findAchievementGetTime(al::LayoutActor const*, int);
findAchievementGetTime(al::LayoutActor const*, char const*);
findAchievementTrans(al::LayoutActor const*, int);
getAchievementNum(al::LayoutActor const*);
calcReceivedAchievementNum(GameDataHolder const*);
getTotalCoinNum(GameDataHolder const*);
calcWorldWarpHoleThroughNum(GameDataHolder const*);
getWorldWarpHoleThroughNumMax(GameDataHolder const*);
calcGetCheckpointNum(GameDataHolder const*);
calcBuyItemNumForCoinCollectByWorld(GameDataHolder const*);
calcClearWorldNum(GameDataHolder const*);
addPlayerJumpCount(al::LiveActor const*);
getPlayerJumpCount(GameDataHolder const*);
addPlayerThrowCapCount(al::LiveActor const*);
getPlayerThrowCapCount(GameDataHolder const*);
checkGetCoinCollectAllInWorld(al::LiveActor const*, int);
checkGetCoinCollectHalfInWorld(AchievementNpc const*, int);
checkGetShineAllInWorld(AchievementNpc const*, int);
checkGetClothAndCapNum(AchievementNpc const*, int);
checkUnlockMoonRockAllWorld(GameDataHolderAccessor);
calcUnlockMoonRockNum(GameDataHolderAccessor);
calcHackObjNum(GameDataHolderAccessor);
calcSphinxQuizCompleteNum(GameDataHolderAccessor);
calcGetShineNumDot(GameDataHolder const*);
calcGetShineNumTreasureBox(GameDataHolder const*);
calcGetShineNumNoteObj(GameDataHolder const*);
calcGetShineNumTimerAthletic(GameDataHolder const*);
calcGetShineNumKinopioBrigade(GameDataHolder const*);
calcGetShineNumWorldTravelingPeach(GameDataHolder const*);
calcGetShineNumCollectAnimal(GameDataHolder const*);
calcAllShineNumCollectAnimal(GameDataHolder const*);
calcGetShineNumKuriboGirl(GameDataHolder const*);
calcGetShineNumJugemFish(GameDataHolder const*);
calcGetShineNumGrowPlant(GameDataHolder const*);
calcGetShineNumRabbit(GameDataHolder const*);
calcGetShineNumDigPoint(GameDataHolder const*);
calcGetShineNumCapHanger(GameDataHolder const*);
calcGetShineNumBird(GameDataHolder const*);
calcGetShineNumCostumeRoom(GameDataHolder const*);
calcGetShineNumSlot(GameDataHolder const*);
calcGetShineNumRace(GameDataHolder const*);
calcGetShineNumFigureWalking(GameDataHolder const*);
calcGetShineNumHideAndSeekCapMan(GameDataHolder const*);
calcAllShineNumHideAndSeekCapMan(GameDataHolder const*);
calcGetShineNumCollectBgmNpc(GameDataHolder const*);
calcAllShineNumCollectBgmNpc(GameDataHolder const*);
calcGetShineNumHintPhoto(GameDataHolder const*);
createDimensionKeeper(al::LiveActor const*);
updateDimensionKeeper(ActorDimensionKeeper*);
getSpecialPurposeName2DOnly();
createAndSetFilter2DOnly(al::LiveActor*);
createCollisionPartsFilter2DOnly();
is2D(IUseDimension const*);
isIn2DArea(IUseDimension const*);
is3D(IUseDimension const*);
isChange2D(IUseDimension const*);
isChange3D(IUseDimension const*);
isNearSnapSurface(IUseDimension const*, float);
calcLockDirection(sead::Vector3<float>*, IUseDimension const*);
calcDimensionGravity(sead::Vector3<float>*, IUseDimension const*, sead::Vector3<float> const&);
setDimensionGravity(al::LiveActor*, IUseDimension const*);
syncDimensionPoseGravity(al::LiveActor*, IUseDimension const*);
calcLockedMoveVec(sead::Vector3<float>*, IUseDimension const*, float);
pushOutFrom2DArea(al::LiveActor*, IUseDimension const*, float, float);
snap2D(al::LiveActor*, IUseDimension const*, float);
snap2DGravity(al::LiveActor*, IUseDimension const*, float);
snap2DUp(al::LiveActor*, IUseDimension const*, float);
snap2DParallelizeFront(al::LiveActor*, IUseDimension const*, float);
snap2DGravityPoseWithRotateCenter(al::LiveActor*, IUsePlayerCollision*, IUseDimension const*, float, float, sead::Vector3<float> const&);
calcSnap2DPosition(sead::Vector3<float>*, IUseDimension const*, sead::Vector3<float> const&, float);
attachMtxConnectorTo2DCollision(al::MtxConnector*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
attachMtxConnectorTo2DCollision(al::MtxConnector*, al::LiveActor const*, bool);
attachMtxConnectorTo2DCollision(al::MtxConnector*, al::LiveActor const*, float, float);
syncVisAnimFrame2D(al::LiveActor*, char const*, bool);
calcSearchAmiiboBit(int*, int*, int*, int);
createCharacterIdS32(al::NfpCharacterId const&);
isEnableUseStageSceneAmiibo(al::NfpInfo const&);
isExistAmiiboMstxtData(al::IUseMessageSystem const*, al::NfpInfo const&);
getAmiiboMstxtLabel(bool*, al::IUseMessageSystem const*, int, int, int);
tryFindAmiiboCostumeItemInfo(ShopItem::ItemInfo**, ShopItem::ItemInfo**, al::NfpCharacterId const&, int, al::IUseSceneObjHolder*);
resetHelpAmiibo(al::IUseSceneObjHolder const*);
getSearchAmiiboData(al::IUseSceneObjHolder const*);
appearCoinCollectHintEffect(al::IUseSceneObjHolder const*);
killCoinCollectHintEffect(al::IUseSceneObjHolder const*);
tryFind2DAreaObj(al::IUseAreaObj const*, sead::Vector3<float> const&);
tryFind2DAreaObj(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float>*);
calc2DAreaLockDir(sead::Vector3<float>*, al::AreaObj const*, sead::Vector3<float> const&);
get2DAreaPos(sead::Vector3<float>*, al::AreaObj const*);
isIn2DArea(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float>*);
isInChangeStageArea(al::LiveActor const*, sead::Vector3<float> const*);
isInWarpArea(al::LiveActor const*);
isInLowGravityArea(al::LiveActor const*);
isInItemVanishArea(al::LiveActor const*);
tryFindStageMapAreaAndGetPlayerPoint(sead::Vector3<float>*, al::IUseAreaObj const*, sead::Vector3<float> const&);
calcFindWaterAreaSurfaceNoWaveByArrow(al::LiveActor const*, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
isPushOut2DAreaOpposite(al::AreaObj const*);
isFaceTo2DAreaPushOutDir(al::AreaObj const*);
calc2DAreaFreeDir(sead::Vector3<float>*, al::AreaObj const*, sead::Vector3<float> const&);
calc2DAreaGravity(sead::Vector3<float>*, al::AreaObj const*, sead::Vector3<float> const&);
calc2DAreaSnapPower(sead::Vector3<float>*, float*, al::AreaObj const*, sead::Vector3<float> const&);
calc2DAreaDistanceGravity(sead::Vector3<float>*, al::AreaObj const*, sead::Vector3<float> const&);
get2DAreaSurfaceDistance(al::AreaObj const*);
calc2DAreaSnapPowerSurfaceDistance(sead::Vector3<float>*, float*, al::AreaObj const*, sead::Vector3<float> const&, float);
calcExtForceAreaVelocity(sead::Vector3<float>*, al::IUseAreaObj const*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
tryFindRecoveryTargetPosArea(bool*, sead::Vector3<float>*, sead::Vector3<float>*, al::AreaObj const**, al::IUseAreaObj const*, sead::Vector3<float> const&);
tryFindForceRecoveryArea(sead::Vector3<float>*, sead::Vector3<float>*, al::AreaObj const**, al::IUseAreaObj const*, sead::Vector3<float> const&);
isInvalidTriangleDisk(al::Triangle const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
isInTriangleDisk(al::Triangle const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
getBreakJudgeFunction(char const*);
isEnableStartSubjectiveCamera(al::LiveActor const*);
initFollowLimitCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*);
initParallel2DCamera(al::IUseCamera const*, al::ActorInitInfo const&, char const*);
invalidateFollowLimitCameraAutoResetLowAngleV(al::CameraTicket*);
updateCameraPosFromDistanceAndAngleHV(sead::Vector3<float>*, sead::Vector3<float> const&, float, float, float);
isPreCameraFollowOrParallel(al::CameraStartInfo const&);
initGetMoonCamera(al::IUseCamera const*, al::LiveActor const*, al::ActorInitInfo const&, char const*, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, sead::LookAtCamera*);
initWarpCheckpointCamera(al::IUseCamera const*, al::LiveActor const*, al::ActorInitInfo const&, char const*, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*);
requestSetCameraAngleV(al::LiveActor const*, float, int);
requestResetCameraPosition(al::LiveActor const*, int);
requestResetCameraAngleV(al::LiveActor const*, int);
requestDownToDefaultCameraAngleBySpeed(al::LiveActor const*, float, int);
requestUpToTargetCameraAngleBySpeed(al::LiveActor const*, float, float, int);
requestMoveDownCameraAngleV(al::LiveActor const*, int);
requestRiseCameraAngleByPlayerCollideJumpCode(al::LiveActor*);
requestCameraTurnToFront(al::LiveActor const*, float, float, int);
requestCameraTurnToFront(al::LiveActor const*, sead::Vector3<float> const&, float, float, int);
setEquipmentCameraDistanceCurve(al::LiveActor*, al::CameraDistanceCurve const*);
resetEquipmentCameraDistanceCurve(al::LiveActor*);
setBossCameraDistanceCurve(al::LiveActor*, al::CameraDistanceCurve const*);
resetBossCameraDistanceCurve(al::LiveActor*);
setKoopaShellCameraDistanceCurve(al::LiveActor*);
resetKoopaShellCameraDistanceCurve(al::LiveActor*);
setTRexPatrolCameraDistanceCurve(al::LiveActor*);
resetTRexPatrolCameraDistanceCurve(al::LiveActor*);
buyItemInShopItemList(al::IUseSceneObjHolder const*, int);
isBuyItemInShopItemList(al::IUseSceneObjHolder const*, int);
buyItem(al::IUseSceneObjHolder const*, ShopItem::ItemInfo const*);
buyItemAll(al::IUseSceneObjHolder const*);
isBuyItem(GameDataHolderAccessor, ShopItem::ItemInfo const*);
isHaveCloth(GameDataHolderAccessor, char const*);
isHaveCap(GameDataHolderAccessor, char const*);
isHaveSticker(GameDataHolderAccessor, char const*);
isHaveGift(GameDataHolderAccessor, char const*);
getClothList(GameDataHolderAccessor);
getClothListSize(GameDataHolderAccessor);
isHaveCloth(GameDataHolderAccessor, int);
isHaveClothByFileId(GameDataHolderAccessor, char const*, int);
calcHaveClothNum(GameDataHolderAccessor);
buyCloth(al::IUseSceneObjHolder const*, char const*);
getCapList(GameDataHolderAccessor);
getCapListSize(GameDataHolderAccessor);
isHaveCap(GameDataHolderAccessor, int);
isHaveCapByFileId(GameDataHolderAccessor, char const*, int);
isCompleteClothCap(al::IUseSceneObjHolder const*);
isCompleteCloth(al::IUseSceneObjHolder const*);
isCompleteCap(al::IUseSceneObjHolder const*);
isCompleteCloth(al::IUseSceneObjHolder const*, int);
isCompleteCap(al::IUseSceneObjHolder const*, int);
calcHaveCapNum(GameDataHolderAccessor);
buyCap(al::IUseSceneObjHolder const*, char const*);
getGiftList(GameDataHolderAccessor);
getGiftListSize(GameDataHolderAccessor);
isHaveGift(GameDataHolderAccessor, int);
calcHaveGiftNum(GameDataHolderAccessor);
checkCompleteGift(GameDataHolderAccessor, int);
getStickerList(GameDataHolderAccessor);
getStickerListSize(GameDataHolderAccessor);
isHaveSticker(GameDataHolderAccessor, int);
calcHaveStickerNum(GameDataHolderAccessor);
checkCompleteSticker(GameDataHolderAccessor, int);
getTestClothesName();
getTestCapName();
getTestGiftName();
getTestStickerName();
getTestItemName();
getTestShineName();
getMsTextName(ShopItem::ItemType const&);
getDisplayName(al::IUseMessageSystem const*, ShopItem::ItemInfo const&);
isTypeWear(ShopItem::ShopItemInfo const*);
createCollider2D3D(al::LiveActor*, float, float, sead::Vector3<float> const&, float);
updateCollider2D3D(al::LiveActor*, Collider2D3D*);
collide2D3D(sead::Vector3<float>*, al::LiveActor const*, Collider2D3D*);
resetCollider(Collider2D3D*);
onCollide2D(Collider2D3D*);
onCollide3D(Collider2D3D*);
isValidCollide2D(Collider2D3D const*);
getColliderHalfThickness2D(Collider2D3D const*);
isCollided(Collider2D3D const*);
isCollidedGround(Collider2D3D const*);
isCollidedGroundVelocity(al::LiveActor const*, Collider2D3D const*);
isCollidedWall(Collider2D3D const*);
isCollidedWallVelocity(al::LiveActor const*, Collider2D3D const*);
isCollidedCeiling(Collider2D3D const*);
isCollidedCeilingVelocity(al::LiveActor const*, Collider2D3D const*);
getCollidedGroundNormal(Collider2D3D const*);
getCollidedWallNormal(Collider2D3D const*);
getCollidedCeilingNormal(Collider2D3D const*);
getCollidedGroundPos(Collider2D3D const*);
getCollidedWallPos(Collider2D3D const*);
getCollidedCeilingPos(Collider2D3D const*);
tryGetCollidedGroundSensor(Collider2D3D const*);
tryGetCollidedWallSensor(Collider2D3D const*);
tryGetCollidedCeilingSensor(Collider2D3D const*);
isCollidedDamageFire(Collider2D3D const*);
isCollidedPoison(Collider2D3D const*);
tryKillIfCollidedDamageFloor(al::LiveActor*, Collider2D3D const*, char const*);
trySlideIfOnFloorSlide(al::LiveActor*, float, float);
trySlideIfOnFloorSlide(al::LiveActor*, IUsePlayerCollision const*, float, float);
reboundVelocityFromCollision(al::LiveActor*, Collider2D3D const*, float, float, float);
solveCollisionInHacking(al::LiveActor*, sead::Vector3<float> const&);
createDemoPeachWedding(al::ActorInitInfo const&);
createDemoCapManHeroine(al::ActorInitInfo const&);
isRandomActionDemoChangeWorld(al::LiveActor const*, char const*);
tryGetDemoChangeWorldRandomActionName(sead::BufferedSafeStringBase<char>*, int*, al::LiveActor const*, char const*);
requestStartDemoNormal(al::LiveActor*, bool);
addDemoActor(al::LiveActor*, bool);
requestEndDemoNormal(al::LiveActor const*);
requestStartDemoNormal(al::Scene const*);
requestEndDemoNormal(al::Scene const*);
requestStartDemoNormalWithCinemaFrame(al::LiveActor*);
requestEndDemoNormalWithCinemaFrame(al::LiveActor const*);
requestStartDemoWithPlayer(al::LiveActor*, bool);
requestEndDemoWithPlayer(al::LiveActor const*);
requestStartDemoWithPlayer(al::Scene const*);
requestEndDemoWithPlayer(al::Scene const*);
requestStartDemoWithPlayerCinemaFrame(al::LiveActor*, bool);
requestEndDemoWithPlayerCinemaFrame(al::LiveActor const*);
requestStartDemoWithPlayerKeepCarry(al::LiveActor*, bool);
requestEndDemoWithPlayerKeepCarry(al::LiveActor const*);
requestStartDemoWithPlayerUseCoin(al::LiveActor*, bool);
requestEndDemoWithPlayerUseCoin(al::LiveActor const*);
requestStartDemoWithPlayerKeepBindTalk(al::LiveActor*, bool);
requestEndDemoWithPlayerKeepBindTalk(al::LiveActor const*);
requestStartDemoKeepHackTalk(al::LiveActor*, bool);
requestEndDemoKeepHackTalk(al::LiveActor const*);
requestStartDemoWithPlayerCinemaFrameTalk(al::LiveActor*, bool);
requestEndDemoWithPlayerCinemaFrameTalk(al::LiveActor const*);
requestStartDemoWithPlayerKeepCarryTalk(al::LiveActor*, bool);
requestEndDemoWithPlayerKeepCarryTalk(al::LiveActor const*);
requestStartDemoWithPlayerUseCoinTalk(al::LiveActor*, bool);
requestEndDemoWithPlayerUseCoinTalk(al::LiveActor const*);
requestStartDemoNormalTalk(al::LiveActor*, bool);
requestEndDemoNormalTalk(al::LiveActor const*);
requestStartDemoWarpToCheckpoint(al::Scene const*);
requestStartDemoBossBattleStart(al::LiveActor*);
requestEndDemoBossBattleStart(al::LiveActor const*);
requestStartDemoBossBattleEnd(al::LiveActor*);
requestEndDemoBossBattleEnd(al::LiveActor const*);
requestStartDemoShineGet(Shine*);
requestStartDemoAchievementShineGet(al::Scene*);
endDemoShineGet(al::Scene*);
requestEndDemoShineGet(al::Scene const*);
requestEndDemoShineGet(al::LiveActor const*);
requestStartDemoShineDotGet(Shine*);
requestEndDemoShineDotGet(al::Scene const*);
requestStartDemoShineMainGet(Shine*);
setDemoInfoDemoName(al::LiveActor const*, char const*);
requestEndDemoShineMainGet(al::LiveActor const*);
requestEndDemoShineMainGet(al::Scene const*);
requestStartDemoShineGrandGet(Shine*);
requestEndDemoShineGrandGet(al::LiveActor const*);
requestEndDemoShineGrandGet(al::Scene const*);
requestStartDemoShineAppear(al::LiveActor*);
requestEndDemoShineAppear(al::LiveActor const*);
requestStartDemoShineAppear(al::Scene const*);
requestEndDemoShineAppear(al::Scene const*);
requestStartDemoWarp(al::LiveActor*);
requestStartDemoWarp(al::Scene const*);
requestEndDemoWarp(al::LiveActor const*);
requestEndDemoWarp(al::Scene const*);
requestStartDemoHackStart(al::LiveActor*);
requestEndDemoHackStart(al::LiveActor const*);
requestStartDemoAppearByBazookaElectric(al::LiveActor*);
requestEndDemoAppearByBazookaElectric(al::LiveActor const*);
requestStartDemoLaunchBazookaElectric(al::LiveActor*);
requestEndDemoLaunchBazookaElectric(al::LiveActor const*);
requestStartDemoSceneStartPlayerWalk(al::LiveActor*);
requestEndDemoSceneStartPlayerWalk(al::LiveActor const*);
requestStartDemoGetLifeMaxUpItem(al::LiveActor*);
requestEndDemoGetLifeMaxUpItem(al::Scene const*);
requestStartDemoBirdCarryMeat(al::LiveActor*);
requestEndDemoBirdCarryMeat(al::LiveActor const*);
requestStartDemoBirdFindMeat(al::LiveActor*);
requestEndDemoBirdFindMeat(al::LiveActor const*);
requestStartDemoGetTimeBalloon(al::LiveActor*);
requestEndDemoGetTimeBalloon(al::LiveActor const*);
requestStartDemoJango(al::LiveActor*);
requestEndDemoJango(al::LiveActor const*);
requestStartDemoTitleLogo(al::LiveActor const*);
requestStartDemoGoToEnding(al::LiveActor*);
isActiveDemo(al::LiveActor const*);
isActiveDemo(al::Scene const*);
isActiveDemoNormal(al::Scene const*);
isActiveDemoNormalWithCinemaFrame(al::Scene const*);
isActiveDemoWithPlayer(al::Scene const*);
isActiveDemoWithPlayer(al::LiveActor const*);
isActiveDemoWithPlayerCinemaFrame(al::Scene const*);
isActiveDemoWithPlayerCinemaFrame(al::LiveActor const*);
isActiveDemoWithPlayerKeepCarry(al::Scene const*);
isActiveDemoWithPlayerKeepCarry(al::LiveActor const*);
isActiveDemoWithPlayerUseCoin(al::Scene const*);
isActiveDemoWithPlayerUseCoin(al::LiveActor const*);
isActiveDemoWithPlayerKeepBindTalk(al::Scene const*);
isActiveDemoWithPlayerKeepBindTalk(al::LiveActor const*);
isActiveDemoWarpToCheckpoint(al::LiveActor const*);
isActiveDemoShineGet(al::Scene const*);
isActiveDemoShineGet(al::LiveActor const*);
isActiveDemoShineDotGet(al::Scene const*);
isActiveDemoShineDotGet(al::LiveActor const*);
isActiveDemoShineGrandGet(al::Scene const*);
isActiveDemoShineGrandGet(al::LiveActor const*);
isActiveDemoShineMainGet(al::Scene const*);
isActiveDemoShineMainGet(al::LiveActor const*);
isActiveDemoWarp(al::Scene const*);
isActiveDemoWarp(al::LiveActor const*);
isActiveDemoHackStart(al::LiveActor const*);
isActiveDemoHackStart(al::Scene const*);
isActiveDemoHackStartFirst(al::Scene const*);
isEqualDemoInfoDemoName(al::Scene const*, char const*);
isActiveDemoScenarioCamera(al::LiveActor const*);
isActiveDemoGetLifeMaxUpItem(al::Scene const*);
isActiveDemoSceneStartPlayerWalk(al::Scene const*);
isActiveDemoBirdCarryMeat(al::Scene const*);
isActiveDemoBirdFindMeat(al::Scene const*);
isActiveDemoJango(al::Scene const*);
isActiveDemoJango(al::LiveActor const*);
isActiveDemoTitleLogo(al::Scene const*);
isActiveDemoGoToEnding(al::Scene const*);
isActiveDemoTalk(al::Scene const*);
isActiveDemoCinemaFrameTalk(al::Scene const*);
isActiveDemoKeepCarryTalk(al::Scene const*);
isActiveDemoUseCoinTalk(al::Scene const*);
isActiveDemoKeepHackTalk(al::Scene const*);
isActiveDemoNormalTalk(al::Scene const*);
isActiveDemoLaunchBazookaElectric(al::Scene const*);
isActiveDemoGiantWanderBossBattleStart(al::Scene const*);
isActiveDemoGiantWanderBossBattleStart(OceanWaveActor const*);
isActiveDemoPlayerPuppetable(al::LiveActor const*);
addDemoSubActor(al::LiveActor*);
registerShineTowerRocketToDemoDirector(ShineTowerRocket*);
tryGetShineTowerRocketFromDemoDirector(al::LiveActor*);
addDemoAppearFromHomeToList(ShineTowerRocket*);
addDemoReturnToHomeToList(ShineTowerRocket*);
addDemoRiseMapPartsToList(RiseMapPartsHolder*);
requestStartDemoWorldIntroCamera(al::Scene const*);
requestEndDemoWorldIntroCamera(al::Scene const*);
requestStartDemoScenarioCamera(al::Scene const*);
requestEndDemoScenarioCamera(al::LiveActor const*);
requestStartDemoAppearFromHome(al::Scene const*);
requestEndDemoAppearFromHome(al::LiveActor const*);
requestStartDemoReturnToHome(al::Scene const*);
requestEndDemoReturnToHome(al::LiveActor const*);
requestStartDemoRiseMapParts(al::Scene const*);
requestEndDemoRiseMapParts(al::LiveActor const*);
requestStartDemoPeachCastleCap(al::LiveActor*);
requestEndDemoPeachCastleCap(al::LiveActor const*);
isExistDemoAppearFromHomeInList(al::Scene const*);
isExistDemoReturnToHome(al::Scene const*);
isExistDemoRiseMapPartsInList(al::Scene const*);
getRequestActor(al::Scene const*);
requestValidateDemoSkip(IUseDemoSkip*, al::LiveActor const*);
getDemoSkipRequester(al::Scene const*);
isDemoEnableSkip(al::Scene const*);
isFirstDemo(al::Scene const*);
isEnableSkipDemo(al::Scene const*);
skipDemo(al::Scene const*);
updateOnlyDemoGraphics(al::Scene const*);
isFirstDemoWorldIntroCamera(al::Scene const*);
isFirstDemoScenarioStartCamera(al::LiveActor const*);
noticeDemoSkipStart(al::Scene const*);
noticeDemoSkipEnd(al::Scene const*);
isWaitDemoSkipEnd(al::LiveActor const*);
createCaptionInfoHolder(char const*);
validateDemoCaption(al::LiveActor const*, CaptionInfoHolder*);
isActiveDemoWithCinemaCaption(al::Scene const*);
tryAppearCinemaCaption(al::Scene const*, CinemaCaption*);
startCloseDemoFade(al::LiveActor const*, int);
startOpenDemoFade(al::LiveActor const*, int);
isDemoFadeCloseEnd(al::LiveActor const*);
isDemoFadeOpenEnd(al::LiveActor const*);
isDemoFadeWipeStateEnableOpenMenuOrSnapShotMode(al::Scene const*);
tryCreateDemoHackFirstDirector(al::LiveActor*, int, al::ActorInitInfo const&);
noticeDemoStartToDemoHackFirstDirector(al::Scene const*);
setBossBarrierField(BarrierField*);
tryGetBossBarrierField(al::LiveActor const*);
setDemoEnvironmentChangeFlag(al::Scene const*, bool);
setDemoEnvironmentChangeFlag(al::LiveActor const*, bool);
isDemoEnvironmentChange(al::Scene const*);
isDemoEnvironmentChange(al::LiveActor const*);
getRandomActionIndexDemoChangeWorld(al::LiveActor const*);
setDemoInfoDemoName(al::Scene const*, char const*);
getDemoInfoDemoName(al::LiveActor const*);
isTriggerDemoCancel(al::IUseSceneObjHolder const*);
updateDemoSystemOnly(al::Scene const*);
notifyDisableUpdateCamera(al::LiveActor const*);
isDisableUpdateCamera(al::Scene const*);
createDynamicCollisionActor(al::ActorInitInfo const&, int, sead::Matrix34<float> const*, al::HitSensor*);
searchDynamicCollisionAttributeIndex(char const*);
createDynamicDrawActor(al::ActorInitInfo const&, int, char const*, bool);
createDynamicDrawActorForward(al::ActorInitInfo const&, int, char const*, bool);
createDynamicDrawActorIndirect(al::ActorInitInfo const&, int, char const*, bool);
createDynamicDrawActorPreSilhouette(al::ActorInitInfo const&, int, char const*, bool);
createBaseInertiaTensorSphere(sead::Matrix33<float>*, float, float);
createBaseInertiaTensorBox(sead::Matrix33<float>*, sead::BoundBox3<float> const&, float);
tryCloseHackTutorial(al::IUseSceneObjHolder const*);
changeHackTutorialText(al::IUseSceneObjHolder const*, char const*);
resetHackTutorialText(al::IUseSceneObjHolder const*);
tryAppearBindTutorial(al::IUseSceneObjHolder const*, BindInfo const&);
tryCloseBindTutorial(al::IUseSceneObjHolder const*);
tryCloseObjectTutorial(al::IUseSceneObjHolder const*, char const*);
appearFirstHackTutorialFrog(al::IUseSceneObjHolder const*);
appearFirstHackTutorialKoopa(al::IUseSceneObjHolder const*);
tryAppearObjectTutorial(al::IUseSceneObjHolder const*, char const*);
tryAppearObjectTutorialOpening(al::IUseSceneObjHolder const*, char const*, char const*);
tryCloseObjectTutorialOpening(al::IUseSceneObjHolder const*, char const*);
tryAppearObjectTutorialHipDrop(al::IUseSceneObjHolder const*);
tryCloseObjectTutorialHipDrop(al::IUseSceneObjHolder const*);
tryAppearObjectTutorialCapThrow(al::IUseSceneObjHolder const*);
tryCloseObjectTutorialCapThrow(al::IUseSceneObjHolder const*);
tryAppearPlayerGrabPoleTutorial(al::IUseSceneObjHolder const*);
tryClosePlayerGrabPoleTutorial(al::IUseSceneObjHolder const*);
tryAppearPlayerClimbPoleTutorial(al::IUseSceneObjHolder const*);
tryClosePlayerClimbPoleTutorial(al::IUseSceneObjHolder const*);
tryAppearPlayerClimbPoleTopTutorial(al::IUseSceneObjHolder const*);
tryClosePlayerClimbPoleTopTutorial(al::IUseSceneObjHolder const*);
tryAppearKoopaCapTutorial(al::IUseSceneObjHolder const*);
tryAppearKoopaCapTutorialNoMovie(al::IUseSceneObjHolder const*);
tryCloseKoopaCapTutorial(al::IUseSceneObjHolder const*);
changeSeparatePlayTutorial(al::IUseSceneObjHolder const*);
changeSinglePlayTutorial(al::IUseSceneObjHolder const*);
changeEnableCapTutorial(al::IUseSceneObjHolder const*);
changeDisableCapTutorial(al::IUseSceneObjHolder const*);
tryAppearSignboardTutorial(al::IUseSceneObjHolder const*, char const*);
isExistSignboardTutorialMovie(al::IUseSceneObjHolder const*, char const*);
tryCloseSignboardTutorial(al::IUseSceneObjHolder const*);
tryAppearAmiiboHelpNpcTutorial(al::IUseSceneObjHolder const*);
tryAppearAmiiboHelpNpcSeparateTutorial(al::IUseSceneObjHolder const*);
tryAppearPlayerCameraSubjectiveTutorial(al::IUseSceneObjHolder const*);
tryClosePlayerCameraSubjectiveTutorial(al::IUseSceneObjHolder const*);
appearCapMsgTutorial(al::IUseSceneObjHolder const*, char const*);
closeCapMsgTutorial(al::IUseSceneObjHolder const*);
appearRaceTutorial(al::IUseSceneObjHolder const*, char const*);
killRaceTutorial(al::IUseSceneObjHolder const*, char const*);
appearRaceTutorialTutorial(al::IUseSceneObjHolder const*);
isShowTutorial(al::IUseSceneObjHolder const*);
isShowObjectTutorial(al::IUseSceneObjHolder const*, char const*);
hideTutorial(al::IUseSceneObjHolder const*);
showTutorial(al::IUseSceneObjHolder const*);
appearTutorialForDemo(al::IUseSceneObjHolder const*);
killTutorial(al::IUseSceneObjHolder const*);
updateGyroText(al::IUseSceneObjHolder const*);
getItemType(al::ActorInitInfo const&);
getItemType(char const*);
isItemTypeKuriboMini(int*, int);
initItemByPlacementInfo(al::LiveActor*, al::ActorInitInfo const&, bool);
tryInitItemByPlacementInfo(al::LiveActor*, al::ActorInitInfo const&, bool);
initItem2DByPlacementInfo(al::LiveActor*, al::ActorInitInfo const&);
tryInitItem2DByPlacementInfo(al::LiveActor*, al::ActorInitInfo const&);
tryInitItem(al::LiveActor*, int, al::ActorInitInfo const&, bool);
tryInitShineByPlacementInfoWithItemMenu(al::ActorInitInfo const&);
initShineByPlacementInfo(al::ActorInitInfo const&);
tryInitLinkShine(al::ActorInitInfo const&, char const*, int);
tryInitLinkShineHintPhoto(al::ActorInitInfo const&, char const*, int);
initLinkShine(al::ActorInitInfo const&, char const*, int);
initLinkShopShine(al::ActorInitInfo const&, char const*);
initLinkShineChipShine(al::ActorInitInfo const&);
initLinkBossShine(al::ActorInitInfo const&);
createShineEffectInsideObject(Shine*, al::LiveActor const*, al::ActorInitInfo const&);
appearPopupShine(Shine*);
appearPopupShine(Shine*, al::LiveActor const*);
appearPopupShine(Shine*, sead::Vector3<float> const&);
appearPopupShineWithoutDemo(Shine*);
appearPopupShineWithoutDemo(Shine*, al::LiveActor const*);
appearPopupShineWithoutDemo(Shine*, sead::Vector3<float> const&);
appearPopupShineWithoutWarp(Shine*);
appearPopupShineGrandByBoss(Shine*, int);
appearWaitShine(Shine*);
appearWaitShine(Shine*, sead::Vector3<float> const&);
isEndAppearShine(Shine const*);
isGotShine(Shine const*);
isAliveShine(Shine const*);
isMainShine(Shine const*);
updateHintTrans(Shine const*, sead::Vector3<float> const&);
appearShineAndJoinBossDemo(Shine*, char const*, sead::Quat<float> const&, sead::Vector3<float> const&);
endShineBossDemo(Shine*);
endShineBossDemoAndStartFall(Shine*, float);
setAppearItemFactorByMsg(al::LiveActor const*, al::SensorMsg const*, al::HitSensor const*);
setAppearItemFactorAndOffsetByMsg(al::LiveActor const*, al::SensorMsg const*, al::HitSensor const*);
setAppearItemFactorAndOffsetForCombo(al::LiveActor const*, al::SensorMsg const*, al::HitSensor const*, bool);
appearItemFromObj(al::LiveActor*, sead::Vector3<float> const&, sead::Quat<float> const&, float);
appearItemFromObj(al::LiveActor*, al::HitSensor*, float);
appearItemFromObj(al::LiveActor*, al::HitSensor*, sead::Vector3<float> const&);
appearItemFromObjGravity(al::LiveActor*, al::HitSensor*, sead::Vector3<float> const&);
appearRandomItemFromObj(al::LiveActor*, al::HitSensor*, float);
tryAppearMultiCoinFromObj(al::LiveActor*, sead::Vector3<float> const&, int, float);
tryAppearMultiCoinFromObj(al::LiveActor*, sead::Vector3<float> const&, sead::Quat<float> const&, int, float);
tryAppearMultiCoinFromObj(al::LiveActor*, al::HitSensor*, int, float);
tryAppearMultiCoinFromObj(al::LiveActor*, al::HitSensor*, int, sead::Vector3<float> const&);
syncCoin2DAnimFrame(al::LiveActor*, char const*);
getStageCoinCollectArchiveName(al::LiveActor const*);
getStageCoinCollectEmptyArchiveName(al::LiveActor const*);
getStageCoinCollect2DArchiveName(al::LiveActor const*);
getStageCoinCollect2DEmptyArchiveName(al::LiveActor const*);
getStageShineAnimFrame(al::LiveActor const*);
getStageShineAnimFrame(al::LiveActor const*, int);
getStageShineAnimFrame(al::LiveActor const*, char const*);
setStageShineAnimFrame(al::LiveActor*, char const*, int, bool);
getStageShineArchiveName(al::LiveActor const*, char const*);
getStageShineEmptyArchiveName(al::LiveActor const*, char const*);
setMaterialAsEmptyModel(al::LiveActor*);
setProjectionMtxAsEmptyModel2d(al::LiveActor*, sead::Vector2<float> const&);
addDemoRacePrizeCoin(al::LiveActor*);
resetJudge(IJudge*);
updateJudge(IJudge*);
isJudge(IJudge const*);
updateJudgeAndResult(IJudge*);
judgeAndResetReturnTrue(IJudge*);
isEnableShowDemoAfterOpenMoonRockFirst(al::LiveActor const*);
isFirstDemoOpenMoonRock(al::LiveActor const*);
isEnableShowDemoMoonRockMapWorld(al::LiveActor const*);
showDemoAfterOpenMoonRockFirst(al::LiveActor const*);
showDemoMoonRockMapWorld(al::LiveActor const*);
getNetworkPrototypeDirectory();
convertComputerNameToFullName(sead::BufferedSafeStringBase<char>*, char const*);
convertComputerNameToSecondName(sead::BufferedSafeStringBase<char>*, char const*);
convertComputerNameToSecondKanaName(sead::BufferedSafeStringBase<char>*, char const*);
initTalkNpcParam(al::LiveActor*, char const*);
startNpcAction(al::LiveActor*, char const*);
makeNpcActionName(sead::BufferedSafeStringBase<char>*, al::LiveActor const*, char const*);
tryStartNpcActionIfNotPlaying(al::LiveActor*, char const*);
isExistNpcAction(al::LiveActor const*, char const*);
isPlayingNpcAction(al::LiveActor const*, char const*);
isOneTimeNpcAction(al::LiveActor const*, char const*);
isExistTalkNpcParamHolder(al::LiveActor const*);
isInvalidNpcScare(TalkNpcParam const*);
checkEnableStartEventAndCancelReaction(al::LiveActor*, TalkNpcParam const*);
tryApplyNpcMaterialAnimPresetFromPlacementInfo(al::LiveActor*, al::ActorInitInfo const&, TalkNpcParam const*);
setNpcMaterialAnimFromPlacementInfo(al::LiveActor*, al::ActorInitInfo const&);
tryUpdateNpcEyeLineAnim(al::LiveActor*, TalkNpcParam const*);
tryUpdateNpcEyeLineAnimToTarget(al::LiveActor*, TalkNpcParam const*, sead::Vector3<float> const&, bool);
resetNpcEyeLineAnim(al::LiveActor*);
tryUpdateNpcFacialAnim(al::LiveActor*, TalkNpcParam const*);
trySwitchDepthToSelfShadow(al::LiveActor*);
tryReceiveMsgPlayerDisregard(al::SensorMsg const*, al::HitSensor*, TalkNpcParam const*);
attackSensorNpcCommon(al::HitSensor*, al::HitSensor*);
receiveMsgNpcCommonNoReaction(al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
calcNpcPushVecBetweenSensors(sead::Vector3<float>*, al::HitSensor*, al::HitSensor*);
createAndAppendNpcJointLookAtController(al::LiveActor*, TalkNpcParam const*);
tryCreateAndAppendNpcJointLookAtController(al::LiveActor*, TalkNpcParam const*);
tryCreateAndAppendNpcJointLookAtController(al::LiveActor*, TalkNpcParam const*, float);
setPlayerEyeSensorHitHolder(NpcJointLookAtController*, PlayerEyeSensorHitHolder const*);
getNpcJointLookAtControlJointNum(TalkNpcParam const*);
updateNpcJointLookAtController(NpcJointLookAtController*);
cancelUpdateNpcJointLookAtController(NpcJointLookAtController*);
updateNpcJointLookAtControllerLookAtDistance(NpcJointLookAtController*, float);
invalidateNpcJointLookAtController(NpcJointLookAtController*);
validateNpcJointLookAtController(NpcJointLookAtController*);
requestLookAtTargetTrans(NpcJointLookAtController*, sead::Vector3<float> const&);
initCapWorldNpcTail(al::LiveActor*);
tryStartForestManFlowerAnim(al::LiveActor*);
tryUpdateMaterialCodeByFloorCollisionOnArrow(al::LiveActor*);
tryAttachConnectorToCollisionTFSV(al::LiveActor*, al::MtxConnector*, sead::Quat<float>*);
tryConnectToCollisionTFSV(al::LiveActor*, al::MtxConnector const*, sead::Quat<float>*);
tryGetSubActorCityMayorFace(al::LiveActor const*);
syncActionCityMayorFace(al::LiveActor*);
syncMtsAnimCityMayorFace(al::LiveActor*);
isExistFaceAnim(al::LiveActor*, char const*);
animateCityMayorFace(al::LiveActor*, char const*, float);
createNpcStateReaction(al::LiveActor*, TalkNpcParam const*, NpcStateReactionParam const*);
isInvalidTrampleSensor(al::HitSensor const*, TalkNpcParam const*);
initEventFlow(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*);
initEventFlowForRunAwayNpc(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*);
initEventFlowForSystem(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*);
initEventFlowSuffix(al::LiveActor*, al::ActorInitInfo const&, char const*, char const*, char const*);
initEventFlowFromPlacementInfo(al::LiveActor*, al::ActorInitInfo const&, char const*);
initCommonEventFlow(al::LiveActor*, al::ActorInitInfo const&, char const*);
createCommonEventFlowFromPlacementInfo(al::LiveActor*, al::ActorInitInfo const&);
initEventCharacterName(al::EventFlowExecutor*, al::ActorInitInfo const&, char const*);
makeEventCharacterName(sead::BufferedSafeStringBase<char16_t>*, al::ActorInitInfo const&, char const*);
initEventParam(al::EventFlowExecutor*, TalkNpcParam const*, char const*);
tryInitItemKeeperByEvent(al::LiveActor*, al::ActorInitInfo const&, al::EventFlowExecutor const*);
startEventFlow(al::EventFlowExecutor*, char const*);
updateEventFlow(al::EventFlowExecutor*);
stopEventFlow(al::EventFlowExecutor*);
restartEventFlow(al::EventFlowExecutor*);
initEventMovementRail(al::EventFlowExecutor*, al::ActorInitInfo const&);
initEventMovement(al::EventFlowExecutor*, al::EventFlowMovement*, al::ActorInitInfo const&);
initEventMovementTurnSeparate(al::EventFlowExecutor*, al::ActorInitInfo const&);
initEventMovementWait(al::EventFlowExecutor*, al::ActorInitInfo const&);
initEventMovementWander(al::EventFlowExecutor*, al::ActorInitInfo const&);
initEventCameraObject(al::EventFlowExecutor*, al::ActorInitInfo const&, char const*);
initEventCameraObjectAfterKeepPose(al::EventFlowExecutor*, al::ActorInitInfo const&, char const*);
initEventCameraTalk(al::EventFlowExecutor*, al::ActorInitInfo const&, char const*, float);
initEventCameraTalk2(al::EventFlowExecutor*, al::ActorInitInfo const&, char const*);
initEventCameraLookBoard(al::EventFlowExecutor*, al::ActorInitInfo const&, sead::Vector3<float> const&, char const*);
initEventCameraAnim(al::EventFlowExecutor*, al::LiveActor const*, al::ActorInitInfo const&, char const*);
initEventCameraFixActor(al::EventFlowExecutor*, al::ActorInitInfo const&, char const*, al::LiveActor const*, sead::Vector3<float> const*, float, float, float);
initEventCameraFixActor2(al::EventFlowExecutor*, al::ActorInitInfo const&, char const*, al::LiveActor const*, sead::Vector3<float> const*, float, float, float, bool);
initEventCameraFixActorAutoAroundFront(al::EventFlowExecutor*, al::ActorInitInfo const&, char const*, al::LiveActor const*, sead::Vector3<float> const*, float, float, float, bool);
initEventCameraFixActorAutoAroundFront2(al::EventFlowExecutor*, al::ActorInitInfo const&, char const*, al::LiveActor const*, sead::Vector3<float> const*, float, float, float);
isDefinedEventCamera(al::EventFlowExecutor const*, char const*);
initEventActionNameConverter(al::EventFlowExecutor*, al::IEventFlowActionNameConverter const*);
initEventQueryJudge(al::EventFlowExecutor*, al::IEventFlowQueryJudge const*);
initEventMessageTagDataHolder(al::EventFlowExecutor*, al::MessageTagDataHolder const*);
checkMatchPatternCurrentCostume(bool*, bool*, al::LiveActor const*, char const*);
checkMatchPatternCurrentCostumePair(al::LiveActor const*, char const*);
isSuccessNpcEventBalloonMessage(al::LiveActor const*);
isPlayingNpcEventBalloonMessageVoice(al::LiveActor const*);
requestNpcEventBalloonMessage(al::EventFlowNode*, char16_t const*, NpcEventBalloonRequestInfo const&);
requestNpcEventTalkBalloonMessage(al::EventFlowNode*, char const*, NpcEventBalloonRequestInfo const&);
requestNpcEventTalkBalloonMessageEntranceCamera(al::EventFlowNode*, char const*, NpcEventBalloonRequestInfo const&);
requestNpcEventTalkBalloonMessageWithEnableButtonA(al::EventFlowNode*, char const*, NpcEventBalloonRequestInfo const&);
requestNpcEventTalkBalloonMessageWithDisableButtonA(al::EventFlowNode*, char const*, NpcEventBalloonRequestInfo const&);
requestNpcEventActionBalloonMessage(al::LiveActor*, bool, NpcEventBalloonRequestInfo const&);
setEventBalloonFilterOnlyMiniGame(al::LiveActor const*);
resetEventBalloonFilter(al::LiveActor const*);
startChoiceEvent(al::EventFlowNode*, al::EventFlowChoiceInfo*);
isSuccessLockEventTalkDemo(al::EventFlowNode const*);
tryLockStartEventTalkDemo(al::EventFlowNode*);
tryLockStartEventTalkDemoWithoutBalloon(al::EventFlowNode*);
tryStartEventTalkDemo(al::EventFlowNode*);
tryStartEventTalkOnlyRequesterDemo(al::EventFlowNode*);
tryStartEventTalkKeepHackDemo(al::EventFlowNode*);
tryStartEventTalkUseCoinDemo(al::EventFlowNode*);
tryStartEventNormalDemo(al::EventFlowNode*);
tryStartEventKeepBindDemo(al::LiveActor*);
tryStartEventCutSceneDemo(al::LiveActor*);
tryStartEventCutSceneKeepHackDemo(al::LiveActor*);
tryStartEventCutSceneTalkOnlyRequesterDemo(al::LiveActor*);
endEventCutSceneDemo(al::LiveActor*);
endEventCutSceneTalkOnlyRequeterDemo(al::LiveActor*);
endEventCutSceneDemoBySkip(al::LiveActor*);
endEventCutSceneDemoOrTryEndEventCutSceneDemoBySkip(al::LiveActor*);
endEventCutSceneTalkOnlyRequeterDemoOrTryEndEventCutSceneDemoBySkip(al::LiveActor*);
requestEndEventDemo(al::LiveActor*);
requestEndEventDemo(al::EventFlowNode*);
isActiveEventDemo(al::EventFlowNode const*);
isActiveEventDemo(al::LiveActor const*);
isEqualEventDemoStartActor(al::LiveActor const*);
tryHideDemoPlayerIfRequested(al::LiveActor*, al::EventFlowExecutor*);
tryShowDemoPlayerIfRequested(al::LiveActor*, al::EventFlowExecutor*);
tryStartDemoPlayerActionIfRequested(al::LiveActor*, al::EventFlowExecutor*);
swapEventCharacterName(al::EventFlowExecutor*, sead::BufferedSafeStringBase<char16_t> const*);
resetEventCharacterName(al::EventFlowExecutor*);
startOpenNpcDemoEventTalkMessage(al::EventFlowNode*, char16_t const*);
startOpenNpcDemoEventTalkMessageWithButtonA(al::EventFlowNode*, char16_t const*);
startOpenNpcDemoEventSystemMessageWithButtonA(al::EventFlowNode*, char16_t const*, int);
startCloseNpcDemoEventTalkMessage(al::LiveActor*);
isOpenWaitNpcDemoEventTalkMessage(al::LiveActor const*);
isPlayingTextPaneAnimEventTalkMessage(al::LiveActor const*);
isEndNpcDemoEventTalkMessage(al::EventFlowNode const*);
isCloseNpcDemoEventTalkMessage(al::LiveActor const*);
getEventTalkWindowMessageStyle(al::EventFlowNode const*);
isCloseEventWipeFadeBlack(al::EventFlowNode const*);
isOpenEventWipeFadeBlack(al::EventFlowNode const*);
requestCloseEventWipeFadeBlack(al::EventFlowNode*, int);
requestOpenEventWipeFadeBlack(al::EventFlowNode*, int);
calcPlayerWatchTrans(sead::Vector3<float>*, al::LiveActor const*, TalkNpcParam const*);
isPlayerInWater(al::EventFlowNode const*);
isNpcScareTiming(al::EventFlowExecutor const*);
isExistNpcLookPos(al::LiveActor const*);
isExistNpcLookPos(al::EventFlowExecutor const*);
getNpcLookPos(al::LiveActor const*);
getNpcLookPos(al::EventFlowExecutor const*);
isExistTrafficAreaDirector(al::LiveActor const*);
tryPermitEnterTrafficNpcAndSyncDrawClipping(al::LiveActor*);
tryPermitEnterTrafficCar(al::LiveActor const*, sead::Vector3<float> const&);
requestSwitchTalkNpcEventAfterDoorSnow(al::LiveActor*, int);
requestSwitchTalkNpcEventVolleyBall(al::LiveActor*, int);
requestSwitchTalkNpcEventJumpingRope(al::LiveActor*, int);
requestSwitchTalkNpcEventRadicon(al::LiveActor*, int);
isEventAfterDoorSnow1(al::EventFlowNode const*);
isEventAfterDoorSnow2(al::EventFlowNode const*);
isEventAfterDoorSnow3(al::EventFlowNode const*);
isEventAfterDoorSnow4(al::EventFlowNode const*);
tryGetTalkNpcVolleyBallEntryName(al::LiveActor const*);
tryGetTalkNpcJumpingRopeEntryName(al::LiveActor const*);
tryGetTalkNpcRadiconEntryName(al::LiveActor const*);
requestEventGetShineDirect(al::EventFlowNode*, Shine*);
requestEventOpenBgmList(al::EventFlowNode*);
requestEventOpenShineList(al::LiveActor*);
requestEventGetAchievement(al::LiveActor*, char const*);
checkEndSceneExecuteAndResetRequest(al::EventFlowNode*);
checkEndSceneExecuteAndResetRequest(al::LiveActor*);
isExecuteSceneEvent(al::LiveActor const*);
checkTriggerDecideWithRequestIcon(al::LiveActor*, sead::Vector3<float> const&, float);
skipEventDemo(al::EventFlowExecutor*);
isGreaterBindPriority(al::HitSensor const*, al::HitSensor const*);
isEnableSendTrampleMsg(al::LiveActor const*, al::HitSensor*, al::HitSensor*);
isEnableSendUpperPunchMsg(al::LiveActor const*, al::HitSensor*, al::HitSensor*);
trySendMsgPlayerAttackTrample(al::LiveActor const*, al::HitSensor*, al::HitSensor*);
trySendMsgPlayerReflectOrTrample(al::LiveActor const*, al::HitSensor*, al::HitSensor*);
sendPlayerCollisionTouchMsg(al::LiveActor const*, al::HitSensor*, IUsePlayerCollision const*);
sendPlayerCollisionUpperPunchMsg(al::LiveActor const*, al::HitSensor*, IUsePlayerCollision const*, IPlayerModelChanger const*);
calcGroundNormalOrUpDir(sead::Vector3<float>*, al::LiveActor const*, IUsePlayerCollision const*);
calcGroundNormalOrGravityDir(sead::Vector3<float>*, al::LiveActor const*, IUsePlayerCollision const*);
calcGroundNormalExceptJustLandOrGravityDir(sead::Vector3<float>*, al::LiveActor const*, IUsePlayerCollision const*);
calcOnGroundNormalOrGravityDir(sead::Vector3<float>*, al::LiveActor const*, IUsePlayerCollision const*);
calcSnapGroundNormalOrGravityDir(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor*, IUsePlayerCollision const*, float, sead::Vector3<float> const&);
calcWallNormalOrReverseFrontDir(sead::Vector3<float>*, al::LiveActor const*, IUsePlayerCollision const*);
calcAlongSkyFront(sead::Vector3<float>*, al::LiveActor const*);
calcAlongDirFront(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
calcFrontVerticalGravity(sead::Vector3<float>*, al::LiveActor const*);
faceToAttackSensor(al::LiveActor*, al::HitSensor*);
faceToCamera(al::LiveActor*);
convertWallRunDirection(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&);
calcFrontVelocityAndDirH(sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, IUsePlayerCollision const*);
reflectCeiling(al::LiveActor*, float);
reflectCeilingUpperPunch(al::LiveActor*, IUsePlayerCollision const*, PlayerInput const*, PlayerConst const*, PlayerTrigger const*, bool);
calcUpperPunchReflectCeilingPower(PlayerTrigger const*, PlayerConst const*);
setupLongJumpVelocity(al::LiveActor*, IUsePlayerCollision const*, float, float, float, float, float);
calcJumpInertia(sead::Vector3<float>*, al::LiveActor*, IUsePlayerCollision const*, sead::Vector3<float> const&, float);
controlDirectionalVelocity(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, float, float, float, float, float);
slerpUpFront(al::LiveActor*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
slerpUp(al::LiveActor*, sead::Vector3<float> const&, float, float);
slerpSkyPoseAir(al::LiveActor*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
slerpSkyPoseAirSnapSide(al::LiveActor*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
slerpGroundStandFront(al::LiveActor*, IUsePlayerCollision const*, sead::Vector3<float> const&, float, float);
slerpGroundStand(al::LiveActor*, IUsePlayerCollision const*, float, float);
slerpGravity(al::LiveActor*, float);
slerpGravityVelH(al::LiveActor*, float);
calcOffsetAllRoot(sead::Vector3<float>*, PlayerModelHolder const*);
calcLocalOffsetAllRoot(sead::Vector3<float>*, PlayerModelHolder const*);
calcSpineSideDir(sead::Vector3<float>*, PlayerModelHolder const*);
startCenterJointControl(PlayerJointParamCenterDynamics*, al::LiveActor const*, IUsePlayerCollision const*, sead::Vector3<float> const&, bool);
isPlayerSideFaceToCameraZ(al::LiveActor const*);
tryCalcEffectMtxWaterIn(sead::Matrix34<float>*, float*, al::LiveActor const*, al::WaterSurfaceFinder const*, bool, float);
tryCalcEffectMtxDoubleCheckWaterIn(sead::Matrix34<float>*, float*, al::LiveActor const*, al::WaterSurfaceFinder const*, bool, float);
tryCalcEffectMtxWaterOut(sead::Matrix34<float>*, float*, al::LiveActor const*, al::WaterSurfaceFinder const*, bool, float);
tryCalcEffectMtxDoubleCheckWaterOut(sead::Matrix34<float>*, float*, al::LiveActor const*, al::WaterSurfaceFinder const*, bool, float);
validatePlayerGroundShadow(PlayerModelHolder const*);
invalidatePlayerGroundShadow(PlayerModelHolder const*);
setPlayerDirectionalShadowMaskTypeNone(PlayerModelHolder const*);
setPlayerDirectionalShadowMaskTypeSelf(PlayerModelHolder const*);
isTouchDeadCode(al::LiveActor const*, IUsePlayerCollision const*, IPlayerModelChanger const*, IUseDimension const*, float);
isTouchDeadCode3D(al::LiveActor const*, IUsePlayerCollision const*);
isTouchDamageCode(al::LiveActor const*, IUsePlayerCollision const*);
isTouchDamageFireCode(al::LiveActor const*, IUsePlayerCollision const*, IPlayerModelChanger const*);
isTouchDamageFireCode3D(al::LiveActor const*, IUsePlayerCollision const*);
isTouchJumpCode(al::LiveActor const*, IUsePlayerCollision const*);
requestReactionJumpCode(al::LiveActor const*, IUsePlayerCollision const*, al::HitSensor*);
requestReactionJumpCode(al::LiveActor const*, char const*, al::HitSensor*, al::HitSensor*);
calcExistCollisionBorder(al::IUseCollision const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcExistCollisionBorderWallCatch(al::IUseCollision const*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
cutVerticalVelocityGroundNormal(al::LiveActor*, IUsePlayerCollision const*);
brakeLandVelocityGroundNormal(al::LiveActor*, sead::Vector3<float>*, IUsePlayerCollision const*, sead::Vector3<float> const&, float, float);
calcSlideDir(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Vector3<float> const&);
trySlideVelocityOverGroundNormalAngle(al::LiveActor*, IUsePlayerCollision const*, float, float);
calcJumpInertiaWall(sead::Vector3<float>*, al::LiveActor*, IUsePlayerCollision const*, float);
scaleVelocityInertiaWallHit(al::LiveActor*, IUsePlayerCollision const*, float, float, float);
findWallEnablePush(al::LiveActor const*, IUsePlayerCollision const*, float, float);
findWallCatchPosWallHit(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float, float, float, float, float, float);
findWallCatchPos(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float, float, float, float, float);
findWallCatchMovePos(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float, float, float, float, float);
findWallClimbPos(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float, float, float, float, float);
judgeWallCatchClimb(al::LiveActor const*, IUsePlayerCollision const*, IUsePlayerCeilingCheck const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, bool, sead::Vector3<float> const&);
findYoshiWallPopUpPos(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float, float, float, float, float);
findPoleClimbStartPos(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, float*, al::LiveActor const*, al::CollisionParts const*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float);
findPoleClimbMovePos(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, float*, float*, char const**, bool*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float, float, float, float);
findPoleClimbTurnPos(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, float*, float*, char const**, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&, float, sead::Vector3<float> const&, float, float, float, float, float);
findPoleClimbFromTopPos(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, float*, float*, char const**, al::LiveActor const*, sead::Vector3<float> const&, float, float, float);
findGrabCeilPosWallHit(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float);
findGrabCeilPosNoWallHit(al::CollisionParts const**, sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float, float);
judgeEnableWallKeepHistory(al::LiveActor const*, PlayerWallActionHistory const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, bool);
isInPuddleHeight(al::WaterSurfaceFinder const*, IUsePlayerHeightCheck const*, float);
isUnderWaterSurface(al::WaterSurfaceFinder const*, IUsePlayerHeightCheck const*, float);
startHitReactionHipDropLand(al::LiveActor*, bool);
convergeOnGroundCount(int*, al::LiveActor const*, IUsePlayerCollision const*, int, int);
noticePlayerJumpStart(PlayerTrigger*, al::LiveActor const*);
tryFindSnapMoveAreaDir(sead::Vector3<float>*, al::LiveActor const*, IUsePlayerCollision const*);
calcSnapVelocitySnapMoveArea(sead::Vector3<float>*, al::LiveActor const*, IUsePlayerCollision const*, sead::Vector3<float> const&, float);
calcSnapVelocitySnapMoveAreaWithCutDir(sead::Vector3<float>*, al::LiveActor const*, IUsePlayerCollision const*, sead::Vector3<float> const&, float, sead::Vector3<float> const&);
calcSnapTransSnapMoveAreaNoCollider(sead::Vector3<float>*, al::LiveActor const*, bool, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
tryStartHeadSlidingLandSubAnim(PlayerAnimator*, PlayerTrigger const*, float, float);
tryEndHeadSlidingLandSubAnim(PlayerAnimator*, float);
tryCancelHeadSlidingLandSubAnim(PlayerAnimator*);
isSubAnimHeadSlidingLand(PlayerAnimator*);
tryStartHipDropCancelHeadSlidingSubAnim(PlayerAnimator*, float);
tryCancelHipDropCancelHeadSlidingSubAnim(PlayerAnimator*);
updateCollidedWallVibration(al::LiveActor*, IUsePlayerCollision const*, bool, char const*, float, float);
calcLookAtSensorTargetPos(sead::Vector3<float>*, al::HitSensor*);
tryCalcLookAtTargetInDistance(sead::Vector3<float>*, al::HitSensor*, sead::Vector3<float> const&, float);
moveInertiaSlide(sead::Vector3<float>*, al::LiveActor*, IUsePlayerCollision const*, sead::Vector3<float> const&, float, float, float, float, float, float, float);
moveInertiaSlideOnSkate(sead::Vector3<float>*, al::LiveActor*, IUsePlayerCollision const*, sead::Vector3<float> const&, float, float, float, float, float, float, float);
moveInertiaTurn(sead::Vector3<float>*, sead::Quat<float>*, al::LiveActor*, IUsePlayerCollision const*, sead::Vector3<float> const&, float, float, float, float, float);
moveDivingJump(al::LiveActor*, sead::Vector3<float> const&, float, float, float, float, float, float, float, float);
moveParallelJump(al::LiveActor*, sead::Vector3<float> const&, float, float, float, float, float, float, float);
moveDiveSwim(al::LiveActor*, float, float, float);
waitGround(al::LiveActor*, IUsePlayerCollision const*, float, float, float, float);
tryFollowRotateFrontAxisUpIfCollidedGround(al::LiveActor*, IUsePlayerCollision const*);
landGroundPoseAndSnap(al::LiveActor*, PlayerTrigger*, float*, IUsePlayerCollision const*, PlayerConst const*);
moveBrakeRun(float*, sead::Vector3<float>*, al::LiveActor*, PlayerActionGroundMoveControl*, float, int, float, float, float);
resetCollision(IUsePlayerCollision*);
resetCollisionPose(IUsePlayerCollision const*, sead::Quat<float> const&);
resetCollisionExpandCheck(IUsePlayerCollision*);
isCollided(IUsePlayerCollision const*);
isCollidedGround(IUsePlayerCollision const*);
isCollidedWall(IUsePlayerCollision const*);
isCollidedCeiling(IUsePlayerCollision const*);
isCollidedGroundFace(IUsePlayerCollision const*);
isCollidedWallFace(IUsePlayerCollision const*);
getCollidedGroundNormal(IUsePlayerCollision const*);
getCollidedWallNormal(IUsePlayerCollision const*);
getCollidedCeilingNormal(IUsePlayerCollision const*);
getCollidedGroundPos(IUsePlayerCollision const*);
getCollidedWallPos(IUsePlayerCollision const*);
getCollidedCeilingPos(IUsePlayerCollision const*);
getCollidedFixReaction(IUsePlayerCollision const*);
tryGetCollidedGroundSensor(IUsePlayerCollision const*);
tryGetCollidedWallSensor(IUsePlayerCollision const*);
tryGetCollidedCeilingSensor(IUsePlayerCollision const*);
getCollidedGroundCollisionParts(IUsePlayerCollision const*);
getCollidedWallCollisionParts(IUsePlayerCollision const*);
getCollidedCeilingCollisionParts(IUsePlayerCollision const*);
getGroundHitInfoNum(IUsePlayerCollision const*);
getGroundHitInfoNormal(IUsePlayerCollision const*, int);
getGroundHitInfoSensor(IUsePlayerCollision const*, int);
getGroundHitInfoCollisionParts(IUsePlayerCollision const*, int);
getWallHitInfoNum(IUsePlayerCollision const*);
getWallHitInfoNormal(IUsePlayerCollision const*, int);
getWallHitInfoSensor(IUsePlayerCollision const*, int);
getWallHitInfoCollisionParts(IUsePlayerCollision const*, int);
isExistCollidedGroundParts(IUsePlayerCollision const*, al::CollisionParts const*);
isCollisionCodePress(al::HitInfo const&);
isCollisionCodeGrabCeil(al::HitInfo const&);
isCollisionCodeDeadGround(IUsePlayerCollision const*);
isCollisionCodeDeadWall(IUsePlayerCollision const*);
isCollisionCodePoisonTouch(IUsePlayerCollision const*);
isCollisionCodeDead2dGround(IUsePlayerCollision const*);
isCollisionCodeDead2dCeiling(IUsePlayerCollision const*);
isCollisionCodeDamageGround(IUsePlayerCollision const*);
isCollisionCodeDamageWall(IUsePlayerCollision const*);
isCollisionCodeDamageCeiling(IUsePlayerCollision const*);
isCollisionCodeDamageFireGround(IUsePlayerCollision const*);
isCollisionCodeDamageFireWall(IUsePlayerCollision const*);
isCollisionCodeDamageFireCeiling(IUsePlayerCollision const*);
isCollisionCodeSandSink(IUsePlayerCollision const*);
isCollisionCodeSlide(IUsePlayerCollision const*);
isCollisionCodeJump(IUsePlayerCollision const*);
isCollisionCodeJumpSmall(IUsePlayerCollision const*);
isCollisionCodeBed(IUsePlayerCollision const*);
isCollisionCodeChair(IUsePlayerCollision const*);
isCollisionCodeGrabCeilAny(IUsePlayerCollision const*);
isCollisionCodeGrabCeilGrround(IUsePlayerCollision const*);
isCollisionCodeGrabCeilWall(IUsePlayerCollision const*);
isCollisionCodeGrabCeilCeiling(IUsePlayerCollision const*);
isCollisionCodePoleClimbAny(IUsePlayerCollision const*);
isCollisionCodePoleClimbGround(IUsePlayerCollision const*);
isCollisionCodePoleClimbWall(IUsePlayerCollision const*);
isCollisionCodePoleClimbCeiling(IUsePlayerCollision const*);
isCollisionCodePoleClimb(al::HitInfo const&);
isCollisionCodePole(al::Triangle const&);
isActionCodeNoWallKeepWall(IUsePlayerCollision const*);
isActionCodeNoActionGround(IUsePlayerCollision const*);
isActionCodeNoActionWall(IUsePlayerCollision const*);
isActionCodeNoActionCeiling(IUsePlayerCollision const*);
isActionCodeNoWallGrab(IUsePlayerCollision const*);
isActionCodeNoWallGrab(al::HitInfo const&);
isActionCodeNoWallPopUp(al::HitInfo const&);
isActionCodeNoTongueClingGround(IUsePlayerCollision const*);
isActionCodeNoTongueClingWall(IUsePlayerCollision const*);
getPoleCodeAngleOffsetGround(IUsePlayerCollision const*);
getPoleCodeAngleOffset(al::HitInfo const&);
getPoleCodeAngleOffsetWall(IUsePlayerCollision const*);
getPoleCodeAngleOffsetCeiling(IUsePlayerCollision const*);
getMaterialCodeGround(IUsePlayerCollision const*);
getMaterialCodeWall(IUsePlayerCollision const*);
getMaterialCodeCeiling(IUsePlayerCollision const*);
isRippleGenearateMaterialLawn(al::Triangle const&);
getRippleGenerateMaterialFlower();
isCollidedDamageCodeAnyWallHit(IUsePlayerCollision const*);
isEnableRecordSafetyPoint(sead::Vector3<float>**, al::HitInfo const&, al::HitSensor*, sead::Vector3<float> const&);
isCollisionCodeSafetyPoint(al::HitInfo const&);
calcCollisionCodeNoSafetyPointPos(sead::Vector3<float>*, bool*, al::LiveActor const*, IUsePlayerCollision const*);
calcActorCollisionCodeNoSafetyPointPos(sead::Vector3<float>*, bool*, al::LiveActor const*, IUsePlayerCollision const*);
calcCollidedGroundSafetyPoint(sead::Vector3<float>*, sead::Vector3<float>*, al::AreaObj const**, sead::Vector3<float>**, al::LiveActor const*, IUsePlayerCollision const*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
calcActorCollidedGroundSafetyPoint(sead::Vector3<float>*, sead::Vector3<float>*, al::AreaObj const**, sead::Vector3<float>**, al::LiveActor const*, al::HitSensor*, IUsePlayerCollision const*);
isJustLand(IUsePlayerCollision const*);
calcMovePowerGround(sead::Vector3<float>*, IUsePlayerCollision const*, sead::Vector3<float> const&);
calcMovePowerWall(sead::Vector3<float>*, IUsePlayerCollision const*, sead::Vector3<float> const&);
calcMovePowerCeiling(sead::Vector3<float>*, IUsePlayerCollision const*, sead::Vector3<float> const&);
isOnGround(al::LiveActor const*, IUsePlayerCollision const*);
isOnGroundAndGravity(al::LiveActor const*, IUsePlayerCollision const*);
isCollidedWallVelocity(al::LiveActor const*, IUsePlayerCollision const*);
isCollidedCeilingVelocity(al::LiveActor const*, IUsePlayerCollision const*);
calcCollidedNormalSum(sead::Vector3<float>*, IUsePlayerCollision const*);
reboundVelocityFromCollision(al::LiveActor*, IUsePlayerCollision const*, float, float, float);
reboundVelocityPart(al::LiveActor*, IUsePlayerCollision const*, float, float, float, float);
cutVectorCollision(sead::Vector3<float>*, IUsePlayerCollision const*, float);
isCollidedNoScaleVelocityWall(IUsePlayerCollision const*);
isCollidedGroundOverAngle(al::LiveActor const*, IUsePlayerCollision const*, float);
isCollidedGroundLessAngle(al::LiveActor const*, IUsePlayerCollision const*, float);
isCollidedGroundRunAngle(al::LiveActor const*, IUsePlayerCollision const*, PlayerConst const*);
isOnGroundRunAngle(al::LiveActor const*, IUsePlayerCollision const*, PlayerConst const*);
isOnGroundLessAngle(al::LiveActor const*, IUsePlayerCollision const*, float);
isLandGroundRunAngle(al::LiveActor const*, IUsePlayerCollision const*, PlayerConst const*);
isOnGroundSlopeSlideStart(al::LiveActor const*, IUsePlayerCollision const*, PlayerConst const*);
isOnGroundSlopeSlideEnd(al::LiveActor const*, IUsePlayerCollision const*, PlayerConst const*);
isOnGroundForceSlideCode(al::LiveActor const*, IUsePlayerCollision const*, PlayerConst const*);
isOnGroundForceRollingCode(al::LiveActor const*, IUsePlayerCollision const*);
isOnGroundSkateCode(al::LiveActor const*, IUsePlayerCollision const*);
isAutoRunOnGroundSkateCode(al::LiveActor const*, IUsePlayerCollision const*, float);
isPressedCollision(IUsePlayerCollision const*);
isPressedGround(IUsePlayerCollision const*);
isPressedWall(IUsePlayerCollision const*);
getPressCollisionNormal(IUsePlayerCollision const*);
getPressCollisionHitPos(IUsePlayerCollision const*);
setColliderFilterCollisionParts(IUsePlayerCollision*, al::CollisionPartsFilterBase const*);
createAndSetColliderFilterSpecialPurpose(IUsePlayerCollision*, char const*);
startHitReactionLandIfLanding(al::LiveActor const*, IUsePlayerCollision const*, bool);
startHitReactionLandJumpIfLanding(al::LiveActor const*, IUsePlayerCollision const*, bool);
startHitReactionLandRunIfLanding(al::LiveActor const*, IUsePlayerCollision const*, bool);
isAboveGround(IUsePlayerHeightCheck const*);
getGroundHeight(IUsePlayerHeightCheck const*);
updateCollider(al::LiveActor*, IUsePlayerCollision*, sead::Vector3<float> const&);
calcGroundHeight(float*, sead::Vector3<float>*, al::IUseCollision const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float, float);
startActionDemoPlayer(al::LiveActor const*, char const*);
isActionEndDemoPlayer(al::LiveActor const*);
setActionFrameRateDemoPlayer(al::LiveActor const*, float);
setActionFrameDemoPlayer(al::LiveActor const*, float);
clearDemoAnimInterpolatePlayer(al::LiveActor const*);
hideDemoPlayer(al::LiveActor const*);
showDemoPlayer(al::LiveActor const*);
hideDemoPlayerSilhouette(al::LiveActor const*);
showDemoPlayerSilhouette(al::LiveActor const*);
addDemoLockOnCap(al::LiveActor const*);
forcePutOnDemoCap(al::LiveActor const*);
forcePutOffMarioHeadCap(al::LiveActor const*);
hideDemoCap(al::LiveActor const*);
showDemoCap(al::LiveActor const*);
hideDemoCapSilhouette(al::LiveActor const*);
showDemoCapSilhouette(al::LiveActor const*);
killAllEffectPlayerAndCap(al::LiveActor const*);
getDemoPlayerTrans(al::LiveActor const*);
setDemoPlayerQuat(al::LiveActor const*, sead::Quat<float> const&);
getDemoPlayerQuat(al::LiveActor const*);
replaceDemoPlayer(al::LiveActor const*, sead::Vector3<float> const&, sead::Quat<float> const&);
validateIK(al::LiveActor const*);
invalidateIK(al::LiveActor const*);
validateWatchTarget(al::LiveActor const*, sead::Vector3<float> const&);
invalidateWatchTarget(al::LiveActor const*);
hideDemoPlayerAndStartDemoResetAction(al::LiveActor const*);
calcDemoMarioJointPosAllRoot(sead::Vector3<float>*, al::LiveActor const*);
invalidateMarioDitherFrame(al::LiveActor const*, int);
startMarioCapEyeAction(al::LiveActor const*, char const*);
killMarioCapEye(al::LiveActor const*);
startMarioRightHandAction(al::LiveActor const*, char const*);
getMarioActionFrameMax(al::LiveActor const*);
hideMarioGroundDepthShadow(al::LiveActor const*);
showMarioGroundDepthShadow(al::LiveActor const*);
setMarioGroundDepthShadowMapLength(al::LiveActor const*, float);
changeMarioDepthShadowMapSizeHight(al::LiveActor const*);
changeMarioDepthShadowMapSizeNormal(al::LiveActor const*);
setMarioDirectionalShadowMaskTypeNone(al::LiveActor const*);
setMarioDirectionalShadowMaskTypeSelf(al::LiveActor const*);
resetMarioDynamics(al::LiveActor const*);
keepMarioCapVisibilityEndDemo(al::LiveActor const*);
clearMarioFootPrint(al::LiveActor const*);
createCapTargetInfo(al::LiveActor*, char const*);
createCapTargetInfoWithPlayerCollider(al::LiveActor*, IUsePlayerCollision*, char const*);
createCapTargetInfoHackMapParts(al::LiveActor*);
createCapTargetInfoLockOnOnlyNoArchive(al::LiveActor*, sead::Matrix34<float> const*);
requestLockOnCapHitReaction(al::LiveActor const*, CapTargetInfo const*, char const*);
startHack(al::HitSensor*, al::HitSensor*, al::LiveActor*);
endHack(IUsePlayerHack**);
endHackDir(IUsePlayerHack**, sead::Vector3<float> const&);
endHackTargetQuat(IUsePlayerHack**, sead::Quat<float> const&, sead::Vector3<float> const&);
endHackFromTargetPos(IUsePlayerHack**, sead::Vector3<float> const&);
endHackFromTargetPos(IUsePlayerHack**, sead::Vector3<float> const&, sead::Vector3<float> const&);
endHackFromTargetPos(IUsePlayerHack**, sead::Vector3<float> const&, sead::Quat<float> const&, sead::Vector3<float> const&);
endHackWithDamage(IUsePlayerHack**);
endHackWithDamageAndVelocity(IUsePlayerHack**, sead::Vector3<float> const&);
endHackEscapeScale(IUsePlayerHack**, float);
endHackDirEscapeScale(IUsePlayerHack**, sead::Vector3<float> const&, float);
endHackDirEscapeScalePose(IUsePlayerHack**, sead::Quat<float> const&, sead::Vector3<float> const&, float);
endHackAirVelocity(IUsePlayerHack**, sead::Vector3<float> const&, sead::Quat<float> const&, sead::Vector3<float> const&, int);
endHackElectricWireToDestination(IUsePlayerHack**, sead::Vector3<float> const&, sead::Vector3<float> const&);
endHackFastenerToDestination(IUsePlayerHack**, sead::Vector3<float> const&, sead::Vector3<float> const&);
endHackBazookaElectricToDestination(IUsePlayerHack**, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Quat<float> const&, int, float);
endHackThrowed(IUsePlayerHack**, sead::Vector3<float> const&);
requestDamage(IUsePlayerHack*);
syncDamageVisibility(al::LiveActor*, IUsePlayerHack const*);
isDamageVisibilityHide(IUsePlayerHack const*);
isTouchHackCancelCollisionCode(al::LiveActor const*, IUsePlayerCollision const*);
isTouchHackDamageCollisionCode(al::LiveActor const*, IUsePlayerCollision const*);
updateMaterialCode(al::LiveActor*, IUsePlayerCollision const*);
startHackStartDemo(IUsePlayerHack*, al::LiveActor*);
startHackStartDemoPuppetable(IUsePlayerHack*, al::LiveActor*);
addHackStartDemoActor(IUsePlayerHack*, al::LiveActor*);
endHackStartDemo(IUsePlayerHack*, al::LiveActor*);
tryEndHackStartDemo(IUsePlayerHack*, al::LiveActor*);
isActiveHackStartDemo(IUsePlayerHack const*);
isHackStartDemoEnterMario(IUsePlayerHack const*);
isHackerStopMove(al::LiveActor const*, IUsePlayerHack const*, float);
isHackerStopMoveGround(al::LiveActor const*, IUsePlayerHack const*, float, IUsePlayerCollision const*);
sendMsgHackerNoReaction(IUsePlayerHack const*, al::HitSensor*, al::HitSensor*);
sendMsgHackerNoReactionWithoutShine(IUsePlayerHack const*, al::HitSensor*, al::HitSensor*);
isMsgHackerDamageAndCancel(al::SensorMsg const*);
isMsgEnableMapCheckPointWarpCollidedGround(al::SensorMsg const*, al::LiveActor const*);
isMsgEnableMapCheckPointWarpCollidedGround(al::SensorMsg const*, IUsePlayerCollision const*);
receiveMsgRequestTransferHack(al::SensorMsg const*, IUsePlayerHack*, al::HitSensor*);
hideHackCap(IUsePlayerHack*);
showHackCap(IUsePlayerHack*);
hideShadowHackCap(IUsePlayerHack*);
isHackCapSeparateFlying(IUsePlayerHack*);
calcGroundHeightHackerDepthShadowMapLength(al::LiveActor*, IUsePlayerHack const*, sead::Vector3<float> const&, float, float);
cutGroundHeightHackerDepthShadowMapLength(al::LiveActor*, IUsePlayerHack const*, char const*, sead::Vector3<float> const&, float, float);
checkExistHeightSpaceAboveGround(float*, IUsePlayerHack const*, float);
requestRecoverySafetyPoint(IUsePlayerHack*, sead::Vector3<float> const&, sead::Vector3<float> const&);
trySnapTransToSnapMoveArea(al::LiveActor*, bool, sead::Vector3<float> const&, float);
updateHackActorVisibilityBySeparatePlay(al::LiveActor*, IUsePlayerHack*, char const*, char const*);
startReset(al::LiveActor*);
endReset(al::LiveActor*);
calcHackerMoveVec(sead::Vector3<float>*, IUsePlayerHack const*, sead::Vector3<float> const&);
calcHackerMoveDir(sead::Vector3<float>*, IUsePlayerHack const*, sead::Vector3<float> const&);
calcHackerWallInputVec(sead::Vector3<float>*, sead::Vector3<float>*, IUsePlayerHack const*, sead::Vector3<float> const&);
calcHackerWallInputVec(sead::Vector3<float>*, sead::Vector3<float>*, sead::Vector2<float> const&, sead::Vector3<float> const&);
getHackMoveStickRaw(IUsePlayerHack const*);
calcHackerWallInputDir(sead::Vector3<float>*, sead::Vector3<float>*, IUsePlayerHack const*, sead::Vector3<float> const&);
addHackActorAccelStick(al::LiveActor*, IUsePlayerHack const*, sead::Vector3<float>*, float, sead::Vector3<float> const&);
calcHackMovePower(IUsePlayerHack const*);
checkHackerMoveDir(IUsePlayerHack const*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
calcHackerTrampleJumpParam(float*, float*, int*, al::LiveActor*, IUsePlayerHack const*, float, float, float, float, float, int, float, float, float, float, float);
isOnHackMoveStick(IUsePlayerHack const*);
isHoldHackJump(IUsePlayerHack const*);
isOnHackMoveStickDeepDown(IUsePlayerHack const*);
isOnHackMoveStickGreater(IUsePlayerHack const*, float);
isTriggerHackAction(IUsePlayerHack const*);
isTriggerHackPreInputAction(IUsePlayerHack const*);
isHoldHackAction(IUsePlayerHack const*);
isReleaseHackAction(IUsePlayerHack const*);
isTriggerHackJump(IUsePlayerHack const*);
isTriggerHackPreInputJump(IUsePlayerHack const*);
isReleaseHackJump(IUsePlayerHack const*);
isTriggerHackAnyButton(IUsePlayerHack const*);
isTriggerHackPreInputAnyButton(IUsePlayerHack const*);
isHoldHackAnyButton(IUsePlayerHack const*);
isReleaseHackAnyButton(IUsePlayerHack const*);
isTriggerHackSeparateJump(IUsePlayerHack const*);
isHoldHackSeparateJump(IUsePlayerHack const*);
getHackStickRotateSpeed(IUsePlayerHack const*);
isTriggerHackSwing(IUsePlayerHack const*);
isTriggerHackSwingDirLeft(IUsePlayerHack const*);
isTriggerHackSwingDirRight(IUsePlayerHack const*);
isTriggerHackSwingDoubleHand(IUsePlayerHack const*);
isTriggerHackSwingDoubleHandReverseDir(IUsePlayerHack const*);
isTriggerHackSwingDoubleHandReverseInsideDir(IUsePlayerHack const*);
isTriggerHackSwingDoubleHandReverseOutsideDir(IUsePlayerHack const*);
getHackPoseRotZDegreeLeft(IUsePlayerHack const*);
getHackPoseRotZDegreeRight(IUsePlayerHack const*);
isTriggerTankCameraReset(IUsePlayerHack const*);
isTriggerHackSwingLeftHand(IUsePlayerHack const*);
isTriggerHackSwingRightHand(IUsePlayerHack const*);
getHackSwingThrowDir(IUsePlayerHack const*);
getHackSwingLeftHandDir(IUsePlayerHack const*);
getHackSwingRightHandDir(IUsePlayerHack const*);
getHackSwingVelLeftHand(IUsePlayerHack const*);
getHackSwingVelRightHand(IUsePlayerHack const*);
getHackCameraStickRaw(IUsePlayerHack const*);
getRadiconInputSteeringValue(IUsePlayerHack const*);
getRadiconInputThrottleValue(IUsePlayerHack const*);
isTriggerRecorderPlay(IUsePlayerHack const*);
isTriggerRecorderReverse(IUsePlayerHack const*);
isHoldRecorderPlay(IUsePlayerHack const*);
isHoldRecorderReverse(IUsePlayerHack const*);
isTriggerRecorderJump(IUsePlayerHack const*);
isTriggerRecorderCancel(IUsePlayerHack const*);
getHackGemyLeftStickRaw();
getHackGemyRightStickRaw();
isTriggerGemyResetCamera(IUsePlayerHack const*);
isTriggerGemyChangeCamera(IUsePlayerHack const*);
isTriggerSubjectiveCamera(IUsePlayerHack const*);
isTriggerFlutter(IUsePlayerHack const*, float);
isTriggerFukankunZoomOn(IUsePlayerHack const*);
isTriggerFukankunZoomOff(IUsePlayerHack const*);
isHoldFukankunZoom(IUsePlayerHack const*);
getPoleJumpPadPoseMtx(sead::Matrix33<float>*);
getPoleJumpPadAcceleration(sead::Vector3<float>*);
isTriggerIceClimberClimbLeft(IUsePlayerHack const*);
isTriggerIceClimberClimbRight(IUsePlayerHack const*);
isTriggerIceClimberFall(IUsePlayerHack const*);
startPuppet(al::HitSensor*, al::HitSensor*);
endBindAndPuppetNull(IUsePlayerPuppet**);
endBindOnGroundAndPuppetNull(IUsePlayerPuppet**);
endBindJumpAndPuppetNull(IUsePlayerPuppet**, sead::Vector3<float> const&, int);
endBindWallJumpAndPuppetNull(IUsePlayerPuppet**, sead::Vector3<float> const&, int);
endBindCapThrow(IUsePlayerPuppet**);
tryReceiveBindCancelMsgAndPuppetNull(IUsePlayerPuppet**, al::SensorMsg const*);
setPuppetTrans(IUsePlayerPuppet*, sead::Vector3<float> const&);
setPuppetVelocity(IUsePlayerPuppet*, sead::Vector3<float> const&);
setPuppetFront(IUsePlayerPuppet*, sead::Vector3<float> const&);
calcPuppetUp(sead::Vector3<float>*, IUsePlayerPuppet const*);
setPuppetUp(IUsePlayerPuppet*, sead::Vector3<float> const&);
calcPuppetFront(sead::Vector3<float>*, IUsePlayerPuppet const*);
setPuppetQuat(IUsePlayerPuppet*, sead::Quat<float> const&);
resetPuppetPosition(IUsePlayerPuppet*, sead::Vector3<float> const&);
addPuppetVelocityFall(IUsePlayerPuppet*);
getPuppetGravity(IUsePlayerPuppet const*);
getPuppetVelocity(IUsePlayerPuppet const*);
getPuppetTrans(IUsePlayerPuppet const*);
calcPuppetQuat(sead::Quat<float>*, IUsePlayerPuppet const*);
startPuppetAction(IUsePlayerPuppet*, char const*);
isPuppetActionEnd(IUsePlayerPuppet const*);
isPuppetActionPlaying(IUsePlayerPuppet const*, char const*);
setPuppetAnimRate(IUsePlayerPuppet*, float);
setPuppetAnimBlendWeight(IUsePlayerPuppet*, float, float, float, float, float, float);
getPuppetAnimFrameMax(IUsePlayerPuppet const*);
startPuppetHitReactionLand(IUsePlayerPuppet*);
hidePuppet(IUsePlayerPuppet*);
showPuppet(IUsePlayerPuppet*);
isPuppetHidden(IUsePlayerPuppet const*);
syncPuppetVisibility(al::LiveActor*, IUsePlayerPuppet const*);
hidePuppetSilhouette(IUsePlayerPuppet*);
showPuppetSilhouette(IUsePlayerPuppet*);
hidePuppetShadow(IUsePlayerPuppet*);
showPuppetShadow(IUsePlayerPuppet*);
validatePuppetSensor(IUsePlayerPuppet*);
invalidatePuppetSensor(IUsePlayerPuppet*);
invalidatePuppetCollider(IUsePlayerPuppet*);
isCollidedPuppetGround(IUsePlayerPuppet*);
getCollidedPuppetGroundNormal(IUsePlayerPuppet*);
validatePuppetCollider(IUsePlayerPuppet*);
requestDamage(IUsePlayerPuppet*);
clearStainEffect(IUsePlayerPuppet*);
copyPuppetDitherAlpha(IUsePlayerPuppet*, al::LiveActor const*);
validatePuppetLookAt(IUsePlayerPuppet*);
invalidatePuppetLookAt(IUsePlayerPuppet*);
validatePuppetForceLookAt(IUsePlayerPuppet*, sead::Vector3<float> const&);
invalidatePuppetForceLookAt(IUsePlayerPuppet*);
validatePuppetSeparateMode(IUsePlayerPuppet*);
invalidatePuppetSeparateMode(IUsePlayerPuppet*);
validatePuppetReceivePush(IUsePlayerPuppet*);
invalidatePuppetReceivePush(IUsePlayerPuppet*);
forcePutOnPuppetCap(IUsePlayerPuppet*);
forcePutOnPuppetCapWithEffect(IUsePlayerPuppet*);
setForceRunAfterEndBind(IUsePlayerPuppet*, int, float);
validateRecoveryArea(IUsePlayerPuppet*);
invalidateRecoveryArea(IUsePlayerPuppet*);
validateGuideArrow(IUsePlayerPuppet*);
invalidateGuideArrow(IUsePlayerPuppet*);
validateWaterSurfaceShadow(IUsePlayerPuppet*);
invalidateWaterSurfaceShadow(IUsePlayerPuppet*);
isPuppetInputCapThrow(IUsePlayerPuppet const*);
isPuppetInputSwing(IUsePlayerPuppet const*);
initBindKeepDemoInfo();
isActiveBindKeepDemo(BindKeepDemoInfo const*);
tryStartBindKeepDemo(BindKeepDemoInfo*, al::SensorMsg const*, IUsePlayerPuppet const*);
tryEndBindKeepDemo(BindKeepDemoInfo*, al::SensorMsg const*, IUsePlayerPuppet*);
isPuppetTrigJumpButton(IUsePlayerPuppet const*);
isPuppetHoldJumpButton(IUsePlayerPuppet const*);
isPuppetTrigActionButton(IUsePlayerPuppet const*);
isPuppetHoldActionButton(IUsePlayerPuppet const*);
isPuppetTriggerAnyButton(IUsePlayerPuppet const*);
isPuppetHoldAnyButton(IUsePlayerPuppet const*);
isPuppetMoveStickOn(IUsePlayerPuppet const*);
isPuppetStartWorldWarp(IUsePlayerPuppet const*);
isPuppetCancelWorldWarp(IUsePlayerPuppet const*);
getPuppetMoveStick(IUsePlayerPuppet const*);
isTriggerGetOff(IUsePlayerPuppet const*);
getPuppetPoseRotZDegreeLeft(IUsePlayerPuppet const*);
getPuppetPoseRotZDegreeRight(IUsePlayerPuppet const*);
requestUpdateSafetyPoint(IUsePlayerPuppet*, al::LiveActor const*, IUsePlayerCollision const*);
requestForceSafetyPoint(IUsePlayerPuppet*, sead::Vector3<float> const&, sead::Vector3<float> const&);
initPlayerActorInfo(PlayerActorBase*, PlayerInitInfo const&);
getInitPlayerModelName(PlayerInitInfo const&);
isNeedCreateNoseNeedle(PlayerInitInfo const&);
isClosetScenePlayer(PlayerInitInfo const&);
getGamePadSystem(PlayerInitInfo const&);
getInitCapTypeName(PlayerInitInfo const&);
createPlayerSklRetargettingInfo(al::LiveActor*, sead::Vector3<float> const&);
getPlayerPos(al::LiveActor const*);
getPlayerHeadPos(al::LiveActor const*);
getPlayerBodyPos(al::LiveActor const*);
calcPlayerSideDir(sead::Vector3<float>*, al::LiveActor const*);
calcPlayerUpDir(sead::Vector3<float>*, al::LiveActor const*);
calcPlayerFrontDir(sead::Vector3<float>*, al::LiveActor const*);
calcPlayerGroundPoseUp(sead::Vector3<float>*, al::LiveActor const*);
isNearPlayerH(al::LiveActor const*, float);
calcPlayerFollowLayoutWorldPos(sead::Vector3<float>*, al::LiveActor const*);
isPlayerHack(al::LiveActor const*);
tryCalcPlayerCeilingSpace(float*, al::LiveActor const*, float, float);
tryCalcKidsGuideCeilingSpace(float*, al::LiveActor const*, float, float);
getPlayerVelocity(al::LiveActor const*);
tryCalcPlayerModelHeadJointPos(sead::Vector3<float>*, al::LiveActor const*);
tryCalcPlayerModelHeadJointUp(sead::Vector3<float>*, al::LiveActor const*);
tryCalcPlayerModelHeadJointFront(sead::Vector3<float>*, al::LiveActor const*);
tryCalcPlayerModelHeadJointSide(sead::Vector3<float>*, al::LiveActor const*);
tryCalcPlayerModelNoseJointMtx(sead::Matrix34<float>*, al::LiveActor const*);
isPlayerDamageStopDemo(al::LiveActor const*);
isPlayerHackType(al::LiveActor const*, int);
isPlayerHackRigidBody(al::LiveActor const*);
isPlayerHackJugemFishing(al::LiveActor const*);
isPlayerHackKuriboAny(al::LiveActor const*);
isPlayerHackKuribo(al::LiveActor const*);
isPlayerHackKuriboWing(al::LiveActor const*);
isPlayerHackStatueMario(al::LiveActor const*);
isPlayerHackEnemy(al::LiveActor const*);
isPlayerHackTrilemmaRock(al::LiveActor const*);
isPlayerHackTrilemmaPaper(al::LiveActor const*);
isPlayerHackTrilemmaScissors(al::LiveActor const*);
isPlayerHackElectricWire(al::LiveActor const*);
isPlayerHackTRex(al::LiveActor const*);
isPlayerHackFukankun(al::LiveActor const*);
isPlayerHackHosui(al::LiveActor const*);
isPlayerHackYoshi(al::LiveActor const*);
isPlayerHackYukimaru(al::LiveActor const*);
isPlayerHackHammerBros(al::LiveActor const*);
isPlayerHackBazookaElectric(al::LiveActor const*);
isPlayerHackBubble(al::LiveActor const*);
isPlayerHackTank(al::LiveActor const*);
isPlayerHackTsukkun(al::LiveActor const*);
isPlayerHackPukupuku(al::LiveActor const*);
isPlayerHackPukupukuAll(al::LiveActor const*);
isPlayerHackRadiconNpc(al::LiveActor const*);
isPlayerHackSenobi(al::LiveActor const*);
isPlayerHackKakku(al::LiveActor const*);
isPlayerHackGroupTalkScare(al::LiveActor const*);
isPlayerHackGroupUseCameraStick(al::LiveActor const*);
isPlayerHackNoSeparateCameraInput(al::LiveActor const*);
isPlayerEnableToSeeOddSpace(al::LiveActor const*);
isPlayerMini(al::LiveActor const*);
isPlayer3D(al::LiveActor const*);
isPlayer2D(al::LiveActor const*);
isPlayerSquat(al::LiveActor const*);
isPlayerInWater(al::LiveActor const*);
isPlayerPoleClimb(al::LiveActor const*);
isPlayerWallCatch(al::LiveActor const*);
isPlayerCameraSubjective(al::LiveActor const*);
isPlayerEnableTalkGround(al::LiveActor const*);
isPlayerEnableTalkSwim(al::LiveActor const*);
isPlayerBinding(al::LiveActor const*);
isPlayerEquipSomething(al::LiveActor const*);
isPlayerEquipRocketFlower(al::LiveActor const*);
isPlayerEquipNoSeparateAction(al::LiveActor const*);
isPlayerCarrySomething(al::LiveActor const*);
isPlayerNoInput(al::LiveActor const*);
isPlayerEnableShowTutorialInput(al::LiveActor const*);
isPlayerSafetyPointRecovery(al::LiveActor const*);
isPlayerPlayingSwitchOnAnim(al::LiveActor const*);
isPlayerEquipNoSeparateTutorial(al::LiveActor const*);
isPlayerWaitSleep(al::LiveActor const*);
isPlayerAboveSeparateCapGuideArrow(al::LiveActor const*);
isPlayerInvalidateGuideArrow(al::LiveActor const*);
isPlayerInvisibleCap(al::LiveActor const*);
isPlayerEnablePeachAmiibo(al::LiveActor const*);
isPlayerActiveMarioAmiiboInvincible(al::LiveActor const*);
isPlayerCollidedGround(al::LiveActor const*);
isPlayerCollidedCeiling(al::LiveActor const*);
isPlayerOnGround(al::LiveActor const*);
isPlayerOnActor(al::LiveActor const*);
isPlayerOnChairActor(al::LiveActor const*);
isPlayerOnBedActor(al::LiveActor const*);
isPlayerFaceToTarget(al::LiveActor const*, sead::Vector3<float> const&);
isPlayerFaceToTarget(al::LiveActor const*);
isPlayerFaceToTargetInRange(al::LiveActor const*, sead::Vector3<float> const&, float);
isPlayerFaceToTargetInRange(al::LiveActor const*, float);
tryGetFlyingCapPos(sead::Vector3<float>*, al::LiveActor const*);
tryGetFlyingCapVelocity(sead::Vector3<float>*, al::LiveActor const*);
isEnableReceiveCapStartLockOnAngle(al::LiveActor const*, al::HitSensor const*);
isGuardNosePainCap(al::LiveActor const*);
isEquipCapCatched(al::LiveActor const*);
getFlyingCapThrowSpeedMax(al::LiveActor const*);
isPlayerCapSpinOrFlying(al::LiveActor const*);
isPlayerCapFlying(al::LiveActor const*);
isPlayerCapSeparateThrow(al::LiveActor const*);
isEmptyPlayerOxygen(al::LiveActor const*);
recoveryPlayerOxygen(al::LiveActor const*);
requestBindPlayer(al::LiveActor const*, al::HitSensor*);
sendMsgBreakFloorToPlayer(al::LiveActor const*);
requestStageStartHack(al::LiveActor const*, al::HitSensor*, CapTargetInfo const*, al::LiveActor*);
isEnableOpenMap(al::LiveActor const*);
syncPlayerModelAlpha(al::LiveActor*);
getPlayerShadowDropLength(al::LiveActor const*);
isExistLabelInPlayerHackSystemMstxt(al::LiveActor const*, al::IUseMessageSystem const*, char const*, char const*);
getPlayerHackSystemMessageString(al::LiveActor const*, al::IUseMessageSystem const*, char const*, char const*);
getPlayerHackTutorialMoviePath(al::StringTmp<64>*, al::LiveActor const*, char const*);
calcPlayerAmiiboPeachAppearBasePos(sead::Vector3<float>*, al::LiveActor const*);
isPlayerInputHoldBalloonSet(al::LiveActor const*);
isPlayerInputHoldSquat(al::LiveActor const*);
isPlayerInputHoldCapKeepLockOn(al::LiveActor const*);
isPlayerInputHoldCarryAction(al::LiveActor const*);
isPlayerInputHoldEnterUpperDokan2D(al::LiveActor const*);
isPlayerInputHoldEnterSideDokan2D(al::LiveActor const*, sead::Vector3<float> const&);
isPlayerInputTriggerStartTalk(al::LiveActor const*);
isPlayerInputTriggerRide(al::LiveActor const*);
isPlayerInputTriggerSeparateCapJangoHelp(al::LiveActor const*);
tryGetPlayerInputWallAlongWallNormal(sead::Vector3<float>*, al::LiveActor const*);
calcPlayerHoldPos(sead::Vector3<float>*, al::HitSensor const*);
calcPlayerHoldMtx(sead::Matrix34<float>*, al::HitSensor const*);
setPlayerHoldJointAngle(al::HitSensor const*, sead::Vector3<float> const&);
updatePosePlayerHold(al::LiveActor*, al::HitSensor const*);
updatePosePlayerHoldAddOffset(al::LiveActor*, al::HitSensor const*, sead::Vector3<float> const&);
calcPlayerGuideOffsetY(al::LiveActor const*);
isEnablePlayerHeadGuide(al::LiveActor const*);
calcPlayerGuidePos(sead::Vector3<float>*, al::LiveActor const*);
calcPlayerGuidePos(sead::Vector3<float>*, al::LiveActor const*, float);
trySavePrepoCompleteMainScenario(int, int, long, long, long);
trySavePrepoStartStage(char const*, sead::Vector3<float> const&, long, long, long);
trySavePrepoExitStage(char const*, sead::Vector3<float> const&, long, long, long);
trySavePrepoMissEvent(char const*, sead::Vector3<float> const&, long, long, long);
trySavePrepoShineGetEvent(char const*, int, int, int, long, long, long);
trySavePrepoReceiveAchievement(char const*, int, long, long, long);
trySavePrepoAchievementProgress(GameDataHolderAccessor, long, long, long);
trySavePrepoGetCapEvent(char const*, int, long, long, long);
trySavePrepoGetClothEvent(char const*, int, long, long, long);
trySavePrepoGetGiftEvent(char const*, int, long, long, long);
trySavePrepoGetStickerEvent(char const*, int, long, long, long);
trySavePrepoChangeCapEvent(char const*, long, long, long);
trySavePrepoChangeClothEvent(char const*, long, long, long);
trySavePrepoFirstHackEvent(char const*, int, long, long, long);
trySavePrepoGetCollectBgmEvent(char const*, char const*, bool, int, long, long, long);
trySavePrepoSettingsState(bool, char const*, GameConfigData const&, long, long);
trySavePrepoSeparatePlayMode(bool, long, long, long);
isSeparatePlay(al::IUseSceneObjHolder const*);
changeSeparatePlayMode(al::Scene*, bool);
setSeparatePlayMode(al::Scene*, bool);
isTriggerUiDecide(al::IUseSceneObjHolder const*);
isTriggerUiDecide(GameDataHolder const*);
isTriggerUiCancel(al::IUseSceneObjHolder const*);
isTriggerUiSelect(al::IUseSceneObjHolder const*);
isTriggerUiPause(al::IUseSceneObjHolder const*);
isTriggerUiLeft(al::IUseSceneObjHolder const*);
isTriggerUiRight(al::IUseSceneObjHolder const*);
isTriggerUiUp(al::IUseSceneObjHolder const*);
isTriggerUiDown(al::IUseSceneObjHolder const*);
isTriggerUiR(al::IUseSceneObjHolder const*);
isTriggerUiL(al::IUseSceneObjHolder const*);
isTriggerUiZR(al::IUseSceneObjHolder const*);
isTriggerUiZL(al::IUseSceneObjHolder const*);
isTriggerUiX(al::IUseSceneObjHolder const*);
isTriggerUiY(al::IUseSceneObjHolder const*);
isTriggerUiAnyABXY(al::IUseSceneObjHolder const*);
isRepeatUiUp(al::IUseSceneObjHolder const*);
isRepeatUiDown(al::IUseSceneObjHolder const*);
isRepeatUiRight(al::IUseSceneObjHolder const*);
isRepeatUiLeft(al::IUseSceneObjHolder const*);
isHoldUiDecide(al::IUseSceneObjHolder const*);
isHoldUiCancel(al::IUseSceneObjHolder const*);
isHoldUiSelect(al::IUseSceneObjHolder const*);
isHoldUiL(al::IUseSceneObjHolder const*);
isHoldUiR(al::IUseSceneObjHolder const*);
isHoldUiY(al::IUseSceneObjHolder const*);
isHoldUiUp(al::IUseSceneObjHolder const*);
isHoldUiDown(al::IUseSceneObjHolder const*);
isHoldUiLeft(al::IUseSceneObjHolder const*);
isHoldUiRight(al::IUseSceneObjHolder const*);
isHoldSeparatePlayStart1P(al::IUseSceneObjHolder const*);
isHoldSeparatePlayStart2P(al::IUseSceneObjHolder const*);
isTriggerMapOpen(al::IUseSceneObjHolder const*);
isHoldSeparatePlayEnd(al::IUseSceneObjHolder const*);
getUiLeftStick(al::IUseSceneObjHolder const*);
getUiRightStick(al::IUseSceneObjHolder const*);
isTriggerMapClose(al::IUseSceneObjHolder const*);
isTriggerCollectionListOpenInMap(al::IUseSceneObjHolder const*);
isTriggerCollectionListCloseInMap(al::IUseSceneObjHolder const*);
isTriggerAppearSkipGuide(al::IUseSceneObjHolder const*);
isTriggerUiRacePause(al::IUseSceneObjHolder const*);
isTriggerSnapShotMode(al::IUseSceneObjHolder const*);
isTriggerAmiiboMode(al::IUseSceneObjHolder const*);
isHoldAmiiboMode(al::IUseSceneObjHolder const*);
isTriggerToggleSnapShotModeLayout(al::IUseSceneObjHolder const*);
isTriggerAppearSnapShotLayout(al::IUseSceneObjHolder const*);
isTriggerIncrementPostProcessingFilterPreset(al::IUseSceneObjHolder const*);
isTriggerDecrementPostProcessingFilterPreset(al::IUseSceneObjHolder const*);
recordGamePadPlayStyleInfo(GamePadPlayStyleInfo*, al::LiveActor const*);
recordGamePadPlayStyleInfo(GamePadPlayStyleInfo*, al::LayoutActor const*);
tryUpdateGamePadPlayStyleInfo(GamePadPlayStyleInfo*, al::LiveActor const*);
tryUpdateGamePadPlayStyleInfo(GamePadPlayStyleInfo*, al::LayoutActor const*);
searchNpcMessage(al::ActorInitInfo const&, al::LayoutActor const*);
makeActorMessageLabel(sead::BufferedSafeStringBase<char>*, al::ActorInitInfo const&, char const*);
makeMessageLabel(sead::BufferedSafeStringBase<char>*, al::PlacementInfo const&, char const*);
makeMessageLabel(sead::BufferedSafeStringBase<char>*, al::PlacementId const*, char const*);
setPaneStageMessageActorLabel(al::LayoutActor*, char const*, al::ActorInitInfo const&, char const*);
trySetPaneStageMessageIfExist(al::LayoutActor*, char const*, char const*, char const*);
getPlacementStageName(GameDataHolderAccessor, al::ActorInitInfo const&);
getStageMessageActorLabel(al::LayoutActor*, al::ActorInitInfo const&, char const*);
isExistLabelInSystemMessageWithFileName(al::IUseMessageSystem const*, char const*, char const*);
isExistLabelInStageMessageWithFileName(al::IUseMessageSystem const*, char const*, char const*);
trySetPaneSystemMessageIfExist(al::LayoutActor*, char const*, char const*, char const*);
trySetPaneStringCheckpointName(al::LayoutActor*, char const*, int, char const*);
getCheckpointLabelPrefix();
setPaneStringWorldNameForWorldMap(al::LayoutActor*, char const*, int);
setPaneStringWorldNameForWorldMapWithoutRuby(al::LayoutActor*, char const*, int);
setRaceRecordMessage(al::LayoutActor*, char const*, int);
setRaceRecordMessageCsec(al::LayoutActor*, char const*, int);
replaceRaceRecordMessageCsec(al::LayoutActor*, char const*, int, char16_t const*, char const*);
setRaceNoRecordMessage(al::LayoutActor*, char const*);
setMiniGameNoCountMessage(al::LayoutActor*, char const*);
getWorldShinePictureFont(al::LayoutActor const*, int, bool);
getNullShinePictureFont(al::LayoutActor const*);
getWorldCoinCollectPictureFont(al::LayoutActor const*, int);
getWorldCoinCollectPictureFont(al::LayoutActor const*);
getPlacementStageName(GameDataHolderAccessor, al::PlacementInfo const&);
getCollectBgmMessage(al::IUseMessageSystem const*, CollectBgm const*);
setPaneCurrentCoinNum(al::LayoutActor*);
tryGetMapMainScenarioLabel(sead::BufferedSafeStringBase<char>*, sead::BufferedSafeStringBase<char>*, bool*, al::IUseSceneObjHolder const*);
sendMsgAckCheckpoint(al::HitSensor*, al::HitSensor*);
sendMsgAckGetShine(al::HitSensor*, al::HitSensor*);
sendMsgAckLifeUp(al::HitSensor*, al::HitSensor*);
sendMsgAckLifeMaxUp(al::HitSensor*, al::HitSensor*);
sendMsgAskRailCollision(al::HitSensor*, al::HitSensor*);
sendMsgBreakPartsBreak(al::HitSensor*, al::HitSensor*);
sendMsgBirdFlyAway(al::HitSensor*, al::HitSensor*);
sendMsgCameraAngleElevationResetFast(al::HitSensor*, al::HitSensor*);
sendMsgChorobonAttack(al::HitSensor*, al::HitSensor*);
sendMsgConductLightning(al::HitSensor*, al::HitSensor*);
sendMsgDamageBallAttack(al::HitSensor*, al::HitSensor*);
sendMsgDamageBallBodyAttack(al::HitSensor*, al::HitSensor*);
sendMsgDonsukeAttack(al::HitSensor*, al::HitSensor*);
sendMsgDonsukeGroundAttack(al::HitSensor*, al::HitSensor*);
sendMsgDonsukePush(al::HitSensor*, al::HitSensor*);
sendMsgDragonAttack(al::HitSensor*, al::HitSensor*);
sendMsgEatExplosion(al::HitSensor*, al::HitSensor*);
sendMsgElectricWireNoLimitDistance(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttack2D(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttack3D(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttackDash(al::HitSensor*, al::HitSensor*);
sendMsgHackAttackFire(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttackFireCollision(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttackPoison(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttackTRex(al::HitSensor*, al::HitSensor*);
sendMsgHackAttackPoison(al::HitSensor*, al::HitSensor*);
sendMsgConfirmPaintObj(al::HitSensor*, al::HitSensor*);
sendMsgConfirmPaintObjForSeed(al::HitSensor*, al::HitSensor*);
sendMsgPaintAttackPoison(al::HitSensor*, al::HitSensor*);
sendMsgEnemyKick(al::HitSensor*, al::HitSensor*);
sendMsgRabbitKick(al::HitSensor*, al::HitSensor*);
sendMsgFishingAttack(al::HitSensor*, al::HitSensor*);
sendMsgFishingCancel(al::HitSensor*, al::HitSensor*);
sendMsgFishingFishApproach(al::HitSensor*, al::HitSensor*);
sendMsgFishingFishFloatTouch(al::HitSensor*, al::HitSensor*);
sendMsgFishingItemGet(al::HitSensor*, al::HitSensor*);
sendMsgFishingLineTouch(al::HitSensor*, al::HitSensor*);
sendMsgFishingStart(al::HitSensor*, al::HitSensor*);
sendMsgFishingUpImmediatelyPrepare(al::HitSensor*, al::HitSensor*);
sendMsgFireBrosFireBallCollide(al::HitSensor*, al::HitSensor*);
sendMsgFireSwitchFire(al::HitSensor*, al::HitSensor*);
sendMsgFrogHackTrample(al::HitSensor*, al::HitSensor*);
sendMsgGhostRecordStart(al::HitSensor*, al::HitSensor*);
sendMsgGhostRecordEnd(al::HitSensor*, al::HitSensor*);
sendMsgGhostPlay(al::HitSensor*, al::HitSensor*);
sendMsgGhostStop(al::HitSensor*, al::HitSensor*);
sendMsgGiantWanderBossAttack(al::HitSensor*, al::HitSensor*);
sendMsgGiantWanderBossBulletAttack(al::HitSensor*, al::HitSensor*);
sendMsgGiantWanderBossBulletPush(al::HitSensor*, al::HitSensor*);
sendMsgGhostReverse(al::HitSensor*, al::HitSensor*);
sendMsgGhostCancel(al::HitSensor*, al::HitSensor*);
sendMsgGrowFlowerSeedDisablePush(al::HitSensor*, al::HitSensor*);
sendMsgGrowFlowerSeedNear(al::HitSensor*, al::HitSensor*);
sendMsgGrowPlantPush(al::HitSensor*, al::HitSensor*);
sendMsgGrowerAttack(al::HitSensor*, al::HitSensor*);
sendMsgGrowerWallAttack(al::HitSensor*, al::HitSensor*);
sendMsgGunetterAttack(al::HitSensor*, al::HitSensor*);
sendMsgGunetterBodyTouch(al::HitSensor*, al::HitSensor*);
sendMsgHammerAttackDown(al::HitSensor*, al::HitSensor*);
sendMsgHammerAttackSide(al::HitSensor*, al::HitSensor*);
sendMsgHammerAttackSideCollide(al::HitSensor*, al::HitSensor*);
sendMsgItemAmiiboKoopa(al::HitSensor*, al::HitSensor*);
sendMsgIsExistPukupuku(al::HitSensor*, al::HitSensor*);
sendMsgJangoAttack(al::HitSensor*, al::HitSensor*);
sendMsgJangoRemoveCap(al::HitSensor*, al::HitSensor*);
sendMsgKakkuKick(al::HitSensor*, al::HitSensor*);
sendMsgKillByBossBattleDemo(al::HitSensor*, al::HitSensor*);
sendMsgKillByHackFirstDemo(al::HitSensor*, al::HitSensor*);
sendMsgKillByHomeDemo(al::HitSensor*, al::HitSensor*);
sendMsgEndHomeDemo(al::HitSensor*, al::HitSensor*);
sendMsgKillByMoonRockDemo(al::HitSensor*, al::HitSensor*);
sendMsgKillByShineGet(al::HitSensor*, al::HitSensor*);
sendMsgKillBySwitchTimer(al::LiveActor*);
sendMsgKoopaBindStart(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCapPlayerFocusTarget(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCapPunchFinishL(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCapPunchFinishR(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCapPunchInvincibleL(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCapPunchInvincibleR(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCapPunchKnockBackL(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCapPunchKnockBackR(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCapPunchL(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCapPunchR(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCapSpinAttack(al::HitSensor*, al::HitSensor*);
sendMsgKoopaCatchKoopaCap(al::HitSensor*, al::HitSensor*);
sendMsgKoopaDashPunchAttack(al::HitSensor*, al::HitSensor*);
sendMsgKoopaFire2D(al::HitSensor*, al::HitSensor*);
sendMsgKoopaFireBallAttack(al::HitSensor*, al::HitSensor*);
sendMsgKoopaHackDamage(al::HitSensor*, al::HitSensor*);
sendMsgKoopaHackPunch(al::HitSensor*, al::HitSensor*);
sendMsgKoopaHackPunchCollide(al::HitSensor*, al::HitSensor*);
sendMsgKoopaHackTrample(al::HitSensor*, al::HitSensor*);
sendMsgKoopaInvalidHackPunchFaceToCollision(al::HitSensor*, al::HitSensor*);
sendMsgKoopaRingBeamInvalidTouch(al::HitSensor*, al::HitSensor*);
sendMsgKoopaTailAttack(al::HitSensor*, al::HitSensor*);
sendMsgKoopaTouchFloor(al::HitSensor*, al::HitSensor*);
sendMsgKouraAttack2D(al::HitSensor*, al::HitSensor*);
sendMsgKouraItemGet2D(al::HitSensor*, al::HitSensor*);
sendMsgLaunchBlow(al::HitSensor*, al::HitSensor*);
sendMsgMeganeAttack(al::HitSensor*, al::HitSensor*);
sendMsgMeganeHackTrample(al::HitSensor*, al::HitSensor*);
sendMsgMofumofuBulletUnexplosion(al::HitSensor*, al::HitSensor*);
sendMsgMoonBasementAttackMeteor(al::HitSensor*, al::HitSensor*);
sendMsgMoonBasementBreakShockwaveMeteor(al::HitSensor*, al::HitSensor*);
sendMsgMoonBasementRockSyncClippingRegist(al::HitSensor*, al::HitSensor*);
sendMsgMoonBasementRockSyncClippingInvalidate(al::HitSensor*, al::HitSensor*);
sendMsgMoonBasementRockSyncClippingValidate(al::HitSensor*, al::HitSensor*);
sendMsgAttachCactusNeedle(al::HitSensor*, al::HitSensor*);
sendMsgCactusNeedleAttack(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgCactusNeedleAttackStrong(al::HitSensor*, al::HitSensor*, al::ComboCounter*);
sendMsgPlayerBallToss(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCarryCameraSubjectiveStart(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCarryCameraSubjectiveEnd(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCarryShineGetStart(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCarryShineGetEnd(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCapCatch(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCapHipDrop(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCapPush(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCapRecovery(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCapTouchJump(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCapTrample(al::HitSensor*, al::HitSensor*);
sendMsgPlayerCoinDashGet(al::HitSensor*, al::HitSensor*);
sendMsgPlayerEyePriorityTarget(al::HitSensor*, al::HitSensor*);
sendMsgPlayerDisregardHomingAttack(al::HitSensor*, al::HitSensor*);
sendMsgPlayerDisregardTargetMarker(al::HitSensor*, al::HitSensor*);
sendMsgPlayerEquipKoopaCap(al::HitSensor*, al::HitSensor*);
sendMsgPlayerFireBallAttack2D(al::HitSensor*, al::HitSensor*);
sendMsgPlayerFireBallAttack3D(al::HitSensor*, al::HitSensor*);
sendMsgPlayerHipDropDemoTrigger(al::HitSensor*, al::HitSensor*);
sendMsgPlayerHipDropHipDropSwitch(al::HitSensor*, al::HitSensor*);
sendMsgPlayerItemGet2D(al::HitSensor*, al::HitSensor*);
sendMsgPlayerJumpTakeOffFloor(al::HitSensor*, al::HitSensor*);
sendMsgPlayerObjectWallHit(al::HitSensor*, al::HitSensor*);
sendMsgPlayerObjLeapFrog(al::HitSensor*, al::HitSensor*);
sendMsgPlayerPenguinAttack(al::HitSensor*, al::HitSensor*);
sendMsgPlayerPenguinAttackReflect(al::HitSensor*, al::HitSensor*);
sendMsgPlayerPoleClimbKeep(al::HitSensor*, al::HitSensor*);
sendMsgPlayerPoleClimbReaction(al::HitSensor*, al::HitSensor*);
sendMsgPlayerRabbitGet(al::HitSensor*, al::HitSensor*);
sendMsgPlayerRollingObjHit(al::HitSensor*, al::HitSensor*);
sendMsgPlayerRollingWallHitDown(al::HitSensor*, al::HitSensor*);
sendMsgPlayerRollingWallHitMove(al::HitSensor*, al::HitSensor*);
sendMsgPlayerStartGrabCeil(al::HitSensor*, al::HitSensor*);
sendMsgPlayerStartWallJump(al::HitSensor*, al::HitSensor*);
sendMsgPlayerEndGrabCeil(al::HitSensor*, al::HitSensor*);
sendMsgPlayerSwordAttack(al::HitSensor*, al::HitSensor*);
sendMsgPlayerTouchFloorJumpCode(al::HitSensor*, al::HitSensor*);
sendMsgPlayerTrample2D(al::HitSensor*, al::HitSensor*);
sendMsgPlayerUpperPunch2D(al::HitSensor*, al::HitSensor*);
sendMsgPlayerObjUpperPunch2D(al::HitSensor*, al::HitSensor*);
sendMsgPukupukuDash(al::HitSensor*, al::HitSensor*);
sendMsgPukupukuKiss(al::HitSensor*, al::HitSensor*);
sendMsgPukupukuRollingAttack(al::HitSensor*, al::HitSensor*);
sendMsgPush2D(al::HitSensor*, al::HitSensor*);
sendMsgPushToFish(al::HitSensor*, al::HitSensor*);
sendMsgPushToMotorcycle(al::HitSensor*, al::HitSensor*);
sendMsgPushToPlayer(al::HitSensor*, al::HitSensor*);
sendMsgRadishAttack(al::HitSensor*, al::HitSensor*);
sendMsgRadishReflect(al::HitSensor*, al::HitSensor*);
sendMsgRequestChangeKinokoSuper(al::HitSensor*, al::HitSensor*);
sendMsgRequestChangeFireFlower(al::HitSensor*, al::HitSensor*);
sendMsgRequestPlayerSandMoon(al::HitSensor*, al::HitSensor*);
sendMsgRequestPlayerSnow(al::HitSensor*, al::HitSensor*);
sendMsgRequestPlayerWet(al::HitSensor*, al::HitSensor*);
sendMsgStartHack(al::HitSensor*, al::HitSensor*);
sendMsgSunshineAttack(al::HitSensor*, al::HitSensor*);
sendMsgCancelHack(al::HitSensor*, al::HitSensor*);
sendMsgCancelHackArea(al::HitSensor*, al::HitSensor*);
sendMsgCancelHackByDokan(al::HitSensor*, al::HitSensor*);
sendMsgPackunEatStart(al::HitSensor*, al::HitSensor*);
sendMsgHackAttack(al::HitSensor*, al::HitSensor*);
sendMsgHackAttackKick(al::HitSensor*, al::HitSensor*);
sendMsgHackAttackMapObj(al::HitSensor*, al::HitSensor*);
sendMsgHackDeathAreaSelfCheck(al::HitSensor*, al::HitSensor*);
sendMsgHackDemoEnd(al::HitSensor*, al::HitSensor*);
sendMsgHackDemoStart(al::HitSensor*, al::HitSensor*);
sendMsgHackInvalidEscape(al::HitSensor*, al::HitSensor*);
sendMsgHackInvalidEscapeNoReaction(al::HitSensor*, al::HitSensor*);
sendMsgHackMarioCheckpointFlagWarp(al::HitSensor*, al::HitSensor*);
sendMsgHackMarioDead(al::HitSensor*, al::HitSensor*);
sendMsgHackMarioDemo(al::HitSensor*, al::HitSensor*);
sendMsgHackMarioInWater(al::HitSensor*, al::HitSensor*);
sendMsgHackMoveRockForestPush(al::HitSensor*, al::HitSensor*);
sendMsgHackSelfCeilingCheckMiss(al::HitSensor*, al::HitSensor*);
sendMsgHackSyncDamageVisibility(al::HitSensor*, al::HitSensor*);
sendMsgWeaponItemGet(al::HitSensor*, al::HitSensor*);
sendMsgCapAttack(al::HitSensor*, al::HitSensor*);
sendMsgCapAttackCollide(al::HitSensor*, al::HitSensor*);
sendMsgCapAttackStayRolling(al::HitSensor*, al::HitSensor*);
sendMsgCapAttackStayRollingCollide(al::HitSensor*, al::HitSensor*);
sendMsgCapAttackRailMove(al::HitSensor*, al::HitSensor*);
sendMsgCapGiantAttack(al::HitSensor*, al::HitSensor*);
sendMsgCapReflect(al::HitSensor*, al::HitSensor*);
sendMsgCapReflectCollide(al::HitSensor*, al::HitSensor*);
sendMsgCapStartLockOn(al::HitSensor*, al::HitSensor*);
sendMsgCapKeepLockOn(al::HitSensor*, al::HitSensor*);
sendMsgCapCancelLockOn(al::HitSensor*, al::HitSensor*);
sendMsgCapHipDrop(al::HitSensor*, al::HitSensor*);
sendMsgCapObjHipDrop(al::HitSensor*, al::HitSensor*);
sendMsgCapObjHipDropReflect(al::HitSensor*, al::HitSensor*);
sendMsgCapIgnoreCancelLockOn(al::HitSensor*, al::HitSensor*);
sendMsgCapIgnoreCancelMissReaction(al::HitSensor*, al::HitSensor*);
sendMsgCapIgnoreCollisionCheck(al::HitSensor*, al::HitSensor*);
sendMsgCapItemGet(al::HitSensor*, al::HitSensor*);
sendMsgCapTrampolineAttack(al::HitSensor*, al::HitSensor*);
sendMsgCatchBombThrough(al::HitSensor*, al::HitSensor*);
sendMsgCheckCarObstacle(al::HitSensor*, al::HitSensor*);
sendMsgCheckIsCardboardBox(al::HitSensor*, al::HitSensor*);
sendMsgBullHackAttack(al::HitSensor*, al::HitSensor*);
sendMsgBullEnemyAttack(al::HitSensor*, al::HitSensor*);
sendMsgEnemyAttackStrong(al::HitSensor*, al::HitSensor*);
sendMsgEnemyObjBreak(al::HitSensor*, al::HitSensor*);
sendMsgWhipAttack(al::HitSensor*, al::HitSensor*);
sendMsgNoLimitTouchJump(al::HitSensor*, al::HitSensor*);
sendMsgNoticePlayerDamage(al::HitSensor*, al::HitSensor*);
sendMsgStatueDrop(al::HitSensor*, al::HitSensor*);
sendMsgStatueTrampleReflect(al::HitSensor*, al::HitSensor*);
sendMsgStatuePush(al::HitSensor*, al::HitSensor*);
sendMsgStatueSnap(al::HitSensor*, al::HitSensor*);
sendMsgHitGrowFlowerPot(al::HitSensor*, al::HitSensor*);
sendMsgHitGrowPlantPot(al::HitSensor*, al::HitSensor*);
sendMsgImplantGrowFlowerSeed(al::HitSensor*, al::HitSensor*);
sendMsgIcicleAttack(al::HitSensor*, al::HitSensor*);
sendMsgIgnoreMirrorWarp(al::HitSensor*, al::HitSensor*);
sendMsgIgnoredByRunawayNpc(al::HitSensor*, al::HitSensor*);
sendMsgIgnorePushMotorcycle(al::HitSensor*, al::HitSensor*);
sendMsgSandSharkAttack(al::HitSensor*, al::HitSensor*);
sendMsgSeedAttack(al::HitSensor*, al::HitSensor*);
sendMsgSeedAttackBig(al::HitSensor*, al::HitSensor*);
sendMsgSeedAttackHold(al::HitSensor*, al::HitSensor*);
sendMsgSeedItemGet(al::HitSensor*, al::HitSensor*);
sendMsgSeedReflect(al::HitSensor*, al::HitSensor*);
sendMsgSenobiTrample(al::HitSensor*, al::HitSensor*);
sendMsgSenobiCancelStretch(al::HitSensor*, al::HitSensor*);
sendMsgSenobiPunchBlockTransparent(al::HitSensor*, al::HitSensor*);
sendMsgShibakenApproach(al::HitSensor*, al::HitSensor*);
sendMsgShibakenKick(al::HitSensor*, al::HitSensor*);
sendMsgHackUpperPunch(al::HitSensor*, al::HitSensor*);
sendMsgHackObjUpperPunch(al::HitSensor*, al::HitSensor*);
sendMsgShineGet(al::HitSensor*, al::HitSensor*);
sendMsgShineGet2D(al::HitSensor*, al::HitSensor*);
sendMsgSpherePush(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, float);
sendMsgSphinxJumpAttack(al::HitSensor*, al::HitSensor*);
sendMsgSphinxQuizRouteKill(al::HitSensor*, al::HitSensor*);
sendMsgSphinxRideAttack(al::HitSensor*, al::HitSensor*);
sendMsgSphinxRideAttackReflect(al::HitSensor*, al::HitSensor*);
sendMsgPechoSpot(al::HitSensor*, al::HitSensor*);
sendMsgBelowObjBroken(al::HitSensor*, al::HitSensor*);
sendMsgBindCollidedGround(al::HitSensor*, al::HitSensor*);
sendMsgBindKeepDemoStart(al::HitSensor*, al::HitSensor*);
sendMsgBindKeepDemoExecute(al::HitSensor*, al::HitSensor*);
sendMsgBindKeepDemoEnd(al::HitSensor*, al::HitSensor*);
sendMsgBindRecoveryLife(al::HitSensor*, al::HitSensor*);
sendMsgMayorItemReflect(al::HitSensor*, al::HitSensor*);
sendMsgMayorItemCollide(al::HitSensor*, al::HitSensor*);
sendMsgBlowObjAttack(al::HitSensor*, al::HitSensor*);
sendMsgBlowObjAttackReflect(al::HitSensor*, al::HitSensor*);
sendMsgConfirmFrailBox(al::HitSensor*, al::HitSensor*);
sendMsgConfirmBrokenFrailBox(al::HitSensor*, al::HitSensor*);
sendMsgTankLookOn(al::HitSensor*, al::HitSensor*);
sendMsgTankKickHack(al::HitSensor*, al::HitSensor*);
sendMsgTankKickEnemy(al::HitSensor*, al::HitSensor*);
sendMsgTankBullet(al::HitSensor*, al::HitSensor*);
sendMsgTankBulletNoReaction(al::HitSensor*, al::HitSensor*);
sendMsgTimerAthleticDemoStart(al::LiveActor*);
sendMsgRideOnStart(al::HitSensor*, al::HitSensor*);
sendMsgRideOnEnd(al::HitSensor*, al::HitSensor*);
sendMsgRideOnRelease(al::HitSensor*, al::HitSensor*);
sendMsgHipDropTransformTransform(al::HitSensor*, al::HitSensor*);
sendMsgHipDropTransformReverse(al::HitSensor*, al::HitSensor*);
sendMsgHipDropTransformingUp(al::HitSensor*, al::HitSensor*);
sendMsgHipDropTransformingDown(al::HitSensor*, al::HitSensor*);
sendMsgHipDropTransformingFinish(al::HitSensor*, al::HitSensor*);
sendMsgClearFire(al::HitSensor*, al::HitSensor*);
sendMsgCollectAnimalTouchCollide(al::HitSensor*, al::HitSensor*);
sendMsgBossKnuckleCounter(al::HitSensor*, al::HitSensor*);
sendMsgBossKnuckleFallAttack(al::HitSensor*, al::HitSensor*);
sendMsgBossKnuckleHackAttack(al::HitSensor*, al::HitSensor*);
sendMsgBossKnuckleKillerAttack(al::HitSensor*, al::HitSensor*);
sendMsgBossKnuckleIceConflict(al::HitSensor*, al::HitSensor*);
sendMsgBossKnuckleIceFallToMummy(al::HitSensor*, al::HitSensor*);
sendMsgSkaterAttack(al::HitSensor*, al::HitSensor*);
sendMsgEnableInSaucePan(al::HitSensor*, al::HitSensor*);
sendMsgEnableMapCheckPointWarp(al::HitSensor*, al::HitSensor*);
sendMsgStartInSaucePan(al::HitSensor*, al::HitSensor*, bool);
sendMsgEndInSaucePan(al::HitSensor*, al::HitSensor*);
sendMsgLineDancerLink(al::HitSensor*, al::HitSensor*);
sendMsgLongPushSensorHit(al::HitSensor*, al::HitSensor*);
sendMsgLongPushBoxHit(al::HitSensor*, al::HitSensor*);
sendMsgGoldHammerAttack(al::HitSensor*, al::HitSensor*);
sendMsgTrashBoxIn(al::HitSensor*, al::HitSensor*);
sendMsgTouchDoorDrumn(al::HitSensor*, al::HitSensor*);
sendMsgKuribo2DTouch(al::HitSensor*, al::HitSensor*);
sendMsgKuriboCollisionDamage(al::HitSensor*, al::HitSensor*);
sendMsgKuriboCollisionKill(al::HitSensor*, al::HitSensor*);
sendMsgKuriboFlick(al::HitSensor*, al::HitSensor*);
sendMsgKuriboTowerOn(al::HitSensor*, al::HitSensor*, unsigned int);
sendMsgPartyPopperSoundAttack(al::HitSensor*, al::HitSensor*);
sendMsgYokinBallAttack(al::HitSensor*, al::HitSensor*);
sendMsgYoshiDirectEat(al::HitSensor*, al::HitSensor*);
sendMsgYoshiTongueAttack(al::HitSensor*, al::HitSensor*);
sendMsgYoshiTongueEatBind(al::HitSensor*, al::HitSensor*, float*, float*, float*);
sendMsgYoshiTongueEatBindCancel(al::HitSensor*, al::HitSensor*);
sendMsgYoshiTongueEatBindFinish(al::HitSensor*, al::HitSensor*);
sendMsgYoshiTongueEatHomingTarget(al::HitSensor*, al::HitSensor*);
sendMsgYukimaruPush(al::HitSensor*, al::HitSensor*);
sendMsgPunchMachinePunchStraight(al::HitSensor*, al::HitSensor*);
sendMsgPunchMachinePunchHook(al::HitSensor*, al::HitSensor*);
sendMsgPunchMachinePunchUpper(al::HitSensor*, al::HitSensor*);
sendMsgMorningStarWarpStart(al::HitSensor*, al::HitSensor*);
sendMsgMorningStarWarpEnd(al::HitSensor*, al::HitSensor*);
sendMsgGemyAim(al::HitSensor*, al::HitSensor*);
sendMsgHammerBrosHammerEnemyAttack(al::HitSensor*, al::HitSensor*);
sendMsgHammerBrosHammerHackAttack(al::HitSensor*, al::HitSensor*);
sendMsgHammerBrosHammerSearch(al::HitSensor*, al::HitSensor*);
sendMsgHackBrosContact(al::HitSensor*, al::HitSensor*);
sendMsgMotorcycleAttack(al::HitSensor*, al::HitSensor*);
sendMsgMotorcycleCollideParkingLot(al::HitSensor*, al::HitSensor*);
sendMsgMotorcycleDashAttack(al::HitSensor*, al::HitSensor*);
sendMsgMotorcycleDashCollide(al::HitSensor*, al::HitSensor*);
sendMsgWanwanEnemyAttack(al::HitSensor*, al::HitSensor*);
sendMsgWanwanPush(al::HitSensor*, al::HitSensor*);
sendMsgWanwanReboundAttack(al::HitSensor*, al::HitSensor*);
sendMsgWanwanBlockAttack(al::HitSensor*, al::HitSensor*);
sendMsgWanwanHoleIn(al::HitSensor*, al::HitSensor*);
sendMsgWaterRoadIn(al::HitSensor*, al::HitSensor*);
sendMsgWaterRoadNear(al::HitSensor*, al::HitSensor*);
sendMsgBreedaSlap(al::HitSensor*, al::HitSensor*);
sendMsgBreedaPush(al::HitSensor*, al::HitSensor*);
sendMsgGamaneBullet(al::HitSensor*, al::HitSensor*);
sendMsgGamaneBulletThrough(al::HitSensor*, al::HitSensor*);
sendMsgGamaneBulletForCoinFlower(al::HitSensor*, al::HitSensor*);
sendMsgVolleyballNpcScareByEnemy(al::HitSensor*, al::HitSensor*);
sendMsgRocketFlowerExtension(al::HitSensor*, al::HitSensor*);
sendMsgWanderBossCameraRange(al::HitSensor*, al::HitSensor*);
sendMsgKuriboGirlAttack(al::HitSensor*, al::HitSensor*);
sendMsgKuriboGirlLove(al::HitSensor*, al::HitSensor*);
sendMsgKuriboTop(al::HitSensor*, al::HitSensor*);
sendMsgTRexAttack(al::HitSensor*, al::HitSensor*);
sendMsgTRexAttackCollideBody(al::HitSensor*, al::HitSensor*);
sendMsgTRexAttackCollideHead(al::HitSensor*, al::HitSensor*);
sendMsgTRexDashAttack(al::HitSensor*, al::HitSensor*);
sendMsgTRexScrollPartsBreakWith(al::HitSensor*, al::HitSensor*);
sendMsgTsukkunNoTrace(al::HitSensor*, al::HitSensor*);
sendMsgTouchFireDrum2D(al::HitSensor*, al::HitSensor*);
sendMsgPropellerAttack(al::HitSensor*, al::HitSensor*);
sendMsgTankExplosion(al::HitSensor*, al::HitSensor*);
sendMsgTankHackTrample(al::HitSensor*, al::HitSensor*);
sendMsgUtsuboAttack(al::HitSensor*, al::HitSensor*);
sendMsgKillerAttackNoExplode(al::HitSensor*, al::HitSensor*);
sendMsgKillerMagnumAttack(al::HitSensor*, al::HitSensor*);
sendMsgKillerMagnumHackAttack(al::HitSensor*, al::HitSensor*);
sendMsgGabuzouAttack(al::HitSensor*, al::HitSensor*);
sendMsgStackerRollingAttack(al::HitSensor*, al::HitSensor*);
sendMsgStackerCapBoostAttack(al::HitSensor*, al::HitSensor*);
sendMsgIgnoreIgnitionBomb(al::HitSensor*, al::HitSensor*);
sendMsgExplosionReflectBomb(al::HitSensor*, al::HitSensor*);
sendMsgGolemStampPress(al::HitSensor*, al::HitSensor*);
sendMsgSwitchOnWithSaveRequest(al::LiveActor*, SaveObjInfo*);
sendMsgWanwanReboundAttackToCollided(al::LiveActor const*, al::HitSensor*);
sendMsgWanwanBlockAttackToCollided(al::LiveActor const*, al::HitSensor*);
sendMsgDigPointSmell(al::HitSensor*, al::HitSensor*, DigPoint*);
sendMsgMofumofuBodyChainExplode(al::HitSensor*, al::HitSensor*, int);
sendMsgMoonBasementRockThroughCollision(al::HitSensor*, al::HitSensor*, bool);
sendMsgFishingWait(al::HitSensor*, al::HitSensor*, al::HitSensor*);
sendMsgFishingUpImmediately(al::HitSensor*, al::HitSensor*, sead::Matrix34<float> const&, sead::Vector3<float> const&, char const*);
sendMsgGunetterPush(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, float);
sendMsgTestPunch(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, int, int);
sendMsgTestPunchStrong(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, int, int);
sendMsgPunchGuard(al::HitSensor*, al::HitSensor*, int, int);
sendMsgTsukkunThrust(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, int, bool);
sendMsgTsukkunThrustSpin(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, int, bool);
sendMsgTsukkunThrustReflect(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, int, bool);
sendMsgTsukkunThrustCollide(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, int, bool);
sendMsgTsukkunThrustHitReflectCollide(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, int, bool);
sendMsgTsukkunThrustReflectCollide(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, int, bool);
sendMsgTsukkunThrustHole(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
sendMsgTsukkunThroughCollide(al::HitSensor*, al::HitSensor*);
sendMsgTsukkunHoldCollide(al::HitSensor*, al::HitSensor*);
sendMsgTsukkunForceCancelCollide(al::HitSensor*, al::HitSensor*);
sendMsgNetworkShootingShot(al::HitSensor*, al::HitSensor*, int);
sendMsgNetworkShootingChargeShot(al::HitSensor*, al::HitSensor*, int);
sendMsgRequestPlayerJumpBreakFloor(al::HitSensor*, al::HitSensor*);
sendMsgRequestPlayerJump(al::HitSensor*, al::HitSensor*, float);
sendMsgRequestPlayerTrampleJump(al::HitSensor*, al::HitSensor*, float);
sendMsgRequestPlayerSpinJump(al::HitSensor*, al::HitSensor*, float);
sendMsgRequestSphinxJump(al::HitSensor*, al::HitSensor*, float);
sendMsgIgnoreTouchTarget(al::HitSensor*, al::HitSensor*);
sendMsgIgnoreTouchTarget(al::ScreenPointer*, al::ScreenPointTarget*);
sendMsgInitTouchTargetInfo(al::HitSensor*, al::HitSensor*, TouchTargetInfo*, sead::Vector3<float> const*);
sendMsgInitTouchTargetInfo(al::ScreenPointer*, al::ScreenPointTarget*, TouchTargetInfo*, sead::Vector3<float> const*);
sendMsgCollisionImpulse(al::HitSensor*, al::HitSensor*, sead::Vector3<float>*, sead::Vector3<float> const&, float, sead::Vector3<float> const&, float);
sendMsgWhipHold(al::HitSensor*, al::HitSensor*, WhipTargetInfo*);
sendMsgWhipBind(al::HitSensor*, al::HitSensor*, WhipTargetInfo*);
sendMsgWhipThrow(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
sendMsgMagnet(al::HitSensor*, al::HitSensor*, bool);
sendMsgMagnetBulletAttack(al::HitSensor*, al::HitSensor*, float);
sendMsgDashPanel(al::HitSensor*, al::HitSensor*, int);
sendMsgTrampolineCrackJump(al::HitSensor*, al::HitSensor*, float, float);
sendMsgCapTouchWall(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
sendMsgCapRethrow(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
sendMsgCapRethrowReturnOnly(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&, sead::Vector3<float> const&);
sendMsgCapChangeGiant(al::HitSensor*, al::HitSensor*, float, int);
sendMsgPackunEatCancel(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
sendMsgPackunEatEnd(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
sendMsgPackunEatStartFollow(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const*);
sendMsgFireBlowerAttack(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&, float);
sendMsgPaint(al::HitSensor*, al::HitSensor*, sead::Color4u8 const&, int, int);
sendMsgPaintTexture(al::HitSensor*, al::HitSensor*, int, float, int);
sendMsgCheckPaintClear(al::HitSensor*, al::HitSensor*, sead::Color4u8 const&, sead::Vector3<float> const&, int);
sendMsgCheckPaintAlpha(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
sendMsgByugoBlow(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
sendMsgHackDirectStageInit(al::HitSensor*, al::HitSensor*, IUsePlayerHack*);
sendMsgObjSnapForce(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
sendMsgCapBeamerBeam(al::HitSensor*, al::HitSensor*);
sendMsgHosuiAttack(al::HitSensor*, al::HitSensor*);
sendMsgHosuiAttackCollide(al::HitSensor*, al::HitSensor*);
sendMsgHosuiAttackNoEffect(al::HitSensor*, al::HitSensor*);
sendMsgHosuiAttackStrong(al::HitSensor*, al::HitSensor*);
sendMsgHosuiTouch(al::HitSensor*, al::HitSensor*);
sendMsgHosuiTrample(al::HitSensor*, al::HitSensor*);
sendMsgHosuiTrampleReflect(al::HitSensor*, al::HitSensor*);
sendMsgHosuiTrampleReflectHigh(al::HitSensor*, al::HitSensor*);
sendMsgBubbleAttack(al::HitSensor*, al::HitSensor*);
sendMsgBubbleAttackToPecho(al::HitSensor*, al::HitSensor*);
sendMsgBubbleReflectH(al::HitSensor*, al::HitSensor*);
sendMsgBubbleReflectV(al::HitSensor*, al::HitSensor*);
sendMsgBubbleWallTouch(al::HitSensor*, al::HitSensor*);
sendMsgBubbleGroundTouchTrigger(al::HitSensor*, al::HitSensor*);
sendMsgBubbleLauncherStart(al::HitSensor*, al::HitSensor*);
sendMsgSenobiPartsMove(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, float);
sendMsgStampTo2D(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
sendMsgAirExplosion(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
sendMsgPushVelocity(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
sendMsgGhostRecordStartOk(al::HitSensor*, al::HitSensor*, char const*);
sendMsgSandGeyserRaise(al::HitSensor*, al::HitSensor*, float, float);
sendMsgRaceWait(al::LiveActor*);
sendMsgRaceStart(al::LiveActor*);
sendMsgRaceStop(al::LiveActor*);
sendMsgRaceReturnToCourse(al::LiveActor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
sendMsgPlayerLookAtPosition(al::HitSensor*, al::HitSensor*, sead::Vector3<float>*);
sendMsgTargetMarkerPosition(al::HitSensor*, al::HitSensor*, sead::Vector3<float>*);
sendMsgHackBlowJump(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, float);
sendMsgGolemStampPushV(al::HitSensor*, al::HitSensor*, float);
sendMsgGolemStampPushH(al::HitSensor*, al::HitSensor*, float);
sendMsgRequestPlayerWaitAnimDigPoint(al::HitSensor*, al::HitSensor*);
sendMsgEventFlowScareCheck(al::HitSensor*, al::HitSensor*, al::EventFlowExecutor*);
sendMsgPlayerItemGetAll(al::HitSensor*, al::HitSensor*);
sendMsgPlayerItemGetAll2D(al::HitSensor*, al::HitSensor*);
sendMsgTRexAttackAll(al::HitSensor*, al::HitSensor*);
sendMsgSeedTouch(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
sendMsgSphinxRideAttackTouchThrough(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
sendMsgSphinxRideAttackTouch(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&, sead::Vector3<float> const&);
isMsgAckCheckpoint(al::SensorMsg const*);
isMsgAckGetShine(al::SensorMsg const*);
isMsgAckLifeUp(al::SensorMsg const*);
isMsgAckLifeMaxUp(al::SensorMsg const*);
isMsgAskRailCollision(al::SensorMsg const*);
isMsgAttachCactusNeedle(al::SensorMsg const*);
isMsgAirExplosion(al::SensorMsg const*);
isMsgBelowObjBroken(al::SensorMsg const*);
isMsgBindCollidedGround(al::SensorMsg const*);
isMsgBindKeepDemoStart(al::SensorMsg const*);
isMsgBindKeepDemoExecute(al::SensorMsg const*);
isMsgBindKeepDemoEnd(al::SensorMsg const*);
isMsgBindRecoveryLife(al::SensorMsg const*);
isMsgBirdFlyAway(al::SensorMsg const*);
isMsgBlowObjAttack(al::SensorMsg const*);
isMsgMayorItemCollide(al::SensorMsg const*);
isMsgMayorItemReflect(al::SensorMsg const*);
isMsgBlowObjAttackReflect(al::SensorMsg const*);
isMsgBossKnuckleCounter(al::SensorMsg const*);
isMsgBossKnuckleFallAttack(al::SensorMsg const*);
isMsgBossKnuckleHackAttack(al::SensorMsg const*);
isMsgBossKnuckleIceConflict(al::SensorMsg const*);
isMsgBossKnuckleIceFallToMummy(al::SensorMsg const*);
isMsgBossKnuckleKillerAttack(al::SensorMsg const*);
isMsgBreakPartsBreak(al::SensorMsg const*);
isMsgBreedaSlap(al::SensorMsg const*);
isMsgBreedaPush(al::SensorMsg const*);
isMsgBubbleAttack(al::SensorMsg const*);
isMsgBubbleAttackToPecho(al::SensorMsg const*);
isMsgBubbleLauncherStart(al::SensorMsg const*);
isMsgBubbleReflectH(al::SensorMsg const*);
isMsgBubbleReflectV(al::SensorMsg const*);
isMsgBubbleWallTouch(al::SensorMsg const*);
isMsgBubbleGroundTouchTrigger(al::SensorMsg const*);
isMsgBullAttack(al::SensorMsg const*);
isMsgBullHackAttack(al::SensorMsg const*);
isMsgBullEnemyAttack(al::SensorMsg const*);
isMsgByugoBlow(al::SensorMsg const*);
isMsgCameraAngleElevationResetFast(al::SensorMsg const*);
isMsgCancelHack(al::SensorMsg const*);
isMsgCancelHackArea(al::SensorMsg const*);
isMsgCancelHackByDokan(al::SensorMsg const*);
isMsgCapAttack(al::SensorMsg const*);
isMsgCapAttackCollide(al::SensorMsg const*);
isMsgCapAttackRailMove(al::SensorMsg const*);
isMsgCapAttackStayRolling(al::SensorMsg const*);
isMsgCapAttackStayRollingCollide(al::SensorMsg const*);
isMsgCapBeamerBeam(al::SensorMsg const*);
isMsgCapCancelLockOn(al::SensorMsg const*);
isMsgCapChangeGiant(al::SensorMsg const*);
isMsgCapEnableLockOn(al::SensorMsg const*);
isMsgCapStartLockOn(al::SensorMsg const*);
isMsgCapKeepLockOn(al::SensorMsg const*);
isMsgCapGiantAttack(al::SensorMsg const*);
isMsgCapHipDrop(al::SensorMsg const*);
isMsgCapObjHipDrop(al::SensorMsg const*);
isMsgCapObjHipDropReflect(al::SensorMsg const*);
isMsgCapIgnoreCancelLockOn(al::SensorMsg const*);
isMsgCapIgnoreCancelMissReaction(al::SensorMsg const*);
isMsgCapIgnoreCollisionCheck(al::SensorMsg const*);
isMsgCapItemGet(al::SensorMsg const*);
isMsgCapReflect(al::SensorMsg const*);
isMsgCapReflectCollide(al::SensorMsg const*);
isMsgCapRethrow(al::SensorMsg const*);
isMsgCapTouchWall(al::SensorMsg const*);
isMsgCapTrampolineAttack(al::SensorMsg const*);
isMsgCatchBombThrough(al::SensorMsg const*);
isMsgCheckCarObstacle(al::SensorMsg const*);
isMsgCheckIsCardboardBox(al::SensorMsg const*);
isMsgChorobonAttack(al::SensorMsg const*);
isMsgClearFire(al::SensorMsg const*);
isMsgCollectAnimalTouchCollide(al::SensorMsg const*);
isMsgCollisionImpulse(al::SensorMsg const*);
isMsgConductLightning(al::SensorMsg const*);
isMsgConfirmFrailBox(al::SensorMsg const*);
isMsgConfirmBrokenFrailBox(al::SensorMsg const*);
isMsgDamageBallAttack(al::SensorMsg const*);
isMsgDamageBallBodyAttack(al::SensorMsg const*);
isMsgDigPointSmell(al::SensorMsg const*);
isMsgDonsukeAttack(al::SensorMsg const*);
isMsgDonsukeGroundAttack(al::SensorMsg const*);
isMsgDonsukePush(al::SensorMsg const*);
isMsgDragonAttack(al::SensorMsg const*);
isMsgEatExplosion(al::SensorMsg const*);
isMsgElectricWireNoLimitDistance(al::SensorMsg const*);
isMsgEnableInSaucePan(al::SensorMsg const*);
isMsgEnableMapCheckPointWarp(al::SensorMsg const*);
isMsgEndInSaucePan(al::SensorMsg const*);
isMsgEnemyAttack2D(al::SensorMsg const*);
isMsgEnemyAttack3D(al::SensorMsg const*);
isMsgEnemyAttackDash(al::SensorMsg const*);
isMsgFireBrosFireBallCollide(al::SensorMsg const*);
isMsgFireDamageAll(al::SensorMsg const*);
isMsgHackAttackFire(al::SensorMsg const*);
isMsgFireSwitchFire(al::SensorMsg const*);
isMsgEnemyAttackFireCollision(al::SensorMsg const*);
isMsgEnemyAttackTRex(al::SensorMsg const*);
isMsgPoisonDamageAll(al::SensorMsg const*);
isMsgEnemyAttackPoison(al::SensorMsg const*);
isMsgHackAttackPoison(al::SensorMsg const*);
isMsgPaintAttackPoison(al::SensorMsg const*);
isMsgConfirmPaintObj(al::SensorMsg const*);
isMsgConfirmPaintObjForSeed(al::SensorMsg const*);
isMsgEnemyAttackStrong(al::SensorMsg const*);
isMsgEnemyKick(al::SensorMsg const*);
isMsgRabbitKick(al::SensorMsg const*);
isMsgEnemyObjBreak(al::SensorMsg const*);
isMsgFireBlowerAttack(al::SensorMsg const*);
isMsgFishingAttack(al::SensorMsg const*);
isMsgFishingCancel(al::SensorMsg const*);
isMsgFishingFishApproach(al::SensorMsg const*);
isMsgFishingFishFloatTouch(al::SensorMsg const*);
isMsgFishingItemGet(al::SensorMsg const*);
isMsgFishingLineTouch(al::SensorMsg const*);
isMsgFishingStart(al::SensorMsg const*);
isMsgFishingUpImmediately(al::SensorMsg const*);
isMsgFishingUpImmediatelyPrepare(al::SensorMsg const*);
isMsgFishingWait(al::SensorMsg const*);
isMsgFrogHackTrample(al::SensorMsg const*);
isMsgGamaneBullet(al::SensorMsg const*);
isMsgGamaneBulletThrough(al::SensorMsg const*);
isMsgGamaneBulletForCoinFlower(al::SensorMsg const*);
isMsgGemyAim(al::SensorMsg const*);
isMsgGhostCancel(al::SensorMsg const*);
isMsgGhostPlay(al::SensorMsg const*);
isMsgGhostRecordEnd(al::SensorMsg const*);
isMsgGhostRecordStart(al::SensorMsg const*);
isMsgGhostRecordStartOk(al::SensorMsg const*);
isMsgGhostReverse(al::SensorMsg const*);
isMsgGhostStop(al::SensorMsg const*);
isMsgGiantWanderBossAttack(al::SensorMsg const*);
isMsgGiantWanderBossBulletAttack(al::SensorMsg const*);
isMsgGiantWanderBossBulletPush(al::SensorMsg const*);
isMsgGoldHammerAttack(al::SensorMsg const*);
isMsgGrowFlowerSeedDisablePush(al::SensorMsg const*);
isMsgGrowFlowerSeedNear(al::SensorMsg const*);
isMsgGrowPlantPush(al::SensorMsg const*);
isMsgGrowerAttack(al::SensorMsg const*);
isMsgGrowerWallAttack(al::SensorMsg const*);
isMsgGunetterAttack(al::SensorMsg const*);
isMsgGunetterBodyTouch(al::SensorMsg const*);
isMsgGunetterPush(al::SensorMsg const*);
isMsgHackAttack(al::SensorMsg const*);
isMsgHackAttackKick(al::SensorMsg const*);
isMsgHackAttackMapObj(al::SensorMsg const*);
isMsgHackBrosContact(al::SensorMsg const*);
isMsgHackDeathAreaSelfCheck(al::SensorMsg const*);
isMsgHackDemoEnd(al::SensorMsg const*);
isMsgHackDemoStart(al::SensorMsg const*);
isMsgHackInvalidEscape(al::SensorMsg const*);
isMsgHackInvalidEscapeNoReaction(al::SensorMsg const*);
isMsgHackMarioCheckpointFlagWarp(al::SensorMsg const*);
isMsgHackMarioDead(al::SensorMsg const*);
isMsgHackMarioDemo(al::SensorMsg const*);
isMsgHackMarioInWater(al::SensorMsg const*);
isMsgHackMoveRockForestPush(al::SensorMsg const*);
isMsgHackSelfCeilingCheckMiss(al::SensorMsg const*);
isMsgHackSyncDamageVisibility(al::SensorMsg const*);
isMsgHackUpperPunch(al::SensorMsg const*);
isMsgHackObjUpperPunch(al::SensorMsg const*);
isMsgHammerAttackDown(al::SensorMsg const*);
isMsgHammerAttackSide(al::SensorMsg const*);
isMsgHammerAttackSideCollide(al::SensorMsg const*);
isMsgHammerBrosHammerEnemyAttack(al::SensorMsg const*);
isMsgHammerBrosHammerHackAttack(al::SensorMsg const*);
isMsgHammerBrosHammerSearch(al::SensorMsg const*);
isMsgHipDropTransformReverse(al::SensorMsg const*);
isMsgHipDropTransformTransform(al::SensorMsg const*);
isMsgHipDropTransformingUp(al::SensorMsg const*);
isMsgHipDropTransformingDown(al::SensorMsg const*);
isMsgHipDropTransformingFinish(al::SensorMsg const*);
isMsgHitGrowFlowerPot(al::SensorMsg const*);
isMsgHitGrowPlantPot(al::SensorMsg const*);
isMsgHosuiAttack(al::SensorMsg const*);
isMsgHosuiAttackCollide(al::SensorMsg const*);
isMsgHosuiAttackNoEffect(al::SensorMsg const*);
isMsgHosuiAttackStrong(al::SensorMsg const*);
isMsgHosuiTouch(al::SensorMsg const*);
isMsgHosuiTrample(al::SensorMsg const*);
isMsgHosuiTrampleReflect(al::SensorMsg const*);
isMsgHosuiTrampleReflectHigh(al::SensorMsg const*);
isMsgIgnoreTouchTarget(al::SensorMsg const*);
isMsgIgnorePushMotorcycle(al::SensorMsg const*);
isMsgIcicleAttack(al::SensorMsg const*);
isMsgIgnoreMirrorWarp(al::SensorMsg const*);
isMsgIgnoredByRunawayNpc(al::SensorMsg const*);
isMsgImplantGrowFlowerSeed(al::SensorMsg const*);
isMsgInitTouchTargetInfo(al::SensorMsg const*);
isMsgItemAmiiboKoopa(al::SensorMsg const*);
isMsgIsExistPukupuku(al::SensorMsg const*);
isMsgJangoAttack(al::SensorMsg const*);
isMsgJangoRemoveCap(al::SensorMsg const*);
isMsgKakkuKick(al::SensorMsg const*);
isMsgKoopaBindStart(al::SensorMsg const*);
isMsgKoopaCapPlayerFocusTarget(al::SensorMsg const*);
isMsgKoopaCapPunchFinishL(al::SensorMsg const*);
isMsgKoopaCapPunchFinishR(al::SensorMsg const*);
isMsgKoopaCapPunchInvincibleL(al::SensorMsg const*);
isMsgKoopaCapPunchInvincibleR(al::SensorMsg const*);
isMsgKoopaCapPunchKnockBackL(al::SensorMsg const*);
isMsgKoopaCapPunchKnockBackR(al::SensorMsg const*);
isMsgKoopaCapPunchL(al::SensorMsg const*);
isMsgKoopaCapPunchR(al::SensorMsg const*);
isMsgKoopaCapSpinAttack(al::SensorMsg const*);
isMsgKoopaCatchKoopaCap(al::SensorMsg const*);
isMsgKoopaDashPunchAttack(al::SensorMsg const*);
isMsgKoopaFire2D(al::SensorMsg const*);
isMsgKoopaFireBallAttack(al::SensorMsg const*);
isMsgKoopaHackDamage(al::SensorMsg const*);
isMsgKoopaHackPunch(al::SensorMsg const*);
isMsgKoopaHackPunchCollide(al::SensorMsg const*);
isMsgKoopaHackTrample(al::SensorMsg const*);
isMsgKoopaInvalidHackPunchFaceToCollision(al::SensorMsg const*);
isMsgKoopaRingBeamInvalidTouch(al::SensorMsg const*);
isMsgKoopaTailAttack(al::SensorMsg const*);
isMsgKoopaTouchFloor(al::SensorMsg const*);
isMsgKouraAttack2D(al::SensorMsg const*);
isMsgKouraItemGet2D(al::SensorMsg const*);
isMsgKuribo2DTouch(al::SensorMsg const*);
isMsgKuriboCollisionDamage(al::SensorMsg const*);
isMsgKuriboCollisionKill(al::SensorMsg const*);
isMsgKuriboFlick(al::SensorMsg const*);
isMsgKuriboGirlAttack(al::SensorMsg const*);
isMsgKuriboGirlLove(al::SensorMsg const*);
isMsgKuriboTop(al::SensorMsg const*);
isMsgKuriboTowerNum(al::SensorMsg const*);
isMsgLaunchBlow(al::SensorMsg const*);
isMsgLineDancerLink(al::SensorMsg const*);
isMsgLongPushSensorHit(al::SensorMsg const*);
isMsgLongPushBoxHit(al::SensorMsg const*);
isMsgMagnetBulletAttack(al::SensorMsg const*);
isMsgMeganeAttack(al::SensorMsg const*);
isMsgMeganeHackTrample(al::SensorMsg const*);
isMsgMofumofuBodyChainExplode(al::SensorMsg const*);
isMsgMofumofuBulletUnexplosion(al::SensorMsg const*);
isMsgMoonBasementAttackMeteor(al::SensorMsg const*);
isMsgMoonBasementBreakShockwaveMeteor(al::SensorMsg const*);
isMsgMoonBasementRockSyncClippingRegist(al::SensorMsg const*);
isMsgMoonBasementRockSyncClippingInvalidate(al::SensorMsg const*);
isMsgMoonBasementRockSyncClippingValidate(al::SensorMsg const*);
isMsgMoonBasementRockThroughCollision(al::SensorMsg const*);
isMsgMorningStarWarpEnd(al::SensorMsg const*);
isMsgMorningStarWarpStart(al::SensorMsg const*);
isMsgMotorcycleAttack(al::SensorMsg const*);
isMsgMotorcycleCollideParkingLot(al::SensorMsg const*);
isMsgMotorcycleDashAttack(al::SensorMsg const*);
isMsgMotorcycleDashCollide(al::SensorMsg const*);
isMsgCactusNeedleAttack(al::SensorMsg const*);
isMsgCactusNeedleAttackStrong(al::SensorMsg const*);
isMsgNoLimitTouchJump(al::SensorMsg const*);
isMsgNoticePlayerDamage(al::SensorMsg const*);
isMsgNpcScareByEnemy(al::SensorMsg const*);
isMsgVolleyballNpcScareByEnemy(al::SensorMsg const*);
isMsgObjSnapForce(al::SensorMsg const*);
isMsgPackunEatCancel(al::SensorMsg const*);
isMsgPackunEatEnd(al::SensorMsg const*);
isMsgPackunEatStart(al::SensorMsg const*);
isMsgPackunEatStartFollow(al::SensorMsg const*);
isMsgPaint(al::SensorMsg const*);
isMsgPaintTexture(al::SensorMsg const*);
isMsgCheckPaintClear(al::SensorMsg const*);
isMsgCheckPaintAlpha(al::SensorMsg const*);
isMsgPartyPopperSoundAttack(al::SensorMsg const*);
isMsgPechoSpot(al::SensorMsg const*);
isMsgPlayerBallToss(al::SensorMsg const*);
isMsgPlayerCarryCameraSubjectiveStart(al::SensorMsg const*);
isMsgPlayerCarryCameraSubjectiveEnd(al::SensorMsg const*);
isMsgPlayerCarryShineGetStart(al::SensorMsg const*);
isMsgPlayerCarryShineGetEnd(al::SensorMsg const*);
isMsgPlayerCapCatch(al::SensorMsg const*);
isMsgPlayerCapHipDrop(al::SensorMsg const*);
isMsgPlayerCapPush(al::SensorMsg const*);
isMsgPlayerCapRecovery(al::SensorMsg const*);
isMsgPlayerCapTouchJump(al::SensorMsg const*);
isMsgPlayerCapTrample(al::SensorMsg const*);
isMsgPlayerCoinDashGet(al::SensorMsg const*);
isMsgPlayerEyePriorityTarget(al::SensorMsg const*);
isMsgPlayerDisregardHomingAttack(al::SensorMsg const*);
isMsgPlayerDisregardTargetMarker(al::SensorMsg const*);
isMsgPlayerEquipKoopaCap(al::SensorMsg const*);
isMsgPlayerFireBallAttack2D(al::SensorMsg const*);
isMsgPlayerFireBallAttack3D(al::SensorMsg const*);
isMsgPlayerHipDropDemoTrigger(al::SensorMsg const*);
isMsgPlayerHipDropHipDropSwitch(al::SensorMsg const*);
isMsgPlayerItemGet2D(al::SensorMsg const*);
isMsgPlayerJumpTakeOffFloor(al::SensorMsg const*);
isMsgPlayerObjectWallHit(al::SensorMsg const*);
isMsgPlayerObjLeapFrog(al::SensorMsg const*);
isMsgPlayerPenguinAttack(al::SensorMsg const*);
isMsgPlayerPenguinAttackReflect(al::SensorMsg const*);
isMsgPlayerPoleClimbKeep(al::SensorMsg const*);
isMsgPlayerPoleClimbReaction(al::SensorMsg const*);
isMsgPlayerRabbitGet(al::SensorMsg const*);
isMsgPlayerRollingObjHit(al::SensorMsg const*);
isMsgPlayerRollingWallHitDown(al::SensorMsg const*);
isMsgPlayerRollingWallHitMove(al::SensorMsg const*);
isMsgPlayerStartGrabCeil(al::SensorMsg const*);
isMsgPlayerStartWallJump(al::SensorMsg const*);
isMsgPlayerEndGrabCeil(al::SensorMsg const*);
isMsgPlayerSwordAttack(al::SensorMsg const*);
isMsgPlayerTouchFloorJumpCode(al::SensorMsg const*);
isMsgPlayerTrample2D(al::SensorMsg const*);
isMsgPlayerUpperPunch2D(al::SensorMsg const*);
isMsgPlayerObjUpperPunch2D(al::SensorMsg const*);
isMsgPropellerAttack(al::SensorMsg const*);
isMsgPukupukuDash(al::SensorMsg const*);
isMsgPukupukuKiss(al::SensorMsg const*);
isMsgPukupukuRollingAttack(al::SensorMsg const*);
isMsgPunchMachinePunchHook(al::SensorMsg const*);
isMsgPunchMachinePunchStraight(al::SensorMsg const*);
isMsgPunchMachinePunchUpper(al::SensorMsg const*);
isMsgPush2D(al::SensorMsg const*);
isMsgPushToFish(al::SensorMsg const*);
isMsgPushToMotorcycle(al::SensorMsg const*);
isMsgPushToPlayer(al::SensorMsg const*);
isMsgRadishAttack(al::SensorMsg const*);
isMsgRadishReflect(al::SensorMsg const*);
isMsgRaceStart(al::SensorMsg const*);
isMsgRaceStop(al::SensorMsg const*);
isMsgRaceWait(al::SensorMsg const*);
isMsgRequestChangeFireFlower(al::SensorMsg const*);
isMsgRequestChangeKinokoSuper(al::SensorMsg const*);
isMsgRequestPlayerJumpBreakFloor(al::SensorMsg const*);
isMsgRequestPlayerJump(al::SensorMsg const*);
isMsgRequestPlayerTrampleJump(al::SensorMsg const*);
isMsgRequestPlayerSpinJump(al::SensorMsg const*);
isMsgRequestSphinxJump(al::SensorMsg const*);
isMsgRideOnEnd(al::SensorMsg const*);
isMsgRideOnRelease(al::SensorMsg const*);
isMsgRideOnStart(al::SensorMsg const*);
isMsgRocketFlowerExtension(al::SensorMsg const*);
isMsgSandSharkAttack(al::SensorMsg const*);
isMsgSeedAttack(al::SensorMsg const*);
isMsgSeedAttackBig(al::SensorMsg const*);
isMsgSeedAttackHold(al::SensorMsg const*);
isMsgSeedItemGet(al::SensorMsg const*);
isMsgSeedReflect(al::SensorMsg const*);
isMsgSeedTouch(al::SensorMsg const*);
isMsgSenobiCancelStretch(al::SensorMsg const*);
isMsgSenobiPunchBlockTransparent(al::SensorMsg const*);
isMsgSenobiPartsMove(al::SensorMsg const*);
isMsgSenobiTrample(al::SensorMsg const*);
isMsgShibakenApproach(al::SensorMsg const*);
isMsgShibakenKick(al::SensorMsg const*);
isMsgSkaterAttack(al::SensorMsg const*);
isMsgSpherePush(al::SensorMsg const*);
isMsgSphinxJumpAttack(al::SensorMsg const*);
isMsgSphinxQuizRouteKill(al::SensorMsg const*);
isMsgSphinxRideAttack(al::SensorMsg const*);
isMsgSphinxRideAttackReflect(al::SensorMsg const*);
isMsgSphinxRideAttackTouchThrough(al::SensorMsg const*);
isMsgSphinxRideAttackTouch(al::SensorMsg const*);
isMsgStampTo2D(al::SensorMsg const*);
isMsgStartHack(al::SensorMsg const*);
isMsgStartInSaucePan(al::SensorMsg const*);
isMsgStatueDrop(al::SensorMsg const*);
isMsgStatueTrampleReflect(al::SensorMsg const*);
isMsgStatuePush(al::SensorMsg const*);
isMsgStatueSnap(al::SensorMsg const*);
isMsgSunshineAttack(al::SensorMsg const*);
isMsgTankBullet(al::SensorMsg const*);
isMsgTankBulletNoReaction(al::SensorMsg const*);
isMsgTankExplosion(al::SensorMsg const*);
isMsgTankHackTrample(al::SensorMsg const*);
isMsgTankKickHack(al::SensorMsg const*);
isMsgTankKickEnemy(al::SensorMsg const*);
isMsgTankLookOn(al::SensorMsg const*);
isMsgTestPunch(al::SensorMsg const*);
isMsgTestPunchStrong(al::SensorMsg const*);
isMsgTimerAthleticDemoStart(al::SensorMsg const*);
isMsgTouchDoorDrumn(al::SensorMsg const*);
isMsgTouchFireDrum2D(al::SensorMsg const*);
isMsgTrashBoxIn(al::SensorMsg const*);
isMsgTRexAttack(al::SensorMsg const*);
isMsgTRexAttackCollideAll(al::SensorMsg const*);
isMsgTRexAttackCollideBody(al::SensorMsg const*);
isMsgTRexAttackCollideHead(al::SensorMsg const*);
isMsgTRexDashAttack(al::SensorMsg const*);
isMsgTRexScrollPartsBreakWith(al::SensorMsg const*);
isMsgTsukkunForceCancelCollide(al::SensorMsg const*);
isMsgTsukkunHoldCollide(al::SensorMsg const*);
isMsgTsukkunThroughCollide(al::SensorMsg const*);
isMsgTsukkunThrustAll(al::SensorMsg const*);
isMsgTsukkunThrust(al::SensorMsg const*, bool*);
isMsgTsukkunThrustCollide(al::SensorMsg const*, bool*);
isMsgTsukkunNoTrace(al::SensorMsg const*);
isMsgTsukkunThrustHole(al::SensorMsg const*);
isMsgUtsuboAttack(al::SensorMsg const*);
isMsgWanderBossCameraRange(al::SensorMsg const*);
isMsgWanwanEnemyAttack(al::SensorMsg const*);
isMsgWanwanBlockAttack(al::SensorMsg const*);
isMsgWanwanHoleIn(al::SensorMsg const*);
isMsgWaterRoadIn(al::SensorMsg const*);
isMsgWaterRoadNear(al::SensorMsg const*);
isMsgWanwanPush(al::SensorMsg const*);
isMsgWanwanReboundAttack(al::SensorMsg const*);
isMsgWeaponItemGet(al::SensorMsg const*);
isMsgWhipAttack(al::SensorMsg const*);
isMsgWhipBind(al::SensorMsg const*);
isMsgWhipHold(al::SensorMsg const*);
isMsgWhipThrow(al::SensorMsg const*);
isMsgYokinBallAttack(al::SensorMsg const*);
isMsgYoshiDirectEat(al::SensorMsg const*);
isMsgYoshiTongueAttack(al::SensorMsg const*);
isMsgYoshiTongueEatBind(al::SensorMsg const*);
isMsgYoshiTongueEatBindCancel(al::SensorMsg const*);
isMsgYoshiTongueEatBindFinish(al::SensorMsg const*);
isMsgYoshiTongueEatHomingTarget(al::SensorMsg const*);
isMsgYukimaruPush(al::SensorMsg const*);
isMsgKillerAttackNoExplode(al::SensorMsg const*);
isMsgKillerMagnumAttack(al::SensorMsg const*);
isMsgKillerMagnumHackAttack(al::SensorMsg const*);
isMsgGabuzouAttack(al::SensorMsg const*);
isMsgStackerRollingAttack(al::SensorMsg const*);
isMsgStackerCapBoostAttack(al::SensorMsg const*);
isMsgIgnoreIgnitionBomb(al::SensorMsg const*);
isMsgExplosionReflectBomb(al::SensorMsg const*);
isMsgGolemStampPress(al::SensorMsg const*);
setMsgYoshiTongueEatBindRadiusAndOffset(al::SensorMsg const*, float, float);
setMsgYoshiTongueEatBindScale(al::SensorMsg const*, float);
isMsgTsukkunThrustSpin(al::SensorMsg const*, bool*);
isMsgTsukkunThrustReflect(al::SensorMsg const*, bool*);
isMsgTsukkunThrustHitReflectCollide(al::SensorMsg const*, bool*);
isMsgTsukkunThrustReflectCollide(al::SensorMsg const*, bool*);
isMsgSwitchOnWithSaveRequest(al::SensorMsg const*, SaveObjInfo**);
isMsgNpcCapReactionAll(al::SensorMsg const*);
isMsgHackNpcCapReactionAll(al::SensorMsg const*);
checkMsgNpcTrampleReactionAll(al::SensorMsg const*, al::HitSensor const*, al::HitSensor const*, bool);
isMsgPlayerAndCapObjHipDropReflectAll(al::SensorMsg const*);
isMsgKoopaCapPunchAll(al::SensorMsg const*);
isMsgKoopaCapPunchInvincibleAll(al::SensorMsg const*);
isMsgKoopaCapPunchFinishAll(al::SensorMsg const*);
isMsgItemGet(al::SensorMsg const*);
isMsgItemGetByWeapon(al::SensorMsg const*);
isMsgItemGet2D(al::SensorMsg const*);
isMsgBlockUpperPunch2D(al::SensorMsg const*);
isMsgItemGetAll(al::SensorMsg const*);
isMsgShineGet(al::SensorMsg const*);
isMsgShineGet2D(al::SensorMsg const*);
isMsgShineReaction(al::SensorMsg const*);
isMsgKillByShineGet(al::SensorMsg const*);
isMsgKillByHomeDemo(al::SensorMsg const*);
isMsgEndHomeDemo(al::SensorMsg const*);
isMsgBreakBySword(al::SensorMsg const*);
isMsgPressDown(al::SensorMsg const*);
isMsgPlayerAndCapObjHipDropAll(al::SensorMsg const*);
isMsgAttackDirect(al::SensorMsg const*);
isMsgBlowDown(al::SensorMsg const*);
isMsgTrampleReflectAll(al::SensorMsg const*);
isMsgThrowObjHit(al::SensorMsg const*);
isMsgThrowObjHitReflect(al::SensorMsg const*);
isMsgPlayerAndCapHipDropAll(al::SensorMsg const*);
isMsgUpperPunchAll(al::SensorMsg const*);
sendMsgBlockUpperPunch2D(al::HitSensor*, al::HitSensor*);
isMsgBlockReaction2D(al::SensorMsg const*);
isMsgBlockReaction3D(al::SensorMsg const*);
isMsgBlockReactionAll(al::SensorMsg const*);
isMsgBreakFrailBox(al::SensorMsg const*);
isMsgDamageFrailBox(al::SensorMsg const*);
isMsgChorobonReaction(al::SensorMsg const*);
isMsgBreakSignBoard(al::SensorMsg const*);
isMsgBreakCollapseSandHill(al::SensorMsg const*);
calcBlowDownDir(sead::Vector3<float>*, al::SensorMsg const*, al::HitSensor*, al::HitSensor*);
tryGetTsukkunThrustDir(sead::Vector3<float>*, al::SensorMsg const*);
isMsgPlayerDamage(al::SensorMsg const*);
isMsgPlayerDamage2D(al::SensorMsg const*);
isMsgPlayerDamageBlowDown(al::SensorMsg const*);
isMsgPlayerJumpRequestAll(al::SensorMsg const*);
trySendMsgHackPunchToCeil(al::LiveActor*, al::HitSensor*);
trySendMsgHackPunchToSensor(al::LiveActor*, al::HitSensor*, al::HitSensor*);
isMsgDashPanel(al::SensorMsg const*, int*);
isMsgNetworkShootingShot(al::SensorMsg const*, int);
isMsgNetworkShootingChargeShot(al::SensorMsg const*, int);
isMsgRaceReturnToCourse(al::SensorMsg const*, sead::Vector3<float>*, sead::Vector3<float>*);
isFallingTargetMoonBasementRock(al::SensorMsg const*);
tryGetTestPunchInfo(sead::Vector3<float>*, int*, al::SensorMsg const*, int);
tryGetTestPunchTeamId(int*, al::SensorMsg const*);
tryGetPunchGuard(int*, al::SensorMsg const*, int);
tryGetTsukkunThrustInfo(sead::Vector3<float>*, int*, al::SensorMsg const*);
tryGetTsukkunThrustReflectDir(sead::Vector3<float>*, al::SensorMsg const*);
tryGetTsukkunThrustHole(sead::Vector3<float>*, sead::Vector3<float>*, al::SensorMsg const*);
tryGetRequestPlayerJumpInfo(float*, al::SensorMsg const*);
tryGetRequestPlayerTrampleJumpInfo(float*, al::SensorMsg const*);
tryGetRequestPlayerSpinJumpInfo(float*, al::SensorMsg const*);
tryGetRequestSphinxJumpInfo(float*, al::SensorMsg const*);
tryGetTouchTargetInfo(TouchTargetInfo**, al::SensorMsg const*);
tryGetTouchTargetInfoCollisionTouchPos(sead::Vector3<float>*, al::SensorMsg const*);
tryInitTouchTargetInfoBySensorOffset(al::SensorMsg const*, al::HitSensor const*, sead::Vector3<float> const&, sead::Vector3<float> const&);
tryInitTouchTargetInfoByConnector(al::SensorMsg const*, al::MtxConnector const*, sead::Vector3<float> const&, sead::Vector3<float> const&, bool);
tryCalcCollisionImpulse(sead::Vector3<float>*, float, sead::Vector3<float> const&, float, al::SensorMsg const*);
tryInitWhipTarget(al::SensorMsg const*, al::HitSensor*, sead::Vector3<float> const*);
tryGetWhipThrowDir(sead::Vector3<float>*, al::SensorMsg const*);
tryMagnetPower(bool*, al::SensorMsg const*);
tryMagnetBulletAttack(float*, al::SensorMsg const*);
isMsgTrampolineCrackJump(float*, float*, al::SensorMsg const*);
requestHitReactionToAttacker(al::SensorMsg const*, al::HitSensor const*, al::HitSensor const*);
requestHitReactionToAttacker(al::SensorMsg const*, al::HitSensor const*, sead::Vector3<float> const&);
tryGetCapTouchWallHitPos(sead::Vector3<float>*, al::SensorMsg const*);
tryGetCapTouchWallNormal(sead::Vector3<float>*, al::SensorMsg const*);
isCapRethrowReturnOnly(al::SensorMsg const*);
tryGetCapRethrowPos(sead::Vector3<float>*, al::SensorMsg const*);
tryGetCapRethrowFront(sead::Vector3<float>*, al::SensorMsg const*);
tryGetCapRethrowUp(sead::Vector3<float>*, al::SensorMsg const*);
tryGetHackBlowJump(sead::Vector3<float>*, float*, al::SensorMsg const*);
tryGetGolemStampPushV(float*, al::SensorMsg const*);
tryGetGolemStampPushH(float*, al::SensorMsg const*);
tryGetRequestPlayerWaitAnim(char const**, al::SensorMsg const*);
tryGetCapChangeGiant(float*, int*, al::SensorMsg const*);
tryGetByugoBlowForce(sead::Vector3<float>*, al::SensorMsg const*);
tryGetObjSnapForce(sead::Vector3<float>*, al::SensorMsg const*);
getPackunEatCancelPosAndFront(sead::Vector3<float>*, sead::Vector3<float>*, al::SensorMsg const*);
tryGetPackunEatEndPos(sead::Vector3<float>*, al::SensorMsg const*);
tryGetPackunEatEndDir(sead::Vector3<float>*, al::SensorMsg const*);
tryGetPackunEatStartFollowPos(sead::Vector3<float> const**, al::SensorMsg const*);
tryGetFireBlowerAttackPos(sead::Vector3<float>*, al::SensorMsg const*);
tryGetFireBlowerAttackDir(sead::Vector3<float>*, al::SensorMsg const*);
tryGetFireBlowerAttackRadius(float*, al::SensorMsg const*);
tryGetPaintColor(sead::Color4u8*, al::SensorMsg const*);
tryGetPaintSize(float*, al::SensorMsg const*);
tryGetPaintDrawType(int*, al::SensorMsg const*);
tryGetPaintTextureSize(float*, al::SensorMsg const*);
tryGetPaintTextureRotation(float*, al::SensorMsg const*);
tryGetPaintTextureDrawType(int*, al::SensorMsg const*);
tryGetCheckPaintClearColor(sead::Color4u8*, al::SensorMsg const*);
tryGetCheckPaintClearPos(sead::Vector3<float>*, al::SensorMsg const*);
tryGetCheckPaintClearDrawType(int*, al::SensorMsg const*);
tryGetCheckPaintAlphaPos(sead::Vector3<float>*, al::SensorMsg const*);
tryGetSenobiPartsMoveDistance(float*, al::SensorMsg const*);
tryGetSenobiPartsCollidedNormal(sead::Vector3<float>*, al::SensorMsg const*);
tryGetStampTo2DForce(sead::Vector3<float>*, al::SensorMsg const*);
tryGetGhostStartOkObjId(sead::BufferedSafeStringBase<char>*, al::SensorMsg const*);
tryGetAirExplosionForce(sead::Vector3<float>*, al::SensorMsg const*);
sendMsgGotogotonOn(al::HitSensor*, al::HitSensor*);
sendMsgGotogotonGetJumpPath(al::HitSensor*, al::HitSensor*, al::ParabolicPath*);
sendMsgGotogotonGoalExist(al::HitSensor*, al::HitSensor*);
sendMsgGotogotonGoalMatch(al::HitSensor*, al::HitSensor*, GotogotonMark const*);
isMatchGotogotonGoal(al::SensorMsg const*, GotogotonMark const*);
isMsgGotogotonOn(al::SensorMsg const*);
isMsgGotogotonGoalExist(al::SensorMsg const*);
sendMsgBossMagmaBreathForce(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
sendMsgBossMagmaCatchPlayer(al::HitSensor*, al::HitSensor*);
sendMsgBossMagmaReleasePlayer(al::HitSensor*, al::HitSensor*);
sendMsgBossMagmaDeadDemoStart(al::HitSensor*, al::HitSensor*);
sendMsgBossMagmaDeadDemoEnd(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
sendMsgBossMagmaResetPos(al::HitSensor*, al::HitSensor*, sead::Vector3<float> const&);
sendMsgBossMagmaQueryToBubble(al::HitSensor*, al::HitSensor*);
isMsgBossMagmaCatchPlayer(al::SensorMsg const*);
isMsgBossMagmaReleasePlayer(al::SensorMsg const*);
isMsgBossMagmaDeadDemoStart(al::SensorMsg const*);
isMsgBossMagmaDeadDemoEnd(al::SensorMsg const*);
tryGetBossMagmaDeadDemoEndTargetPos(al::SensorMsg const*, sead::Vector3<float>*);
tryGetBossMagmaBreathForce(al::SensorMsg const*, sead::Vector3<float>*);
tryGetBossMagmaResetPos(al::SensorMsg const*, sead::Vector3<float>*);
isMsgBossMagmaQueryToBubble(al::SensorMsg const*);
getMofumofuBodyChainExplodeDelayStep(al::SensorMsg const*);
isMsgMofumofuReflectAll(al::SensorMsg const*);
calcFishingUpJugemDir(sead::Vector3<float>*, al::SensorMsg const*);
getFishingUpFloatPos(al::SensorMsg const*);
tryGetFishingUpFloatMaterialCode(al::SensorMsg const*);
getFishingHookSensor(al::SensorMsg const*);
sendMsgCheckFishingTarget(al::HitSensor*, al::HitSensor*, FishingFish const*);
isMsgCheckFishingTarget(al::SensorMsg const*);
getCheckFishingTarget(al::SensorMsg const*);
getGunetterPushCenter(al::SensorMsg const*);
getGunetterPushRadius(al::SensorMsg const*);
getNumKuriboTowerOn(al::SensorMsg const*);
isMsgPlayerLookAtPosition(al::SensorMsg const*);
setMsgPlayerLookAtPosition(al::SensorMsg const*, sead::Vector3<float> const&);
isMsgTargetMarkerPosition(al::SensorMsg const*);
setMsgTargetMarkerPosition(al::SensorMsg const*, sead::Vector3<float> const&);
isMsgSandGeyserRaise(al::SensorMsg const*);
tryGetSandGeyserRaise(al::SensorMsg const*, float*, float*);
tryTreasureBoxPlayerTrampleJump(al::LiveActor*, al::HitSensor*, al::HitSensor*, float);
sendMsgPushToPlayerAndKillVelocityToTarget(al::LiveActor*, al::HitSensor*, al::HitSensor*);
sendMsgPushToPlayerAndKillVelocityToTargetH(al::LiveActor*, al::HitSensor*, al::HitSensor*);
tryReceivePushAndAddVelocity(al::LiveActor*, al::SensorMsg const*);
tryReceiveMsgPushToPlayerAndAddVelocity(al::LiveActor*, al::SensorMsg const*, al::HitSensor const*, al::HitSensor const*, float);
tryReceiveMsgPushToPlayerAndAddVelocityH(al::LiveActor*, al::SensorMsg const*, al::HitSensor const*, al::HitSensor const*, float);
tryReceiveMsgPushToPlayerAndCalcPushTrans(sead::Vector3<float>*, al::SensorMsg const*, al::LiveActor const*, al::HitSensor const*, al::HitSensor const*, float);
tryReceiveMsgPushToHackerAndCalcPushTrans(sead::Vector3<float>*, al::SensorMsg const*, al::LiveActor const*, al::HitSensor const*, al::HitSensor const*, float, bool);
tryReceiveMsgPushToYoshiNpcAndCalcPushTrans(sead::Vector3<float>*, al::SensorMsg const*, al::LiveActor const*, al::HitSensor const*, al::HitSensor const*, float);
tryReceiveMsgPushToCapAndCalcPushTrans(sead::Vector3<float>*, al::SensorMsg const*, al::LiveActor const*, al::HitSensor const*, al::HitSensor const*, float);
tryReceiveMsgPushToGrowPlantAndCalcPushTrans(sead::Vector3<float>*, al::SensorMsg const*, al::LiveActor const*, al::HitSensor const*, al::HitSensor const*, float);
sendMsgInitCapTarget(al::HitSensor*, al::HitSensor*, CapTargetInfo const**);
isMsgInitCapTarget(al::SensorMsg const*);
setCapTargetInfo(al::SensorMsg const*, CapTargetInfo const*);
tryReceiveMsgInitCapTargetAndSetCapTargetInfo(al::SensorMsg const*, CapTargetInfo const*);
sendMsgTransferHack(al::HitSensor*, al::HitSensor*);
sendMsgRequestTransferHack(al::HitSensor*, al::HitSensor*);
sendMsgInitHack(al::HitSensor*, al::HitSensor*);
sendMsgEndHack(al::HitSensor*, al::HitSensor*, HackEndParam const*);
isMsgTransferHack(al::SensorMsg const*);
isMsgRequestTransferHack(al::SensorMsg const*);
isMsgInitHack(al::SensorMsg const*);
isMsgEndHack(HackEndParam const**, al::SensorMsg const*);
isMsgHackDirectStageInit(IUsePlayerHack**, al::SensorMsg const*);
isMsgKillByBossBattleDemo(al::SensorMsg const*);
isMsgKillByHackFirstDemo(al::SensorMsg const*);
isMsgKillByMoonRockDemo(al::SensorMsg const*);
sendMsgNpcScareByEnemy(al::HitSensor*, al::HitSensor*, int);
tryReceiveMsgNpcScareByEnemyIgnoreTargetHack(al::SensorMsg const*, CapTargetInfo const*);
tryIncrementComboCount(int*, al::SensorMsg const*);
tryGetMsgComboCount(al::SensorMsg const*);
getMsgComboCount(al::SensorMsg const*);
isRideOn(al::HitSensor const*, al::HitSensor const*);
isMsgKillBySwitchTimer(al::SensorMsg const*);
isVisibleChameleon(al::SensorMsg const*);
isMsgRequestPlayerStainWet(al::SensorMsg const*, int*);
tryGetKuriboTowerNum(al::HitSensor*, al::HitSensor*);
setKuriboTowerNum(al::SensorMsg const*, int);
getSpherePushCenter(al::SensorMsg const*);
getSpherePushRadius(al::SensorMsg const*);
getSmellDigPoint(al::SensorMsg const*);
convertCsecTo(int*, int*, int*, int);
setShadowDropLength(al::LiveActor*, al::ActorInitInfo const&, char const*);
calcShadowDropClippingCenter(sead::Vector3<float>*, al::LiveActor const*, float, float);
setShadowDropOffset(al::LiveActor*, char const*, float);
tryCreateWaterSurfaceShadow(al::ActorInitInfo const&, char const*);
tryCreateWaterSurfaceCoinShadow(al::ActorInitInfo const&);
tryUpdateWaterSurfaceCoinShadow(WaterSurfaceShadow*, al::LiveActor*, float);
initHackShadow(al::LiveActor*);
setupHackShadow(al::LiveActor*);
endHackShadow(al::LiveActor*);
isModeE3Rom();
isModeE3MovieRom();
isModeE3LiveRom();
isModeDiverRom();
isModeJungleGymRom();
isModeDiverOrJungleGymRom();
isModeMovieRom();
isModeEpdMovieRom();
isOnSwitchLinkSave(al::LiveActor const*, al::ActorInitInfo const&);
isSaveSwitch(al::ActorInitInfo const&);
registerLayoutTextureRenderObj(al::IUseSceneObjHolder*, al::LayoutTextureRenderObj*);
checkTimeReverseAndRestore(unsigned long*, unsigned long);
isSensorTypeYoshiEnableSendPush(al::HitSensor const*);
isSensorTypeYoshiMsgReceivable(al::HitSensor const*);
isInPuddleHeight(al::WaterSurfaceFinder const*, PlayerConst const*);
tryCalcTonguePullPose(sead::Quat<float>*, al::LiveActor const*, YoshiTongue const*);
findClingGroundPos(sead::Vector3<float>*, al::LiveActor const*, sead::Vector3<float> const&, float);

} 
