#pragma once

class ImomuPartsController
{
public:
    getJointCtrlNum();
    ImomuPartsController(al::LiveActor*);
    resetHead(sead::Vector3<float> const&, sead::Vector3<float> const&);
    resetTail();
    onHack();
    offHack();
    updateAtInvalidate();
    resetPosition(sead::Vector3<float>);
    updateHeadAndTailJoint(bool);
    updateBodyJointNoExpand();
    updateEnemy(sead::Vector3<float> const&, float);
    controlHeadEnemy(sead::Vector3<float> const&);
    updateHeadDir();
    updateSampleEnemy(float);
    updateBodyJoint(float, float, bool);
    updateEnemyShrink(float, bool);
    updateHeadAndCalcStartRate(float*, float*, float, float);
    updateTailAndCalcEndRate(float*, float*, float, float);
    calcShrinkLength(float, float);
    updateEnemyTurn(sead::Vector3<float> const&, float, sead::Vector3<float> const&);
    controlHead(sead::Vector3<float> const&, float, bool);
    setHeadDir(sead::Vector3<float> const&, bool);
    resetSample();
    turnTail(bool, float);
    updateHackMove(sead::Vector3<float> const&, float, bool);
    followCollisionPartsHead();
    controlHeadHackMove(sead::Vector3<float> const&, float, bool);
    updateSampleHackMove(bool);
    updateHackTurn(sead::Vector3<float> const&);
    calcCenterPos(sead::Vector3<float>*) const;
    followPos(sead::Vector3<float>*);
    followVec(sead::Vector3<float>*);
    updateHackExpand(sead::Vector3<float> const&, float, float);
    followCollisionPartsTail();
    calcJointTrans(sead::Vector3<float>*, int) const;
    updateSample(bool, float, sead::Vector3<float> const&);
    updateHackShrink(float, bool);
    solveCollision(ImomuPartsController::SamplingData*, ImomuPartsController::SamplingData*);
    updateHeadPosFromSample();
    tryStartHackExpand();
    tryGetTailCollidedCollisionParts(sead::Vector3<float>*) const;
    isOnGroundExpand(bool*) const;
    isOnGroundTail() const;
    checkSensorHitEnemyBodyCore(al::HitSensor*, al::HitSensor*, float);
    checkSensorHitEnemyBody(al::HitSensor*, al::HitSensor*);
    checkSensorHitEnemyBodyForBlock(al::HitSensor*, al::HitSensor*);
    checkSensorHitEnemyAttack(al::HitSensor*, al::HitSensor*);
    resetJointForce();
    resetHeadVel();
    resetHeadDirMove();
    validateAndReset();
    invalidate();
    tryStartReaction(al::HitSensor const*);
    isShrinkEnd(float) const;
    getTailOffset() const;
    tryGetFollowMove(sead::Vector3<float>*) const;
    calcHeadCenter(sead::Vector3<float>*) const;
    calcTailJointTrans(sead::Vector3<float>*) const;
    getTailJointIndex() const;
    resetTurnControlTmp();
    incShrinkCount();
    controlHeadCore(sead::Vector3<float> const&, float, bool);
    calcFirstSamplePosFromHeadPos(sead::Vector3<float>*);
    setTailDir(sead::Vector3<float> const&, bool);
    tryGetHeadCollidedCollisionParts(sead::Vector3<float>*) const;
    tryCalcPosFromDisplaySample(sead::Vector3<float>*, float);
    calcPos(sead::Vector3<float>*, float, float, float) const;
    calcFixRate(float, float, float) const;
    calcPosFromLen(sead::Vector3<float>*, float) const;
    isOnHack() const;
};
