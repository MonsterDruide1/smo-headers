#pragma once

class PlayerInput
{
public:
    PlayerInput(al::LiveActor const*, IUsePlayerCollision const*, IUseDimension const*);
    update();
    updateWallAlong();
    updateSnapMoveArea();
    updateInput3D();
    getMoveInputRaw(bool) const;
    calcMoveInputImpl(sead::Vector3<float>*, sead::Vector3<float> const&, bool, bool, bool) const;
    updateInput2D();
    resetAlongWall();
    isNoInput() const;
    isNoInputSeparateCap() const;
    isHoldCapSeparateJump() const;
    isHoldCapSeparateHipDrop() const;
    getSeparatePlay2P();
    isMove() const;
    isMoveDeepDown() const;
    getStickMoveRaw() const;
    isMoveDeepDownNoSnap() const;
    isEnableCarry() const;
    isTriggerCarryStart() const;
    isTriggerCarryRelease() const;
    isTriggerSwingActionMario() const;
    isTriggerCarryReleaseBySwing() const;
    isTriggerAction() const;
    isTriggerJump() const;
    isTriggerHipDrop() const;
    isTriggerHeadSliding() const;
    isTriggerPaddle() const;
    isTriggerRolling(bool) const;
    isTriggerRollingRestartSwing() const;
    isTriggerRollingCancelHipDrop(bool) const;
    isTriggerHackAction() const;
    isTriggerHackJump() const;
    isTriggerHackSwing() const;
    isTriggerHackEnd() const;
    isTriggerHackSeparateJump() const;
    isTriggerSeparateCapJangoHelp() const;
    isHoldHackSeparateJump() const;
    isTriggerGetOff() const;
    isHoldAction() const;
    isHoldJump() const;
    isHoldHipDrop() const;
    isTriggerStartTalk() const;
    isTriggerStartWorldWarp() const;
    isTriggerCancelWorldWarp() const;
    isTriggerSpinCap() const;
    isTriggerToggleStayCap() const;
    isTriggerSpinAttackSeparate() const;
    getSeparatePlay1P();
    isTriggerCapReturn() const;
    isTriggerCapAttackSeparate() const;
    isTriggerSwingActionCap() const;
    isTriggerCapSingleHandThrow() const;
    isTriggerCapDoubleHandThrow() const;
    isTriggerCapSeparateJump() const;
    isTriggerCapSeparateHipDrop() const;
    isTriggerSwingPoleClimbFast() const;
    isHoldPoleClimbDown() const;
    isTriggerAppendCapAttack(bool) const;
    isHoldSquat() const;
    calcInputDirectionSnap2D(sead::Vector3<float>*) const;
    isHoldSpinCap() const;
    isHoldCapAction() const;
    isHoldPoleClimbFast() const;
    isHoldWallCatchMoveFast() const;
    isHoldHackAction() const;
    isHoldHackJump() const;
    isHoldEnterUpperDokan2D() const;
    isHoldEnterSideDokan2D(sead::Vector3<float> const&) const;
    calcMoveDirection(sead::Vector3<float>*, sead::Vector3<float> const&) const;
    isTriggerChange2D() const;
    isTriggerChange3D() const;
    isReleaseJump() const;
    isReleaseHackAction() const;
    isReleaseHackJump() const;
    isEnableDashInput() const;
    isSpinInput() const;
    isSpinClockwise() const;
    isSpinCounterClockwise() const;
    calcMoveInput(sead::Vector3<float>*, sead::Vector3<float> const&) const;
    calc2DSnapJumpMoveInput(sead::Vector3<float>*, sead::Vector3<float> const&) const;
    isPoleMoveInputReverseX() const;
    getInputViewMtx() const;
    calcPoleMoveInput(sead::Vector2<float>*) const;
    calcCapThrowInput(sead::Vector3<float>*, sead::Vector3<float> const&) const;
    calcCapSeparateMoveInput(sead::Vector3<float>*, sead::Vector3<float> const&) const;
    isSameStickMove(sead::Vector2<float> const&, float) const;
    getRadiconInputSteeringValue() const;
    getStickCameraRaw() const;
    getCameraInputRaw() const;
    getStickCameraSubRaw() const;
    isTriggerCameraReset() const;
    isTriggerCameraSubjective() const;
    isHoldBalloonSet() const;
    isHoldCameraZoom() const;
    isHoldCameraSnapShotZoomIn() const;
    isHoldCameraSnapShotZoomOut() const;
    isHoldCameraSnapShotRollLeft() const;
    isHoldCameraSnapShotRollRight() const;
    isEnableShowTutorialInput() const;
    isEnableRecoveryLifeInput() const;
    getCapThrowDir() const;
    getSwingThrowDir() const;
    isSwingDirLeft() const;
    isSwingDirRight() const;
    isThrowTypeLeftRight(sead::Vector2<float> const&) const;
    isThrowTypeSpiral(sead::Vector2<float> const&) const;
    isThrowTypeRolling(sead::Vector2<float> const&) const;
    isEnableConsiderCapThrowDoubleSwing() const;
    getPoseRotZDegreeLeft() const;
    getPoseRotZDegreeRight() const;
    isTriggerSwingLeftHand() const;
    isTriggerSwingRightHand() const;
    isTriggerSwingDoubleHand() const;
    isTriggerSwingDoubleHandReverseDir() const;
    isTriggerSwingDoubleHandReverseInsideDir() const;
    isTriggerSwingDoubleHandReverseOutsideDir() const;
    getSwingVelLeftHand() const;
    getSwingVelRightHand() const;
    getSwingLeftHandDir() const;
    getSwingRightHandDir() const;
    calcHoldMoveInput2D(sead::Vector3<float>*, al::LiveActor const*, IUseDimension const*, sead::Vector2<float> const&, sead::Vector3<float> const&, sead::Matrix34<float> const*) const;
    calcHoldMoveInput3D(sead::Vector3<float>*, sead::Vector3<float> const&, sead::Matrix34<float> const*) const;
    snapWallAlongInput(sead::Vector3<float>*, sead::Vector3<float> const&) const;
    snapAreaInput(sead::Vector3<float>*, sead::Vector3<float> const&) const;
    resetHoldInfo3D();
    resetHoldInfo2D();
};
